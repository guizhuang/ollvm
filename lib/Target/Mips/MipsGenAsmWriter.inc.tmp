/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void MipsInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ 'j', 'a', 'l', 'r', 'c', 32, 9, 0,
  /* 8 */ 'd', 'm', 'f', 'c', '0', 9, 0,
  /* 15 */ 'm', 'f', 'h', 'c', '0', 9, 0,
  /* 22 */ 'm', 't', 'h', 'c', '0', 9, 0,
  /* 29 */ 'd', 'm', 't', 'c', '0', 9, 0,
  /* 36 */ 'v', 'm', 'm', '0', 9, 0,
  /* 42 */ 'm', 't', 'm', '0', 9, 0,
  /* 48 */ 'm', 't', 'p', '0', 9, 0,
  /* 54 */ 'b', 'b', 'i', 't', '0', 9, 0,
  /* 61 */ 'l', 'd', 'c', '1', 9, 0,
  /* 67 */ 's', 'd', 'c', '1', 9, 0,
  /* 73 */ 'c', 'f', 'c', '1', 9, 0,
  /* 79 */ 'd', 'm', 'f', 'c', '1', 9, 0,
  /* 86 */ 'm', 'f', 'h', 'c', '1', 9, 0,
  /* 93 */ 'm', 't', 'h', 'c', '1', 9, 0,
  /* 100 */ 'c', 't', 'c', '1', 9, 0,
  /* 106 */ 'd', 'm', 't', 'c', '1', 9, 0,
  /* 113 */ 'l', 'w', 'c', '1', 9, 0,
  /* 119 */ 's', 'w', 'c', '1', 9, 0,
  /* 125 */ 'l', 'd', 'x', 'c', '1', 9, 0,
  /* 132 */ 's', 'd', 'x', 'c', '1', 9, 0,
  /* 139 */ 'l', 'u', 'x', 'c', '1', 9, 0,
  /* 146 */ 's', 'u', 'x', 'c', '1', 9, 0,
  /* 153 */ 'l', 'w', 'x', 'c', '1', 9, 0,
  /* 160 */ 's', 'w', 'x', 'c', '1', 9, 0,
  /* 167 */ 'm', 't', 'm', '1', 9, 0,
  /* 173 */ 'm', 't', 'p', '1', 9, 0,
  /* 179 */ 'b', 'b', 'i', 't', '1', 9, 0,
  /* 186 */ 'b', 'b', 'i', 't', '0', '3', '2', 9, 0,
  /* 195 */ 'b', 'b', 'i', 't', '1', '3', '2', 9, 0,
  /* 204 */ 'd', 's', 'r', 'a', '3', '2', 9, 0,
  /* 212 */ 'b', 'p', 'o', 's', 'g', 'e', '3', '2', 9, 0,
  /* 222 */ 'd', 's', 'l', 'l', '3', '2', 9, 0,
  /* 230 */ 'd', 's', 'r', 'l', '3', '2', 9, 0,
  /* 238 */ 'l', 'w', 'm', '3', '2', 9, 0,
  /* 245 */ 's', 'w', 'm', '3', '2', 9, 0,
  /* 252 */ 'd', 'r', 'o', 't', 'r', '3', '2', 9, 0,
  /* 261 */ 'l', 'd', 'c', '2', 9, 0,
  /* 267 */ 's', 'd', 'c', '2', 9, 0,
  /* 273 */ 'd', 'm', 'f', 'c', '2', 9, 0,
  /* 280 */ 'm', 'f', 'h', 'c', '2', 9, 0,
  /* 287 */ 'm', 't', 'h', 'c', '2', 9, 0,
  /* 294 */ 'd', 'm', 't', 'c', '2', 9, 0,
  /* 301 */ 'l', 'w', 'c', '2', 9, 0,
  /* 307 */ 's', 'w', 'c', '2', 9, 0,
  /* 313 */ 'm', 't', 'm', '2', 9, 0,
  /* 319 */ 'm', 't', 'p', '2', 9, 0,
  /* 325 */ 'a', 'd', 'd', 'i', 'u', 'r', '2', 9, 0,
  /* 334 */ 'l', 'd', 'c', '3', 9, 0,
  /* 340 */ 's', 'd', 'c', '3', 9, 0,
  /* 346 */ 'l', 'w', 'c', '3', 9, 0,
  /* 352 */ 's', 'w', 'c', '3', 9, 0,
  /* 358 */ 'a', 'd', 'd', 'i', 'u', 's', '5', 9, 0,
  /* 367 */ 's', 'b', '1', '6', 9, 0,
  /* 373 */ 'b', 'c', '1', '6', 9, 0,
  /* 379 */ 'j', 'r', 'c', '1', '6', 9, 0,
  /* 386 */ 'b', 'n', 'e', 'z', 'c', '1', '6', 9, 0,
  /* 395 */ 'b', 'e', 'q', 'z', 'c', '1', '6', 9, 0,
  /* 404 */ 'a', 'n', 'd', '1', '6', 9, 0,
  /* 411 */ 'm', 'o', 'v', 'e', '1', '6', 9, 0,
  /* 419 */ 's', 'h', '1', '6', 9, 0,
  /* 425 */ 'a', 'n', 'd', 'i', '1', '6', 9, 0,
  /* 433 */ 'l', 'i', '1', '6', 9, 0,
  /* 439 */ 'b', 'r', 'e', 'a', 'k', '1', '6', 9, 0,
  /* 448 */ 's', 'l', 'l', '1', '6', 9, 0,
  /* 455 */ 's', 'r', 'l', '1', '6', 9, 0,
  /* 462 */ 'l', 'w', 'm', '1', '6', 9, 0,
  /* 469 */ 's', 'w', 'm', '1', '6', 9, 0,
  /* 476 */ 's', 'd', 'b', 'b', 'p', '1', '6', 9, 0,
  /* 485 */ 'j', 'r', '1', '6', 9, 0,
  /* 491 */ 'x', 'o', 'r', '1', '6', 9, 0,
  /* 498 */ 'j', 'a', 'l', 'r', 's', '1', '6', 9, 0,
  /* 507 */ 'n', 'o', 't', '1', '6', 9, 0,
  /* 514 */ 'l', 'b', 'u', '1', '6', 9, 0,
  /* 521 */ 's', 'u', 'b', 'u', '1', '6', 9, 0,
  /* 529 */ 'a', 'd', 'd', 'u', '1', '6', 9, 0,
  /* 537 */ 'l', 'h', 'u', '1', '6', 9, 0,
  /* 544 */ 'l', 'w', '1', '6', 9, 0,
  /* 550 */ 's', 'w', '1', '6', 9, 0,
  /* 556 */ 'b', 'n', 'e', 'z', '1', '6', 9, 0,
  /* 564 */ 'b', 'e', 'q', 'z', '1', '6', 9, 0,
  /* 572 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 588 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 605 */ 'd', 'l', 'a', 9, 0,
  /* 610 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 626 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 643 */ 'd', 's', 'r', 'a', 9, 0,
  /* 649 */ 'd', 'l', 's', 'a', 9, 0,
  /* 655 */ 'c', 'f', 'c', 'm', 's', 'a', 9, 0,
  /* 663 */ 'c', 't', 'c', 'm', 's', 'a', 9, 0,
  /* 671 */ 'a', 'd', 'd', '_', 'a', '.', 'b', 9, 0,
  /* 680 */ 'm', 'i', 'n', '_', 'a', '.', 'b', 9, 0,
  /* 689 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'b', 9, 0,
  /* 699 */ 'm', 'a', 'x', '_', 'a', '.', 'b', 9, 0,
  /* 708 */ 's', 'r', 'a', '.', 'b', 9, 0,
  /* 715 */ 'n', 'l', 'o', 'c', '.', 'b', 9, 0,
  /* 723 */ 'n', 'l', 'z', 'c', '.', 'b', 9, 0,
  /* 731 */ 's', 'l', 'd', '.', 'b', 9, 0,
  /* 738 */ 'p', 'c', 'k', 'o', 'd', '.', 'b', 9, 0,
  /* 747 */ 'i', 'l', 'v', 'o', 'd', '.', 'b', 9, 0,
  /* 756 */ 'i', 'n', 's', 'v', 'e', '.', 'b', 9, 0,
  /* 765 */ 'v', 's', 'h', 'f', '.', 'b', 9, 0,
  /* 773 */ 'b', 'n', 'e', 'g', '.', 'b', 9, 0,
  /* 781 */ 's', 'r', 'a', 'i', '.', 'b', 9, 0,
  /* 789 */ 's', 'l', 'd', 'i', '.', 'b', 9, 0,
  /* 797 */ 'a', 'n', 'd', 'i', '.', 'b', 9, 0,
  /* 805 */ 'b', 'n', 'e', 'g', 'i', '.', 'b', 9, 0,
  /* 814 */ 'b', 's', 'e', 'l', 'i', '.', 'b', 9, 0,
  /* 823 */ 's', 'l', 'l', 'i', '.', 'b', 9, 0,
  /* 831 */ 's', 'r', 'l', 'i', '.', 'b', 9, 0,
  /* 839 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'b', 9, 0,
  /* 849 */ 'c', 'e', 'q', 'i', '.', 'b', 9, 0,
  /* 857 */ 's', 'r', 'a', 'r', 'i', '.', 'b', 9, 0,
  /* 866 */ 'b', 'c', 'l', 'r', 'i', '.', 'b', 9, 0,
  /* 875 */ 's', 'r', 'l', 'r', 'i', '.', 'b', 9, 0,
  /* 884 */ 'n', 'o', 'r', 'i', '.', 'b', 9, 0,
  /* 892 */ 'x', 'o', 'r', 'i', '.', 'b', 9, 0,
  /* 900 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'b', 9, 0,
  /* 910 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'b', 9, 0,
  /* 920 */ 'b', 's', 'e', 't', 'i', '.', 'b', 9, 0,
  /* 929 */ 's', 'u', 'b', 'v', 'i', '.', 'b', 9, 0,
  /* 938 */ 'a', 'd', 'd', 'v', 'i', '.', 'b', 9, 0,
  /* 947 */ 'b', 'm', 'z', 'i', '.', 'b', 9, 0,
  /* 955 */ 'b', 'm', 'n', 'z', 'i', '.', 'b', 9, 0,
  /* 964 */ 'f', 'i', 'l', 'l', '.', 'b', 9, 0,
  /* 972 */ 's', 'l', 'l', '.', 'b', 9, 0,
  /* 979 */ 's', 'r', 'l', '.', 'b', 9, 0,
  /* 986 */ 'b', 'i', 'n', 's', 'l', '.', 'b', 9, 0,
  /* 995 */ 'i', 'l', 'v', 'l', '.', 'b', 9, 0,
  /* 1003 */ 'c', 'e', 'q', '.', 'b', 9, 0,
  /* 1010 */ 's', 'r', 'a', 'r', '.', 'b', 9, 0,
  /* 1018 */ 'b', 'c', 'l', 'r', '.', 'b', 9, 0,
  /* 1026 */ 's', 'r', 'l', 'r', '.', 'b', 9, 0,
  /* 1034 */ 'b', 'i', 'n', 's', 'r', '.', 'b', 9, 0,
  /* 1043 */ 'i', 'l', 'v', 'r', '.', 'b', 9, 0,
  /* 1051 */ 'a', 's', 'u', 'b', '_', 's', '.', 'b', 9, 0,
  /* 1061 */ 'm', 'o', 'd', '_', 's', '.', 'b', 9, 0,
  /* 1070 */ 'c', 'l', 'e', '_', 's', '.', 'b', 9, 0,
  /* 1079 */ 'a', 'v', 'e', '_', 's', '.', 'b', 9, 0,
  /* 1088 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1098 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1108 */ 'c', 'l', 't', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1118 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1128 */ 'm', 'i', 'n', '_', 's', '.', 'b', 9, 0,
  /* 1137 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'b', 9, 0,
  /* 1147 */ 's', 'u', 'b', 's', '_', 's', '.', 'b', 9, 0,
  /* 1157 */ 'a', 'd', 'd', 's', '_', 's', '.', 'b', 9, 0,
  /* 1167 */ 's', 'a', 't', '_', 's', '.', 'b', 9, 0,
  /* 1176 */ 'c', 'l', 't', '_', 's', '.', 'b', 9, 0,
  /* 1185 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'b', 9, 0,
  /* 1197 */ 'd', 'i', 'v', '_', 's', '.', 'b', 9, 0,
  /* 1206 */ 'm', 'a', 'x', '_', 's', '.', 'b', 9, 0,
  /* 1215 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'b', 9, 0,
  /* 1225 */ 's', 'p', 'l', 'a', 't', '.', 'b', 9, 0,
  /* 1234 */ 'b', 's', 'e', 't', '.', 'b', 9, 0,
  /* 1242 */ 'p', 'c', 'n', 't', '.', 'b', 9, 0,
  /* 1250 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'b', 9, 0,
  /* 1260 */ 's', 't', '.', 'b', 9, 0,
  /* 1266 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'b', 9, 0,
  /* 1276 */ 'm', 'o', 'd', '_', 'u', '.', 'b', 9, 0,
  /* 1285 */ 'c', 'l', 'e', '_', 'u', '.', 'b', 9, 0,
  /* 1294 */ 'a', 'v', 'e', '_', 'u', '.', 'b', 9, 0,
  /* 1303 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1313 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1323 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1333 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1343 */ 'm', 'i', 'n', '_', 'u', '.', 'b', 9, 0,
  /* 1352 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'b', 9, 0,
  /* 1362 */ 's', 'u', 'b', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1372 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1382 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1394 */ 's', 'a', 't', '_', 'u', '.', 'b', 9, 0,
  /* 1403 */ 'c', 'l', 't', '_', 'u', '.', 'b', 9, 0,
  /* 1412 */ 'd', 'i', 'v', '_', 'u', '.', 'b', 9, 0,
  /* 1421 */ 'm', 'a', 'x', '_', 'u', '.', 'b', 9, 0,
  /* 1430 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'b', 9, 0,
  /* 1440 */ 'm', 's', 'u', 'b', 'v', '.', 'b', 9, 0,
  /* 1449 */ 'm', 'a', 'd', 'd', 'v', '.', 'b', 9, 0,
  /* 1458 */ 'p', 'c', 'k', 'e', 'v', '.', 'b', 9, 0,
  /* 1467 */ 'i', 'l', 'v', 'e', 'v', '.', 'b', 9, 0,
  /* 1476 */ 'm', 'u', 'l', 'v', '.', 'b', 9, 0,
  /* 1484 */ 'b', 'z', '.', 'b', 9, 0,
  /* 1490 */ 'b', 'n', 'z', '.', 'b', 9, 0,
  /* 1497 */ 's', 'e', 'b', 9, 0,
  /* 1502 */ 'j', 'a', 'l', 'r', 'c', '.', 'h', 'b', 9, 0,
  /* 1512 */ 'j', 'r', '.', 'h', 'b', 9, 0,
  /* 1519 */ 'j', 'a', 'l', 'r', '.', 'h', 'b', 9, 0,
  /* 1528 */ 'l', 'b', 9, 0,
  /* 1532 */ 's', 'h', 'r', 'a', '.', 'q', 'b', 9, 0,
  /* 1541 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1555 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1568 */ 'c', 'm', 'p', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1580 */ 's', 'u', 'b', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 1590 */ 'a', 'd', 'd', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 1600 */ 'p', 'i', 'c', 'k', '.', 'q', 'b', 9, 0,
  /* 1609 */ 's', 'h', 'l', 'l', '.', 'q', 'b', 9, 0,
  /* 1618 */ 'r', 'e', 'p', 'l', '.', 'q', 'b', 9, 0,
  /* 1627 */ 's', 'h', 'r', 'l', '.', 'q', 'b', 9, 0,
  /* 1636 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1650 */ 'c', 'm', 'p', 'g', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1663 */ 'c', 'm', 'p', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1675 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1686 */ 's', 'u', 'b', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1698 */ 'a', 'd', 'd', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1710 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1722 */ 'a', 'b', 's', 'q', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1733 */ 's', 'u', 'b', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1744 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1755 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1769 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1782 */ 'c', 'm', 'p', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1794 */ 's', 'u', 'b', 'u', '.', 'q', 'b', 9, 0,
  /* 1803 */ 'a', 'd', 'd', 'u', '.', 'q', 'b', 9, 0,
  /* 1812 */ 's', 'h', 'r', 'a', 'v', '.', 'q', 'b', 9, 0,
  /* 1822 */ 's', 'h', 'l', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1832 */ 'r', 'e', 'p', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1842 */ 's', 'h', 'r', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1852 */ 'r', 'a', 'd', 'd', 'u', '.', 'w', '.', 'q', 'b', 9, 0,
  /* 1864 */ 's', 'b', 9, 0,
  /* 1868 */ 'm', 'o', 'd', 's', 'u', 'b', 9, 0,
  /* 1876 */ 'm', 's', 'u', 'b', 9, 0,
  /* 1882 */ 'b', 'p', 'o', 's', 'g', 'e', '3', '2', 'c', 9, 0,
  /* 1893 */ 'b', 'c', 9, 0,
  /* 1897 */ 'b', 'g', 'e', 'c', 9, 0,
  /* 1903 */ 'b', 'n', 'e', 'c', 9, 0,
  /* 1909 */ 'j', 'i', 'c', 9, 0,
  /* 1914 */ 'b', 'a', 'l', 'c', 9, 0,
  /* 1920 */ 'j', 'i', 'a', 'l', 'c', 9, 0,
  /* 1927 */ 'b', 'g', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1936 */ 'b', 'l', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1945 */ 'b', 'n', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1954 */ 'b', 'e', 'q', 'z', 'a', 'l', 'c', 9, 0,
  /* 1963 */ 'b', 'g', 't', 'z', 'a', 'l', 'c', 9, 0,
  /* 1972 */ 'b', 'l', 't', 'z', 'a', 'l', 'c', 9, 0,
  /* 1981 */ 's', 'y', 'n', 'c', 9, 0,
  /* 1987 */ 'l', 'd', 'p', 'c', 9, 0,
  /* 1993 */ 'a', 'u', 'i', 'p', 'c', 9, 0,
  /* 2000 */ 'a', 'l', 'u', 'i', 'p', 'c', 9, 0,
  /* 2008 */ 'a', 'd', 'd', 'i', 'u', 'p', 'c', 9, 0,
  /* 2017 */ 'l', 'w', 'u', 'p', 'c', 9, 0,
  /* 2024 */ 'l', 'w', 'p', 'c', 9, 0,
  /* 2030 */ 'b', 'e', 'q', 'c', 9, 0,
  /* 2036 */ 'j', 'r', 'c', 9, 0,
  /* 2041 */ 'j', 'a', 'l', 'r', 'c', 9, 0,
  /* 2048 */ 'a', 'd', 'd', 's', 'c', 9, 0,
  /* 2055 */ 'b', 'l', 't', 'c', 9, 0,
  /* 2061 */ 'b', 'g', 'e', 'u', 'c', 9, 0,
  /* 2068 */ 'b', 'l', 't', 'u', 'c', 9, 0,
  /* 2075 */ 'b', 'n', 'v', 'c', 9, 0,
  /* 2081 */ 'b', 'o', 'v', 'c', 9, 0,
  /* 2087 */ 'a', 'd', 'd', 'w', 'c', 9, 0,
  /* 2094 */ 'b', 'g', 'e', 'z', 'c', 9, 0,
  /* 2101 */ 'b', 'l', 'e', 'z', 'c', 9, 0,
  /* 2108 */ 'b', 'c', '1', 'n', 'e', 'z', 'c', 9, 0,
  /* 2117 */ 'b', 'c', '2', 'n', 'e', 'z', 'c', 9, 0,
  /* 2126 */ 'b', 'n', 'e', 'z', 'c', 9, 0,
  /* 2133 */ 'b', 'c', '1', 'e', 'q', 'z', 'c', 9, 0,
  /* 2142 */ 'b', 'c', '2', 'e', 'q', 'z', 'c', 9, 0,
  /* 2151 */ 'b', 'e', 'q', 'z', 'c', 9, 0,
  /* 2158 */ 'b', 'g', 't', 'z', 'c', 9, 0,
  /* 2165 */ 'b', 'l', 't', 'z', 'c', 9, 0,
  /* 2172 */ 'f', 'l', 'o', 'g', '2', '.', 'd', 9, 0,
  /* 2181 */ 'f', 'e', 'x', 'p', '2', '.', 'd', 9, 0,
  /* 2190 */ 'a', 'd', 'd', '_', 'a', '.', 'd', 9, 0,
  /* 2199 */ 'f', 'm', 'i', 'n', '_', 'a', '.', 'd', 9, 0,
  /* 2209 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'd', 9, 0,
  /* 2219 */ 'f', 'm', 'a', 'x', '_', 'a', '.', 'd', 9, 0,
  /* 2229 */ 'm', 'i', 'n', 'a', '.', 'd', 9, 0,
  /* 2237 */ 's', 'r', 'a', '.', 'd', 9, 0,
  /* 2244 */ 'm', 'a', 'x', 'a', '.', 'd', 9, 0,
  /* 2252 */ 'f', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2260 */ 'f', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2269 */ 'n', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2278 */ 'n', 'l', 'o', 'c', '.', 'd', 9, 0,
  /* 2286 */ 'n', 'l', 'z', 'c', '.', 'd', 9, 0,
  /* 2294 */ 'f', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2302 */ 'f', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2311 */ 'n', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2320 */ 's', 'l', 'd', '.', 'd', 9, 0,
  /* 2327 */ 'p', 'c', 'k', 'o', 'd', '.', 'd', 9, 0,
  /* 2336 */ 'i', 'l', 'v', 'o', 'd', '.', 'd', 9, 0,
  /* 2345 */ 'c', '.', 'n', 'g', 'e', '.', 'd', 9, 0,
  /* 2354 */ 'c', '.', 'l', 'e', '.', 'd', 9, 0,
  /* 2362 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'd', 9, 0,
  /* 2372 */ 'f', 'c', 'l', 'e', '.', 'd', 9, 0,
  /* 2380 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 'd', 9, 0,
  /* 2390 */ 'c', '.', 'o', 'l', 'e', '.', 'd', 9, 0,
  /* 2399 */ 'c', 'm', 'p', '.', 's', 'l', 'e', '.', 'd', 9, 0,
  /* 2410 */ 'f', 's', 'l', 'e', '.', 'd', 9, 0,
  /* 2418 */ 'c', '.', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2427 */ 'c', 'm', 'p', '.', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2438 */ 'f', 'c', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2447 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2459 */ 'f', 's', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2468 */ 'f', 'c', 'n', 'e', '.', 'd', 9, 0,
  /* 2476 */ 'f', 's', 'n', 'e', '.', 'd', 9, 0,
  /* 2484 */ 'f', 'c', 'u', 'n', 'e', '.', 'd', 9, 0,
  /* 2493 */ 'f', 's', 'u', 'n', 'e', '.', 'd', 9, 0,
  /* 2502 */ 'i', 'n', 's', 'v', 'e', '.', 'd', 9, 0,
  /* 2511 */ 'c', '.', 'f', '.', 'd', 9, 0,
  /* 2518 */ 'c', 'm', 'p', '.', 'a', 'f', '.', 'd', 9, 0,
  /* 2528 */ 'f', 'c', 'a', 'f', '.', 'd', 9, 0,
  /* 2536 */ 'c', 'm', 'p', '.', 's', 'a', 'f', '.', 'd', 9, 0,
  /* 2547 */ 'f', 's', 'a', 'f', '.', 'd', 9, 0,
  /* 2555 */ 'm', 's', 'u', 'b', 'f', '.', 'd', 9, 0,
  /* 2564 */ 'm', 'a', 'd', 'd', 'f', '.', 'd', 9, 0,
  /* 2573 */ 'v', 's', 'h', 'f', '.', 'd', 9, 0,
  /* 2581 */ 'c', '.', 's', 'f', '.', 'd', 9, 0,
  /* 2589 */ 'm', 'o', 'v', 'f', '.', 'd', 9, 0,
  /* 2597 */ 'b', 'n', 'e', 'g', '.', 'd', 9, 0,
  /* 2605 */ 's', 'r', 'a', 'i', '.', 'd', 9, 0,
  /* 2613 */ 's', 'l', 'd', 'i', '.', 'd', 9, 0,
  /* 2621 */ 'b', 'n', 'e', 'g', 'i', '.', 'd', 9, 0,
  /* 2630 */ 's', 'l', 'l', 'i', '.', 'd', 9, 0,
  /* 2638 */ 's', 'r', 'l', 'i', '.', 'd', 9, 0,
  /* 2646 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'd', 9, 0,
  /* 2656 */ 'c', 'e', 'q', 'i', '.', 'd', 9, 0,
  /* 2664 */ 's', 'r', 'a', 'r', 'i', '.', 'd', 9, 0,
  /* 2673 */ 'b', 'c', 'l', 'r', 'i', '.', 'd', 9, 0,
  /* 2682 */ 's', 'r', 'l', 'r', 'i', '.', 'd', 9, 0,
  /* 2691 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'd', 9, 0,
  /* 2701 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'd', 9, 0,
  /* 2711 */ 'b', 's', 'e', 't', 'i', '.', 'd', 9, 0,
  /* 2720 */ 's', 'u', 'b', 'v', 'i', '.', 'd', 9, 0,
  /* 2729 */ 'a', 'd', 'd', 'v', 'i', '.', 'd', 9, 0,
  /* 2738 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 'd', 9, 0,
  /* 2749 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 'd', 9, 0,
  /* 2760 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 'd', 9, 0,
  /* 2770 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 'd', 9, 0,
  /* 2781 */ 'c', 'v', 't', '.', 'l', '.', 'd', 9, 0,
  /* 2790 */ 's', 'e', 'l', '.', 'd', 9, 0,
  /* 2797 */ 'c', '.', 'n', 'g', 'l', '.', 'd', 9, 0,
  /* 2806 */ 'f', 'i', 'l', 'l', '.', 'd', 9, 0,
  /* 2814 */ 's', 'l', 'l', '.', 'd', 9, 0,
  /* 2821 */ 'f', 'e', 'x', 'u', 'p', 'l', '.', 'd', 9, 0,
  /* 2831 */ 'f', 'f', 'q', 'l', '.', 'd', 9, 0,
  /* 2839 */ 's', 'r', 'l', '.', 'd', 9, 0,
  /* 2846 */ 'b', 'i', 'n', 's', 'l', '.', 'd', 9, 0,
  /* 2855 */ 'f', 'm', 'u', 'l', '.', 'd', 9, 0,
  /* 2863 */ 'i', 'l', 'v', 'l', '.', 'd', 9, 0,
  /* 2871 */ 'f', 'm', 'i', 'n', '.', 'd', 9, 0,
  /* 2879 */ 'c', '.', 'u', 'n', '.', 'd', 9, 0,
  /* 2887 */ 'c', 'm', 'p', '.', 'u', 'n', '.', 'd', 9, 0,
  /* 2897 */ 'f', 'c', 'u', 'n', '.', 'd', 9, 0,
  /* 2905 */ 'c', 'm', 'p', '.', 's', 'u', 'n', '.', 'd', 9, 0,
  /* 2916 */ 'f', 's', 'u', 'n', '.', 'd', 9, 0,
  /* 2924 */ 'm', 'o', 'v', 'n', '.', 'd', 9, 0,
  /* 2932 */ 'f', 'r', 'c', 'p', '.', 'd', 9, 0,
  /* 2940 */ 'r', 'e', 'c', 'i', 'p', '.', 'd', 9, 0,
  /* 2949 */ 'c', '.', 'e', 'q', '.', 'd', 9, 0,
  /* 2957 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'd', 9, 0,
  /* 2967 */ 'f', 'c', 'e', 'q', '.', 'd', 9, 0,
  /* 2975 */ 'c', '.', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 2984 */ 'c', 'm', 'p', '.', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 2995 */ 'f', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 3003 */ 'c', '.', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3012 */ 'c', 'm', 'p', '.', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3023 */ 'f', 'c', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3032 */ 'c', 'm', 'p', '.', 's', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3044 */ 'f', 's', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3053 */ 's', 'r', 'a', 'r', '.', 'd', 9, 0,
  /* 3061 */ 'b', 'c', 'l', 'r', '.', 'd', 9, 0,
  /* 3069 */ 's', 'r', 'l', 'r', '.', 'd', 9, 0,
  /* 3077 */ 'f', 'c', 'o', 'r', '.', 'd', 9, 0,
  /* 3085 */ 'f', 's', 'o', 'r', '.', 'd', 9, 0,
  /* 3093 */ 'f', 'e', 'x', 'u', 'p', 'r', '.', 'd', 9, 0,
  /* 3103 */ 'f', 'f', 'q', 'r', '.', 'd', 9, 0,
  /* 3111 */ 'b', 'i', 'n', 's', 'r', '.', 'd', 9, 0,
  /* 3120 */ 'i', 'l', 'v', 'r', '.', 'd', 9, 0,
  /* 3128 */ 'c', 'v', 't', '.', 's', '.', 'd', 9, 0,
  /* 3137 */ 'a', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 3147 */ 'h', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 3157 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 3168 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 's', '.', 'd', 9, 0,
  /* 3180 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3190 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3201 */ 'm', 'o', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3210 */ 'c', 'l', 'e', '_', 's', '.', 'd', 9, 0,
  /* 3219 */ 'a', 'v', 'e', '_', 's', '.', 'd', 9, 0,
  /* 3228 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3238 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3248 */ 'c', 'l', 't', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3258 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3268 */ 'm', 'i', 'n', '_', 's', '.', 'd', 9, 0,
  /* 3277 */ 'd', 'o', 't', 'p', '_', 's', '.', 'd', 9, 0,
  /* 3287 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'd', 9, 0,
  /* 3297 */ 's', 'u', 'b', 's', '_', 's', '.', 'd', 9, 0,
  /* 3307 */ 'a', 'd', 'd', 's', '_', 's', '.', 'd', 9, 0,
  /* 3317 */ 's', 'a', 't', '_', 's', '.', 'd', 9, 0,
  /* 3326 */ 'c', 'l', 't', '_', 's', '.', 'd', 9, 0,
  /* 3335 */ 'f', 'f', 'i', 'n', 't', '_', 's', '.', 'd', 9, 0,
  /* 3346 */ 'f', 't', 'i', 'n', 't', '_', 's', '.', 'd', 9, 0,
  /* 3357 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'd', 9, 0,
  /* 3369 */ 'd', 'i', 'v', '_', 's', '.', 'd', 9, 0,
  /* 3378 */ 'm', 'a', 'x', '_', 's', '.', 'd', 9, 0,
  /* 3387 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'd', 9, 0,
  /* 3397 */ 'a', 'b', 's', '.', 'd', 9, 0,
  /* 3404 */ 'f', 'c', 'l', 'a', 's', 's', '.', 'd', 9, 0,
  /* 3414 */ 's', 'p', 'l', 'a', 't', '.', 'd', 9, 0,
  /* 3423 */ 'b', 's', 'e', 't', '.', 'd', 9, 0,
  /* 3431 */ 'c', '.', 'n', 'g', 't', '.', 'd', 9, 0,
  /* 3440 */ 'c', '.', 'l', 't', '.', 'd', 9, 0,
  /* 3448 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'd', 9, 0,
  /* 3458 */ 'f', 'c', 'l', 't', '.', 'd', 9, 0,
  /* 3466 */ 'c', '.', 'o', 'l', 't', '.', 'd', 9, 0,
  /* 3475 */ 'c', 'm', 'p', '.', 's', 'l', 't', '.', 'd', 9, 0,
  /* 3486 */ 'f', 's', 'l', 't', '.', 'd', 9, 0,
  /* 3494 */ 'c', '.', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3503 */ 'c', 'm', 'p', '.', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3514 */ 'f', 'c', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3523 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3535 */ 'f', 's', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3544 */ 'p', 'c', 'n', 't', '.', 'd', 9, 0,
  /* 3552 */ 'f', 'r', 'i', 'n', 't', '.', 'd', 9, 0,
  /* 3561 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'd', 9, 0,
  /* 3571 */ 'f', 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 3580 */ 'f', 'r', 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 3590 */ 's', 't', '.', 'd', 9, 0,
  /* 3596 */ 'm', 'o', 'v', 't', '.', 'd', 9, 0,
  /* 3604 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3614 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3624 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3635 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 'u', '.', 'd', 9, 0,
  /* 3647 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3657 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3668 */ 'm', 'o', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3677 */ 'c', 'l', 'e', '_', 'u', '.', 'd', 9, 0,
  /* 3686 */ 'a', 'v', 'e', '_', 'u', '.', 'd', 9, 0,
  /* 3695 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3705 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3715 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3725 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3735 */ 'm', 'i', 'n', '_', 'u', '.', 'd', 9, 0,
  /* 3744 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'd', 9, 0,
  /* 3754 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'd', 9, 0,
  /* 3764 */ 's', 'u', 'b', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3774 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3784 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3796 */ 's', 'a', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3805 */ 'c', 'l', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3814 */ 'f', 'f', 'i', 'n', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3825 */ 'f', 't', 'i', 'n', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3836 */ 'd', 'i', 'v', '_', 'u', '.', 'd', 9, 0,
  /* 3845 */ 'm', 'a', 'x', '_', 'u', '.', 'd', 9, 0,
  /* 3854 */ 'm', 's', 'u', 'b', 'v', '.', 'd', 9, 0,
  /* 3863 */ 'm', 'a', 'd', 'd', 'v', '.', 'd', 9, 0,
  /* 3872 */ 'p', 'c', 'k', 'e', 'v', '.', 'd', 9, 0,
  /* 3881 */ 'i', 'l', 'v', 'e', 'v', '.', 'd', 9, 0,
  /* 3890 */ 'f', 'd', 'i', 'v', '.', 'd', 9, 0,
  /* 3898 */ 'm', 'u', 'l', 'v', '.', 'd', 9, 0,
  /* 3906 */ 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 3913 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 'd', 9, 0,
  /* 3924 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 'd', 9, 0,
  /* 3935 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 'd', 9, 0,
  /* 3945 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 'd', 9, 0,
  /* 3956 */ 'c', 'v', 't', '.', 'w', '.', 'd', 9, 0,
  /* 3965 */ 'f', 'm', 'a', 'x', '.', 'd', 9, 0,
  /* 3973 */ 'b', 'z', '.', 'd', 9, 0,
  /* 3979 */ 's', 'e', 'l', 'n', 'e', 'z', '.', 'd', 9, 0,
  /* 3989 */ 'b', 'n', 'z', '.', 'd', 9, 0,
  /* 3996 */ 's', 'e', 'l', 'e', 'q', 'z', '.', 'd', 9, 0,
  /* 4006 */ 'm', 'o', 'v', 'z', '.', 'd', 9, 0,
  /* 4014 */ 's', 'c', 'd', 9, 0,
  /* 4019 */ 'd', 'a', 'd', 'd', 9, 0,
  /* 4025 */ 'm', 'a', 'd', 'd', 9, 0,
  /* 4031 */ 'd', 's', 'h', 'd', 9, 0,
  /* 4037 */ 'l', 'l', 'd', 9, 0,
  /* 4042 */ 'a', 'n', 'd', 9, 0,
  /* 4047 */ 'p', 'r', 'e', 'p', 'e', 'n', 'd', 9, 0,
  /* 4056 */ 'a', 'p', 'p', 'e', 'n', 'd', 9, 0,
  /* 4064 */ 'd', 'm', 'o', 'd', 9, 0,
  /* 4070 */ 's', 'd', 9, 0,
  /* 4074 */ 'l', 'b', 'e', 9, 0,
  /* 4079 */ 's', 'b', 'e', 9, 0,
  /* 4084 */ 's', 'c', 'e', 9, 0,
  /* 4089 */ 'c', 'a', 'c', 'h', 'e', 'e', 9, 0,
  /* 4097 */ 'p', 'r', 'e', 'f', 'e', 9, 0,
  /* 4104 */ 'b', 'g', 'e', 9, 0,
  /* 4109 */ 't', 'g', 'e', 9, 0,
  /* 4114 */ 'c', 'a', 'c', 'h', 'e', 9, 0,
  /* 4121 */ 'l', 'h', 'e', 9, 0,
  /* 4126 */ 's', 'h', 'e', 9, 0,
  /* 4131 */ 'b', 'l', 'e', 9, 0,
  /* 4136 */ 'l', 'l', 'e', 9, 0,
  /* 4141 */ 'l', 'w', 'l', 'e', 9, 0,
  /* 4147 */ 's', 'w', 'l', 'e', 9, 0,
  /* 4153 */ 'b', 'n', 'e', 9, 0,
  /* 4158 */ 's', 'n', 'e', 9, 0,
  /* 4163 */ 't', 'n', 'e', 9, 0,
  /* 4168 */ 'l', 'w', 'r', 'e', 9, 0,
  /* 4174 */ 's', 'w', 'r', 'e', 9, 0,
  /* 4180 */ 'l', 'b', 'u', 'e', 9, 0,
  /* 4186 */ 'l', 'h', 'u', 'e', 9, 0,
  /* 4192 */ 'm', 'o', 'v', 'e', 9, 0,
  /* 4198 */ 'l', 'w', 'e', 9, 0,
  /* 4203 */ 's', 'w', 'e', 9, 0,
  /* 4208 */ 'b', 'c', '1', 'f', 9, 0,
  /* 4214 */ 'p', 'r', 'e', 'f', 9, 0,
  /* 4220 */ 'm', 'o', 'v', 'f', 9, 0,
  /* 4226 */ 'n', 'e', 'g', 9, 0,
  /* 4231 */ 'a', 'd', 'd', '_', 'a', '.', 'h', 9, 0,
  /* 4240 */ 'm', 'i', 'n', '_', 'a', '.', 'h', 9, 0,
  /* 4249 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'h', 9, 0,
  /* 4259 */ 'm', 'a', 'x', '_', 'a', '.', 'h', 9, 0,
  /* 4268 */ 's', 'r', 'a', '.', 'h', 9, 0,
  /* 4275 */ 'n', 'l', 'o', 'c', '.', 'h', 9, 0,
  /* 4283 */ 'n', 'l', 'z', 'c', '.', 'h', 9, 0,
  /* 4291 */ 's', 'l', 'd', '.', 'h', 9, 0,
  /* 4298 */ 'p', 'c', 'k', 'o', 'd', '.', 'h', 9, 0,
  /* 4307 */ 'i', 'l', 'v', 'o', 'd', '.', 'h', 9, 0,
  /* 4316 */ 'i', 'n', 's', 'v', 'e', '.', 'h', 9, 0,
  /* 4325 */ 'v', 's', 'h', 'f', '.', 'h', 9, 0,
  /* 4333 */ 'b', 'n', 'e', 'g', '.', 'h', 9, 0,
  /* 4341 */ 's', 'r', 'a', 'i', '.', 'h', 9, 0,
  /* 4349 */ 's', 'l', 'd', 'i', '.', 'h', 9, 0,
  /* 4357 */ 'b', 'n', 'e', 'g', 'i', '.', 'h', 9, 0,
  /* 4366 */ 's', 'l', 'l', 'i', '.', 'h', 9, 0,
  /* 4374 */ 's', 'r', 'l', 'i', '.', 'h', 9, 0,
  /* 4382 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'h', 9, 0,
  /* 4392 */ 'c', 'e', 'q', 'i', '.', 'h', 9, 0,
  /* 4400 */ 's', 'r', 'a', 'r', 'i', '.', 'h', 9, 0,
  /* 4409 */ 'b', 'c', 'l', 'r', 'i', '.', 'h', 9, 0,
  /* 4418 */ 's', 'r', 'l', 'r', 'i', '.', 'h', 9, 0,
  /* 4427 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'h', 9, 0,
  /* 4437 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'h', 9, 0,
  /* 4447 */ 'b', 's', 'e', 't', 'i', '.', 'h', 9, 0,
  /* 4456 */ 's', 'u', 'b', 'v', 'i', '.', 'h', 9, 0,
  /* 4465 */ 'a', 'd', 'd', 'v', 'i', '.', 'h', 9, 0,
  /* 4474 */ 'f', 'i', 'l', 'l', '.', 'h', 9, 0,
  /* 4482 */ 's', 'l', 'l', '.', 'h', 9, 0,
  /* 4489 */ 's', 'r', 'l', '.', 'h', 9, 0,
  /* 4496 */ 'b', 'i', 'n', 's', 'l', '.', 'h', 9, 0,
  /* 4505 */ 'i', 'l', 'v', 'l', '.', 'h', 9, 0,
  /* 4513 */ 'f', 'e', 'x', 'd', 'o', '.', 'h', 9, 0,
  /* 4522 */ 'm', 's', 'u', 'b', '_', 'q', '.', 'h', 9, 0,
  /* 4532 */ 'm', 'a', 'd', 'd', '_', 'q', '.', 'h', 9, 0,
  /* 4542 */ 'm', 'u', 'l', '_', 'q', '.', 'h', 9, 0,
  /* 4551 */ 'm', 's', 'u', 'b', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4562 */ 'm', 'a', 'd', 'd', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4573 */ 'm', 'u', 'l', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4583 */ 'c', 'e', 'q', '.', 'h', 9, 0,
  /* 4590 */ 'f', 't', 'q', '.', 'h', 9, 0,
  /* 4597 */ 's', 'r', 'a', 'r', '.', 'h', 9, 0,
  /* 4605 */ 'b', 'c', 'l', 'r', '.', 'h', 9, 0,
  /* 4613 */ 's', 'r', 'l', 'r', '.', 'h', 9, 0,
  /* 4621 */ 'b', 'i', 'n', 's', 'r', '.', 'h', 9, 0,
  /* 4630 */ 'i', 'l', 'v', 'r', '.', 'h', 9, 0,
  /* 4638 */ 'a', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4648 */ 'h', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4658 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4669 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4679 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4690 */ 'm', 'o', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4699 */ 'c', 'l', 'e', '_', 's', '.', 'h', 9, 0,
  /* 4708 */ 'a', 'v', 'e', '_', 's', '.', 'h', 9, 0,
  /* 4717 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4727 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4737 */ 'c', 'l', 't', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4747 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4757 */ 'm', 'i', 'n', '_', 's', '.', 'h', 9, 0,
  /* 4766 */ 'd', 'o', 't', 'p', '_', 's', '.', 'h', 9, 0,
  /* 4776 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'h', 9, 0,
  /* 4786 */ 'e', 'x', 't', 'r', '_', 's', '.', 'h', 9, 0,
  /* 4796 */ 's', 'u', 'b', 's', '_', 's', '.', 'h', 9, 0,
  /* 4806 */ 'a', 'd', 'd', 's', '_', 's', '.', 'h', 9, 0,
  /* 4816 */ 's', 'a', 't', '_', 's', '.', 'h', 9, 0,
  /* 4825 */ 'c', 'l', 't', '_', 's', '.', 'h', 9, 0,
  /* 4834 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'h', 9, 0,
  /* 4846 */ 'd', 'i', 'v', '_', 's', '.', 'h', 9, 0,
  /* 4855 */ 'e', 'x', 't', 'r', 'v', '_', 's', '.', 'h', 9, 0,
  /* 4866 */ 'm', 'a', 'x', '_', 's', '.', 'h', 9, 0,
  /* 4875 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'h', 9, 0,
  /* 4885 */ 's', 'p', 'l', 'a', 't', '.', 'h', 9, 0,
  /* 4894 */ 'b', 's', 'e', 't', '.', 'h', 9, 0,
  /* 4902 */ 'p', 'c', 'n', 't', '.', 'h', 9, 0,
  /* 4910 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'h', 9, 0,
  /* 4920 */ 's', 't', '.', 'h', 9, 0,
  /* 4926 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4936 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4946 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4957 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 4967 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 4978 */ 'm', 'o', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 4987 */ 'c', 'l', 'e', '_', 'u', '.', 'h', 9, 0,
  /* 4996 */ 'a', 'v', 'e', '_', 'u', '.', 'h', 9, 0,
  /* 5005 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 5015 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 5025 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 5035 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 5045 */ 'm', 'i', 'n', '_', 'u', '.', 'h', 9, 0,
  /* 5054 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'h', 9, 0,
  /* 5064 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'h', 9, 0,
  /* 5074 */ 's', 'u', 'b', 's', '_', 'u', '.', 'h', 9, 0,
  /* 5084 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'h', 9, 0,
  /* 5094 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'h', 9, 0,
  /* 5106 */ 's', 'a', 't', '_', 'u', '.', 'h', 9, 0,
  /* 5115 */ 'c', 'l', 't', '_', 'u', '.', 'h', 9, 0,
  /* 5124 */ 'd', 'i', 'v', '_', 'u', '.', 'h', 9, 0,
  /* 5133 */ 'm', 'a', 'x', '_', 'u', '.', 'h', 9, 0,
  /* 5142 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'h', 9, 0,
  /* 5152 */ 'm', 's', 'u', 'b', 'v', '.', 'h', 9, 0,
  /* 5161 */ 'm', 'a', 'd', 'd', 'v', '.', 'h', 9, 0,
  /* 5170 */ 'p', 'c', 'k', 'e', 'v', '.', 'h', 9, 0,
  /* 5179 */ 'i', 'l', 'v', 'e', 'v', '.', 'h', 9, 0,
  /* 5188 */ 'm', 'u', 'l', 'v', '.', 'h', 9, 0,
  /* 5196 */ 'b', 'z', '.', 'h', 9, 0,
  /* 5202 */ 'b', 'n', 'z', '.', 'h', 9, 0,
  /* 5209 */ 'd', 's', 'b', 'h', 9, 0,
  /* 5215 */ 'w', 's', 'b', 'h', 9, 0,
  /* 5221 */ 's', 'e', 'h', 9, 0,
  /* 5226 */ 'u', 'l', 'h', 9, 0,
  /* 5231 */ 's', 'h', 'r', 'a', '.', 'p', 'h', 9, 0,
  /* 5240 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5254 */ 'p', 'r', 'e', 'c', 'r', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5267 */ 'p', 'r', 'e', 'c', 'r', 'q', 'u', '_', 's', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5284 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'p', 'h', 9, 0,
  /* 5295 */ 's', 'u', 'b', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 5305 */ 'a', 'd', 'd', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 5315 */ 'p', 'i', 'c', 'k', '.', 'p', 'h', 9, 0,
  /* 5324 */ 's', 'h', 'l', 'l', '.', 'p', 'h', 9, 0,
  /* 5333 */ 'r', 'e', 'p', 'l', '.', 'p', 'h', 9, 0,
  /* 5342 */ 's', 'h', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 5351 */ 'p', 'a', 'c', 'k', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 5362 */ 'm', 'u', 'l', '.', 'p', 'h', 9, 0,
  /* 5370 */ 's', 'u', 'b', 'q', '.', 'p', 'h', 9, 0,
  /* 5379 */ 'a', 'd', 'd', 'q', '.', 'p', 'h', 9, 0,
  /* 5388 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'p', 'h', 9, 0,
  /* 5399 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5410 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5422 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5434 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5446 */ 's', 'h', 'l', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5457 */ 'm', 'u', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5467 */ 's', 'u', 'b', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5478 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5489 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5500 */ 'a', 'b', 's', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5511 */ 's', 'u', 'b', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5522 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5533 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5545 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'p', 'h', 9, 0,
  /* 5557 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'p', 'h', 9, 0,
  /* 5568 */ 's', 'u', 'b', 'u', '.', 'p', 'h', 9, 0,
  /* 5577 */ 'a', 'd', 'd', 'u', '.', 'p', 'h', 9, 0,
  /* 5586 */ 's', 'h', 'r', 'a', 'v', '.', 'p', 'h', 9, 0,
  /* 5596 */ 's', 'h', 'l', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5606 */ 'r', 'e', 'p', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5616 */ 's', 'h', 'r', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5626 */ 'd', 'p', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5636 */ 'd', 'p', 'a', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5651 */ 'd', 'p', 's', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5666 */ 'm', 'u', 'l', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5678 */ 'd', 'p', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5691 */ 'm', 'u', 'l', 's', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5706 */ 'd', 'p', 's', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5719 */ 'd', 'p', 'a', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5733 */ 'd', 'p', 's', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5747 */ 'd', 'p', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5757 */ 'd', 'p', 'a', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5768 */ 'd', 'p', 's', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5779 */ 's', 'h', 9, 0,
  /* 5783 */ 'd', 'm', 'u', 'h', 9, 0,
  /* 5789 */ 's', 'y', 'n', 'c', 'i', 9, 0,
  /* 5796 */ 'd', 'a', 'd', 'd', 'i', 9, 0,
  /* 5803 */ 'a', 'n', 'd', 'i', 9, 0,
  /* 5809 */ 't', 'g', 'e', 'i', 9, 0,
  /* 5815 */ 's', 'n', 'e', 'i', 9, 0,
  /* 5821 */ 't', 'n', 'e', 'i', 9, 0,
  /* 5827 */ 'd', 'a', 'h', 'i', 9, 0,
  /* 5833 */ 'm', 'f', 'h', 'i', 9, 0,
  /* 5839 */ 'm', 't', 'h', 'i', 9, 0,
  /* 5845 */ '.', 'a', 'l', 'i', 'g', 'n', 32, '2', 10, 9, 'l', 'i', 9, 0,
  /* 5859 */ 'd', 'l', 'i', 9, 0,
  /* 5864 */ 'c', 'm', 'p', 'i', 9, 0,
  /* 5870 */ 's', 'e', 'q', 'i', 9, 0,
  /* 5876 */ 't', 'e', 'q', 'i', 9, 0,
  /* 5882 */ 'x', 'o', 'r', 'i', 9, 0,
  /* 5888 */ 'd', 'a', 't', 'i', 9, 0,
  /* 5894 */ 's', 'l', 't', 'i', 9, 0,
  /* 5900 */ 't', 'l', 't', 'i', 9, 0,
  /* 5906 */ 'd', 'a', 'u', 'i', 9, 0,
  /* 5912 */ 'l', 'u', 'i', 9, 0,
  /* 5917 */ 'j', 9, 0,
  /* 5920 */ 'b', 'r', 'e', 'a', 'k', 9, 0,
  /* 5927 */ 'c', 'v', 't', '.', 'd', '.', 'l', 9, 0,
  /* 5936 */ 'c', 'v', 't', '.', 's', '.', 'l', 9, 0,
  /* 5945 */ 'b', 'a', 'l', 9, 0,
  /* 5950 */ 'j', 'a', 'l', 9, 0,
  /* 5955 */ 'b', 'g', 'e', 'z', 'a', 'l', 9, 0,
  /* 5963 */ 'b', 'l', 't', 'z', 'a', 'l', 9, 0,
  /* 5971 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5983 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5995 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 6011 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 6026 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 6042 */ 'l', 'd', 'l', 9, 0,
  /* 6047 */ 's', 'd', 'l', 9, 0,
  /* 6052 */ 'b', 'g', 'e', 'l', 9, 0,
  /* 6058 */ 'b', 'l', 'e', 'l', 9, 0,
  /* 6064 */ 'b', 'n', 'e', 'l', 9, 0,
  /* 6070 */ 'b', 'c', '1', 'f', 'l', 9, 0,
  /* 6077 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 6091 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 6105 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 6118 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 6133 */ 's', 'y', 's', 'c', 'a', 'l', 'l', 9, 0,
  /* 6142 */ 'b', 'g', 'e', 'z', 'a', 'l', 'l', 9, 0,
  /* 6151 */ 'b', 'l', 't', 'z', 'a', 'l', 'l', 9, 0,
  /* 6160 */ 'd', 's', 'l', 'l', 9, 0,
  /* 6166 */ 'd', 'r', 'o', 'l', 9, 0,
  /* 6172 */ 'b', 'e', 'q', 'l', 9, 0,
  /* 6178 */ 'd', 's', 'r', 'l', 9, 0,
  /* 6184 */ 'b', 'c', '1', 't', 'l', 9, 0,
  /* 6191 */ 'b', 'g', 't', 'l', 9, 0,
  /* 6197 */ 'b', 'l', 't', 'l', 9, 0,
  /* 6203 */ 'b', 'g', 'e', 'u', 'l', 9, 0,
  /* 6210 */ 'b', 'l', 'e', 'u', 'l', 9, 0,
  /* 6217 */ 'd', 'm', 'u', 'l', 9, 0,
  /* 6223 */ 'b', 'g', 't', 'u', 'l', 9, 0,
  /* 6230 */ 'b', 'l', 't', 'u', 'l', 9, 0,
  /* 6237 */ 'l', 'w', 'l', 9, 0,
  /* 6242 */ 's', 'w', 'l', 9, 0,
  /* 6247 */ 'b', 'g', 'e', 'z', 'l', 9, 0,
  /* 6254 */ 'b', 'l', 'e', 'z', 'l', 9, 0,
  /* 6261 */ 'b', 'g', 't', 'z', 'l', 9, 0,
  /* 6268 */ 'b', 'l', 't', 'z', 'l', 9, 0,
  /* 6275 */ 'd', 'e', 'x', 't', 'm', 9, 0,
  /* 6282 */ 'l', 'w', 'm', 9, 0,
  /* 6287 */ 's', 'w', 'm', 9, 0,
  /* 6292 */ 'b', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 6300 */ 'd', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 6308 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 6314 */ 'd', 'c', 'l', 'o', 9, 0,
  /* 6320 */ 'm', 'f', 'l', 'o', 9, 0,
  /* 6326 */ 's', 'h', 'i', 'l', 'o', 9, 0,
  /* 6333 */ 'm', 't', 'l', 'o', 9, 0,
  /* 6339 */ 'd', 'b', 'i', 't', 's', 'w', 'a', 'p', 9, 0,
  /* 6349 */ 's', 'd', 'b', 'b', 'p', 9, 0,
  /* 6356 */ 'e', 'x', 't', 'p', 'd', 'p', 9, 0,
  /* 6364 */ 'm', 'o', 'v', 'e', 'p', 9, 0,
  /* 6371 */ 'm', 't', 'h', 'l', 'i', 'p', 9, 0,
  /* 6379 */ 'c', 'm', 'p', 9, 0,
  /* 6384 */ 'd', 'p', 'o', 'p', 9, 0,
  /* 6390 */ 'a', 'd', 'd', 'i', 'u', 'r', '1', 's', 'p', 9, 0,
  /* 6401 */ 'l', 'o', 'a', 'd', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 6417 */ 's', 't', 'o', 'r', 'e', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 6434 */ 'r', 'd', 'd', 's', 'p', 9, 0,
  /* 6441 */ 'w', 'r', 'd', 's', 'p', 9, 0,
  /* 6448 */ 'j', 'r', 'c', 'a', 'd', 'd', 'i', 'u', 's', 'p', 9, 0,
  /* 6460 */ 'j', 'r', 'a', 'd', 'd', 'i', 'u', 's', 'p', 9, 0,
  /* 6471 */ 'e', 'x', 't', 'p', 9, 0,
  /* 6477 */ 'd', 'v', 'p', 9, 0,
  /* 6482 */ 'e', 'v', 'p', 9, 0,
  /* 6487 */ 'l', 'w', 'p', 9, 0,
  /* 6492 */ 's', 'w', 'p', 9, 0,
  /* 6497 */ 'b', 'e', 'q', 9, 0,
  /* 6502 */ 's', 'e', 'q', 9, 0,
  /* 6507 */ 't', 'e', 'q', 9, 0,
  /* 6512 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6524 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6536 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6552 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6567 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6583 */ 'l', 'd', 'r', 9, 0,
  /* 6588 */ 's', 'd', 'r', 9, 0,
  /* 6593 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6607 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6621 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6634 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6649 */ 'j', 'r', 9, 0,
  /* 6653 */ 'j', 'a', 'l', 'r', 9, 0,
  /* 6659 */ 'n', 'o', 'r', 9, 0,
  /* 6664 */ 'd', 'r', 'o', 'r', 9, 0,
  /* 6670 */ 'x', 'o', 'r', 9, 0,
  /* 6675 */ 'r', 'd', 'p', 'g', 'p', 'r', 9, 0,
  /* 6683 */ 'w', 'r', 'p', 'g', 'p', 'r', 9, 0,
  /* 6691 */ 'd', 'r', 'o', 't', 'r', 9, 0,
  /* 6698 */ 'r', 'd', 'h', 'w', 'r', 9, 0,
  /* 6705 */ 'l', 'w', 'r', 9, 0,
  /* 6710 */ 's', 'w', 'r', 9, 0,
  /* 6715 */ 'm', 'i', 'n', 'a', '.', 's', 9, 0,
  /* 6723 */ 'm', 'a', 'x', 'a', '.', 's', 9, 0,
  /* 6731 */ 'n', 'm', 's', 'u', 'b', '.', 's', 9, 0,
  /* 6740 */ 'c', 'v', 't', '.', 'd', '.', 's', 9, 0,
  /* 6749 */ 'n', 'm', 'a', 'd', 'd', '.', 's', 9, 0,
  /* 6758 */ 'c', '.', 'n', 'g', 'e', '.', 's', 9, 0,
  /* 6767 */ 'c', '.', 'l', 'e', '.', 's', 9, 0,
  /* 6775 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 's', 9, 0,
  /* 6785 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 's', 9, 0,
  /* 6795 */ 'c', '.', 'o', 'l', 'e', '.', 's', 9, 0,
  /* 6804 */ 'c', 'm', 'p', '.', 's', 'l', 'e', '.', 's', 9, 0,
  /* 6815 */ 'c', '.', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6824 */ 'c', 'm', 'p', '.', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6835 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6847 */ 'c', '.', 'f', '.', 's', 9, 0,
  /* 6854 */ 'c', 'm', 'p', '.', 'a', 'f', '.', 's', 9, 0,
  /* 6864 */ 'c', 'm', 'p', '.', 's', 'a', 'f', '.', 's', 9, 0,
  /* 6875 */ 'm', 's', 'u', 'b', 'f', '.', 's', 9, 0,
  /* 6884 */ 'm', 'a', 'd', 'd', 'f', '.', 's', 9, 0,
  /* 6893 */ 'c', '.', 's', 'f', '.', 's', 9, 0,
  /* 6901 */ 'm', 'o', 'v', 'f', '.', 's', 9, 0,
  /* 6909 */ 'n', 'e', 'g', '.', 's', 9, 0,
  /* 6916 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 's', 9, 0,
  /* 6927 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 's', 9, 0,
  /* 6938 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 's', 9, 0,
  /* 6948 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 's', 9, 0,
  /* 6959 */ 'c', 'v', 't', '.', 'l', '.', 's', 9, 0,
  /* 6968 */ 's', 'e', 'l', '.', 's', 9, 0,
  /* 6975 */ 'c', '.', 'n', 'g', 'l', '.', 's', 9, 0,
  /* 6984 */ 'm', 'u', 'l', '.', 's', 9, 0,
  /* 6991 */ 'm', 'i', 'n', '.', 's', 9, 0,
  /* 6998 */ 'c', '.', 'u', 'n', '.', 's', 9, 0,
  /* 7006 */ 'c', 'm', 'p', '.', 'u', 'n', '.', 's', 9, 0,
  /* 7016 */ 'c', 'm', 'p', '.', 's', 'u', 'n', '.', 's', 9, 0,
  /* 7027 */ 'm', 'o', 'v', 'n', '.', 's', 9, 0,
  /* 7035 */ 'r', 'e', 'c', 'i', 'p', '.', 's', 9, 0,
  /* 7044 */ 'c', '.', 'e', 'q', '.', 's', 9, 0,
  /* 7052 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 's', 9, 0,
  /* 7062 */ 'c', '.', 's', 'e', 'q', '.', 's', 9, 0,
  /* 7071 */ 'c', 'm', 'p', '.', 's', 'e', 'q', '.', 's', 9, 0,
  /* 7082 */ 'c', '.', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 7091 */ 'c', 'm', 'p', '.', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 7102 */ 'c', 'm', 'p', '.', 's', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 7114 */ 'a', 'b', 's', '.', 's', 9, 0,
  /* 7121 */ 'c', 'l', 'a', 's', 's', '.', 's', 9, 0,
  /* 7130 */ 'c', '.', 'n', 'g', 't', '.', 's', 9, 0,
  /* 7139 */ 'c', '.', 'l', 't', '.', 's', 9, 0,
  /* 7147 */ 'c', 'm', 'p', '.', 'l', 't', '.', 's', 9, 0,
  /* 7157 */ 'c', '.', 'o', 'l', 't', '.', 's', 9, 0,
  /* 7166 */ 'c', 'm', 'p', '.', 's', 'l', 't', '.', 's', 9, 0,
  /* 7177 */ 'c', '.', 'u', 'l', 't', '.', 's', 9, 0,
  /* 7186 */ 'c', 'm', 'p', '.', 'u', 'l', 't', '.', 's', 9, 0,
  /* 7197 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 't', '.', 's', 9, 0,
  /* 7209 */ 'r', 'i', 'n', 't', '.', 's', 9, 0,
  /* 7217 */ 'r', 's', 'q', 'r', 't', '.', 's', 9, 0,
  /* 7226 */ 'm', 'o', 'v', 't', '.', 's', 9, 0,
  /* 7234 */ 'd', 'i', 'v', '.', 's', 9, 0,
  /* 7241 */ 'm', 'o', 'v', '.', 's', 9, 0,
  /* 7248 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 's', 9, 0,
  /* 7259 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 's', 9, 0,
  /* 7270 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 's', 9, 0,
  /* 7280 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 's', 9, 0,
  /* 7291 */ 'c', 'v', 't', '.', 'w', '.', 's', 9, 0,
  /* 7300 */ 'm', 'a', 'x', '.', 's', 9, 0,
  /* 7307 */ 's', 'e', 'l', 'n', 'e', 'z', '.', 's', 9, 0,
  /* 7317 */ 's', 'e', 'l', 'e', 'q', 'z', '.', 's', 9, 0,
  /* 7327 */ 'm', 'o', 'v', 'z', '.', 's', 9, 0,
  /* 7335 */ 'a', 'b', 's', 9, 0,
  /* 7340 */ 'j', 'a', 'l', 's', 9, 0,
  /* 7346 */ 'b', 'g', 'e', 'z', 'a', 'l', 's', 9, 0,
  /* 7355 */ 'b', 'l', 't', 'z', 'a', 'l', 's', 9, 0,
  /* 7364 */ 'i', 'n', 's', 9, 0,
  /* 7369 */ 'j', 'a', 'l', 'r', 's', 9, 0,
  /* 7376 */ 'l', 'w', 'x', 's', 9, 0,
  /* 7382 */ 'b', 'c', '1', 't', 9, 0,
  /* 7388 */ 'b', 'g', 't', 9, 0,
  /* 7393 */ 'w', 'a', 'i', 't', 9, 0,
  /* 7399 */ 'b', 'l', 't', 9, 0,
  /* 7404 */ 's', 'l', 't', 9, 0,
  /* 7409 */ 't', 'l', 't', 9, 0,
  /* 7414 */ 'd', 'm', 'u', 'l', 't', 9, 0,
  /* 7421 */ 'n', 'o', 't', 9, 0,
  /* 7426 */ 'm', 'o', 'v', 't', 9, 0,
  /* 7432 */ 'd', 'e', 'x', 't', 9, 0,
  /* 7438 */ 'l', 'b', 'u', 9, 0,
  /* 7443 */ 'd', 's', 'u', 'b', 'u', 9, 0,
  /* 7450 */ 'm', 's', 'u', 'b', 'u', 9, 0,
  /* 7457 */ 'b', 'a', 'd', 'd', 'u', 9, 0,
  /* 7464 */ 'd', 'a', 'd', 'd', 'u', 9, 0,
  /* 7471 */ 'm', 'a', 'd', 'd', 'u', 9, 0,
  /* 7478 */ 'd', 'm', 'o', 'd', 'u', 9, 0,
  /* 7485 */ 'b', 'g', 'e', 'u', 9, 0,
  /* 7491 */ 't', 'g', 'e', 'u', 9, 0,
  /* 7497 */ 'b', 'l', 'e', 'u', 9, 0,
  /* 7503 */ 'u', 'l', 'h', 'u', 9, 0,
  /* 7509 */ 'd', 'm', 'u', 'h', 'u', 9, 0,
  /* 7516 */ 'd', 'a', 'd', 'd', 'i', 'u', 9, 0,
  /* 7524 */ 't', 'g', 'e', 'i', 'u', 9, 0,
  /* 7531 */ 's', 'l', 't', 'i', 'u', 9, 0,
  /* 7538 */ 't', 'l', 't', 'i', 'u', 9, 0,
  /* 7545 */ 'v', '3', 'm', 'u', 'l', 'u', 9, 0,
  /* 7553 */ 'd', 'm', 'u', 'l', 'u', 9, 0,
  /* 7560 */ 'v', 'm', 'u', 'l', 'u', 9, 0,
  /* 7567 */ 'b', 'g', 't', 'u', 9, 0,
  /* 7573 */ 'b', 'l', 't', 'u', 9, 0,
  /* 7579 */ 's', 'l', 't', 'u', 9, 0,
  /* 7585 */ 't', 'l', 't', 'u', 9, 0,
  /* 7591 */ 'd', 'm', 'u', 'l', 't', 'u', 9, 0,
  /* 7599 */ 'd', 'e', 'x', 't', 'u', 9, 0,
  /* 7606 */ 'd', 'd', 'i', 'v', 'u', 9, 0,
  /* 7613 */ 'l', 'w', 'u', 9, 0,
  /* 7618 */ 'a', 'n', 'd', '.', 'v', 9, 0,
  /* 7625 */ 'm', 'o', 'v', 'e', '.', 'v', 9, 0,
  /* 7633 */ 'b', 's', 'e', 'l', '.', 'v', 9, 0,
  /* 7641 */ 'n', 'o', 'r', '.', 'v', 9, 0,
  /* 7648 */ 'x', 'o', 'r', '.', 'v', 9, 0,
  /* 7655 */ 'b', 'z', '.', 'v', 9, 0,
  /* 7661 */ 'b', 'm', 'z', '.', 'v', 9, 0,
  /* 7668 */ 'b', 'n', 'z', '.', 'v', 9, 0,
  /* 7675 */ 'b', 'm', 'n', 'z', '.', 'v', 9, 0,
  /* 7683 */ 'd', 's', 'r', 'a', 'v', 9, 0,
  /* 7690 */ 'b', 'i', 't', 'r', 'e', 'v', 9, 0,
  /* 7698 */ 'd', 'd', 'i', 'v', 9, 0,
  /* 7704 */ 'd', 's', 'l', 'l', 'v', 9, 0,
  /* 7711 */ 'd', 's', 'r', 'l', 'v', 9, 0,
  /* 7718 */ 's', 'h', 'i', 'l', 'o', 'v', 9, 0,
  /* 7726 */ 'e', 'x', 't', 'p', 'd', 'p', 'v', 9, 0,
  /* 7735 */ 'e', 'x', 't', 'p', 'v', 9, 0,
  /* 7742 */ 'd', 'r', 'o', 't', 'r', 'v', 9, 0,
  /* 7750 */ 'i', 'n', 's', 'v', 9, 0,
  /* 7756 */ 'f', 'l', 'o', 'g', '2', '.', 'w', 9, 0,
  /* 7765 */ 'f', 'e', 'x', 'p', '2', '.', 'w', 9, 0,
  /* 7774 */ 'a', 'd', 'd', '_', 'a', '.', 'w', 9, 0,
  /* 7783 */ 'f', 'm', 'i', 'n', '_', 'a', '.', 'w', 9, 0,
  /* 7793 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'w', 9, 0,
  /* 7803 */ 'f', 'm', 'a', 'x', '_', 'a', '.', 'w', 9, 0,
  /* 7813 */ 's', 'r', 'a', '.', 'w', 9, 0,
  /* 7820 */ 'f', 's', 'u', 'b', '.', 'w', 9, 0,
  /* 7828 */ 'f', 'm', 's', 'u', 'b', '.', 'w', 9, 0,
  /* 7837 */ 'n', 'l', 'o', 'c', '.', 'w', 9, 0,
  /* 7845 */ 'n', 'l', 'z', 'c', '.', 'w', 9, 0,
  /* 7853 */ 'c', 'v', 't', '.', 'd', '.', 'w', 9, 0,
  /* 7862 */ 'f', 'a', 'd', 'd', '.', 'w', 9, 0,
  /* 7870 */ 'f', 'm', 'a', 'd', 'd', '.', 'w', 9, 0,
  /* 7879 */ 's', 'l', 'd', '.', 'w', 9, 0,
  /* 7886 */ 'p', 'c', 'k', 'o', 'd', '.', 'w', 9, 0,
  /* 7895 */ 'i', 'l', 'v', 'o', 'd', '.', 'w', 9, 0,
  /* 7904 */ 'f', 'c', 'l', 'e', '.', 'w', 9, 0,
  /* 7912 */ 'f', 's', 'l', 'e', '.', 'w', 9, 0,
  /* 7920 */ 'f', 'c', 'u', 'l', 'e', '.', 'w', 9, 0,
  /* 7929 */ 'f', 's', 'u', 'l', 'e', '.', 'w', 9, 0,
  /* 7938 */ 'f', 'c', 'n', 'e', '.', 'w', 9, 0,
  /* 7946 */ 'f', 's', 'n', 'e', '.', 'w', 9, 0,
  /* 7954 */ 'f', 'c', 'u', 'n', 'e', '.', 'w', 9, 0,
  /* 7963 */ 'f', 's', 'u', 'n', 'e', '.', 'w', 9, 0,
  /* 7972 */ 'i', 'n', 's', 'v', 'e', '.', 'w', 9, 0,
  /* 7981 */ 'f', 'c', 'a', 'f', '.', 'w', 9, 0,
  /* 7989 */ 'f', 's', 'a', 'f', '.', 'w', 9, 0,
  /* 7997 */ 'v', 's', 'h', 'f', '.', 'w', 9, 0,
  /* 8005 */ 'b', 'n', 'e', 'g', '.', 'w', 9, 0,
  /* 8013 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 8029 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 8042 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '_', 'r', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 8060 */ 'p', 'r', 'e', 'c', 'r', 'q', '_', 'r', 's', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 8076 */ 's', 'u', 'b', 'q', 'h', '.', 'w', 9, 0,
  /* 8085 */ 'a', 'd', 'd', 'q', 'h', '.', 'w', 9, 0,
  /* 8094 */ 's', 'r', 'a', 'i', '.', 'w', 9, 0,
  /* 8102 */ 's', 'l', 'd', 'i', '.', 'w', 9, 0,
  /* 8110 */ 'b', 'n', 'e', 'g', 'i', '.', 'w', 9, 0,
  /* 8119 */ 's', 'l', 'l', 'i', '.', 'w', 9, 0,
  /* 8127 */ 's', 'r', 'l', 'i', '.', 'w', 9, 0,
  /* 8135 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'w', 9, 0,
  /* 8145 */ 'c', 'e', 'q', 'i', '.', 'w', 9, 0,
  /* 8153 */ 's', 'r', 'a', 'r', 'i', '.', 'w', 9, 0,
  /* 8162 */ 'b', 'c', 'l', 'r', 'i', '.', 'w', 9, 0,
  /* 8171 */ 's', 'r', 'l', 'r', 'i', '.', 'w', 9, 0,
  /* 8180 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'w', 9, 0,
  /* 8190 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'w', 9, 0,
  /* 8200 */ 'b', 's', 'e', 't', 'i', '.', 'w', 9, 0,
  /* 8209 */ 's', 'u', 'b', 'v', 'i', '.', 'w', 9, 0,
  /* 8218 */ 'a', 'd', 'd', 'v', 'i', '.', 'w', 9, 0,
  /* 8227 */ 'd', 'p', 'a', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 8240 */ 'd', 'p', 's', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 8253 */ 'f', 'i', 'l', 'l', '.', 'w', 9, 0,
  /* 8261 */ 's', 'l', 'l', '.', 'w', 9, 0,
  /* 8268 */ 'f', 'e', 'x', 'u', 'p', 'l', '.', 'w', 9, 0,
  /* 8278 */ 'f', 'f', 'q', 'l', '.', 'w', 9, 0,
  /* 8286 */ 's', 'r', 'l', '.', 'w', 9, 0,
  /* 8293 */ 'b', 'i', 'n', 's', 'l', '.', 'w', 9, 0,
  /* 8302 */ 'f', 'm', 'u', 'l', '.', 'w', 9, 0,
  /* 8310 */ 'i', 'l', 'v', 'l', '.', 'w', 9, 0,
  /* 8318 */ 'f', 'm', 'i', 'n', '.', 'w', 9, 0,
  /* 8326 */ 'f', 'c', 'u', 'n', '.', 'w', 9, 0,
  /* 8334 */ 'f', 's', 'u', 'n', '.', 'w', 9, 0,
  /* 8342 */ 'f', 'e', 'x', 'd', 'o', '.', 'w', 9, 0,
  /* 8351 */ 'f', 'r', 'c', 'p', '.', 'w', 9, 0,
  /* 8359 */ 'm', 's', 'u', 'b', '_', 'q', '.', 'w', 9, 0,
  /* 8369 */ 'm', 'a', 'd', 'd', '_', 'q', '.', 'w', 9, 0,
  /* 8379 */ 'm', 'u', 'l', '_', 'q', '.', 'w', 9, 0,
  /* 8388 */ 'm', 's', 'u', 'b', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 8399 */ 'm', 'a', 'd', 'd', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 8410 */ 'm', 'u', 'l', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 8420 */ 'f', 'c', 'e', 'q', '.', 'w', 9, 0,
  /* 8428 */ 'f', 's', 'e', 'q', '.', 'w', 9, 0,
  /* 8436 */ 'f', 'c', 'u', 'e', 'q', '.', 'w', 9, 0,
  /* 8445 */ 'f', 's', 'u', 'e', 'q', '.', 'w', 9, 0,
  /* 8454 */ 'f', 't', 'q', '.', 'w', 9, 0,
  /* 8461 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'w', 9, 0,
  /* 8471 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 8482 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 8493 */ 'e', 'x', 't', 'r', '_', 'r', '.', 'w', 9, 0,
  /* 8503 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 8514 */ 'e', 'x', 't', 'r', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 8525 */ 's', 'r', 'a', 'r', '.', 'w', 9, 0,
  /* 8533 */ 'b', 'c', 'l', 'r', '.', 'w', 9, 0,
  /* 8541 */ 's', 'r', 'l', 'r', '.', 'w', 9, 0,
  /* 8549 */ 'f', 'c', 'o', 'r', '.', 'w', 9, 0,
  /* 8557 */ 'f', 's', 'o', 'r', '.', 'w', 9, 0,
  /* 8565 */ 'f', 'e', 'x', 'u', 'p', 'r', '.', 'w', 9, 0,
  /* 8575 */ 'f', 'f', 'q', 'r', '.', 'w', 9, 0,
  /* 8583 */ 'b', 'i', 'n', 's', 'r', '.', 'w', 9, 0,
  /* 8592 */ 'e', 'x', 't', 'r', '.', 'w', 9, 0,
  /* 8600 */ 'i', 'l', 'v', 'r', '.', 'w', 9, 0,
  /* 8608 */ 'c', 'v', 't', '.', 's', '.', 'w', 9, 0,
  /* 8617 */ 'a', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8627 */ 'h', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8637 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8648 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 's', '.', 'w', 9, 0,
  /* 8660 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8670 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8681 */ 'm', 'o', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8690 */ 'c', 'l', 'e', '_', 's', '.', 'w', 9, 0,
  /* 8699 */ 'a', 'v', 'e', '_', 's', '.', 'w', 9, 0,
  /* 8708 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8718 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8728 */ 'c', 'l', 't', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8738 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8748 */ 's', 'h', 'l', 'l', '_', 's', '.', 'w', 9, 0,
  /* 8758 */ 'm', 'i', 'n', '_', 's', '.', 'w', 9, 0,
  /* 8767 */ 'd', 'o', 't', 'p', '_', 's', '.', 'w', 9, 0,
  /* 8777 */ 's', 'u', 'b', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8787 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8797 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8807 */ 'a', 'b', 's', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8817 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'w', 9, 0,
  /* 8827 */ 's', 'u', 'b', 's', '_', 's', '.', 'w', 9, 0,
  /* 8837 */ 'a', 'd', 'd', 's', '_', 's', '.', 'w', 9, 0,
  /* 8847 */ 's', 'a', 't', '_', 's', '.', 'w', 9, 0,
  /* 8856 */ 'c', 'l', 't', '_', 's', '.', 'w', 9, 0,
  /* 8865 */ 'f', 'f', 'i', 'n', 't', '_', 's', '.', 'w', 9, 0,
  /* 8876 */ 'f', 't', 'i', 'n', 't', '_', 's', '.', 'w', 9, 0,
  /* 8887 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'w', 9, 0,
  /* 8899 */ 'd', 'i', 'v', '_', 's', '.', 'w', 9, 0,
  /* 8908 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'w', 9, 0,
  /* 8919 */ 'm', 'a', 'x', '_', 's', '.', 'w', 9, 0,
  /* 8928 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'w', 9, 0,
  /* 8938 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'w', 9, 0,
  /* 8949 */ 'e', 'x', 't', 'r', '_', 'r', 's', '.', 'w', 9, 0,
  /* 8960 */ 'e', 'x', 't', 'r', 'v', '_', 'r', 's', '.', 'w', 9, 0,
  /* 8972 */ 'f', 'c', 'l', 'a', 's', 's', '.', 'w', 9, 0,
  /* 8982 */ 's', 'p', 'l', 'a', 't', '.', 'w', 9, 0,
  /* 8991 */ 'b', 's', 'e', 't', '.', 'w', 9, 0,
  /* 8999 */ 'f', 'c', 'l', 't', '.', 'w', 9, 0,
  /* 9007 */ 'f', 's', 'l', 't', '.', 'w', 9, 0,
  /* 9015 */ 'f', 'c', 'u', 'l', 't', '.', 'w', 9, 0,
  /* 9024 */ 'f', 's', 'u', 'l', 't', '.', 'w', 9, 0,
  /* 9033 */ 'p', 'c', 'n', 't', '.', 'w', 9, 0,
  /* 9041 */ 'f', 'r', 'i', 'n', 't', '.', 'w', 9, 0,
  /* 9050 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'w', 9, 0,
  /* 9060 */ 'f', 's', 'q', 'r', 't', '.', 'w', 9, 0,
  /* 9069 */ 'f', 'r', 's', 'q', 'r', 't', '.', 'w', 9, 0,
  /* 9079 */ 's', 't', '.', 'w', 9, 0,
  /* 9085 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 9095 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 9105 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 9116 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 'u', '.', 'w', 9, 0,
  /* 9128 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 9138 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 9149 */ 'm', 'o', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 9158 */ 'c', 'l', 'e', '_', 'u', '.', 'w', 9, 0,
  /* 9167 */ 'a', 'v', 'e', '_', 'u', '.', 'w', 9, 0,
  /* 9176 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 9186 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 9196 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 9206 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 9216 */ 'm', 'i', 'n', '_', 'u', '.', 'w', 9, 0,
  /* 9225 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'w', 9, 0,
  /* 9235 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'w', 9, 0,
  /* 9245 */ 's', 'u', 'b', 's', '_', 'u', '.', 'w', 9, 0,
  /* 9255 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'w', 9, 0,
  /* 9265 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'w', 9, 0,
  /* 9277 */ 's', 'a', 't', '_', 'u', '.', 'w', 9, 0,
  /* 9286 */ 'c', 'l', 't', '_', 'u', '.', 'w', 9, 0,
  /* 9295 */ 'f', 'f', 'i', 'n', 't', '_', 'u', '.', 'w', 9, 0,
  /* 9306 */ 'f', 't', 'i', 'n', 't', '_', 'u', '.', 'w', 9, 0,
  /* 9317 */ 'd', 'i', 'v', '_', 'u', '.', 'w', 9, 0,
  /* 9326 */ 'm', 'a', 'x', '_', 'u', '.', 'w', 9, 0,
  /* 9335 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'w', 9, 0,
  /* 9345 */ 'm', 's', 'u', 'b', 'v', '.', 'w', 9, 0,
  /* 9354 */ 'm', 'a', 'd', 'd', 'v', '.', 'w', 9, 0,
  /* 9363 */ 'p', 'c', 'k', 'e', 'v', '.', 'w', 9, 0,
  /* 9372 */ 'i', 'l', 'v', 'e', 'v', '.', 'w', 9, 0,
  /* 9381 */ 'f', 'd', 'i', 'v', '.', 'w', 9, 0,
  /* 9389 */ 'm', 'u', 'l', 'v', '.', 'w', 9, 0,
  /* 9397 */ 'e', 'x', 't', 'r', 'v', '.', 'w', 9, 0,
  /* 9406 */ 'f', 'm', 'a', 'x', '.', 'w', 9, 0,
  /* 9414 */ 'b', 'z', '.', 'w', 9, 0,
  /* 9420 */ 'b', 'n', 'z', '.', 'w', 9, 0,
  /* 9427 */ 'u', 'l', 'w', 9, 0,
  /* 9432 */ 's', 'w', 9, 0,
  /* 9436 */ 'p', 'r', 'e', 'f', 'x', 9, 0,
  /* 9443 */ 'l', 'h', 'x', 9, 0,
  /* 9448 */ 'j', 'a', 'l', 'x', 9, 0,
  /* 9454 */ 'l', 'b', 'u', 'x', 9, 0,
  /* 9460 */ 'l', 'w', 'x', 9, 0,
  /* 9465 */ 'b', 'g', 'e', 'z', 9, 0,
  /* 9471 */ 'b', 'l', 'e', 'z', 9, 0,
  /* 9477 */ 'b', 'n', 'e', 'z', 9, 0,
  /* 9483 */ 's', 'e', 'l', 'n', 'e', 'z', 9, 0,
  /* 9491 */ 'b', 't', 'n', 'e', 'z', 9, 0,
  /* 9498 */ 'd', 'c', 'l', 'z', 9, 0,
  /* 9504 */ 'b', 'e', 'q', 'z', 9, 0,
  /* 9510 */ 's', 'e', 'l', 'e', 'q', 'z', 9, 0,
  /* 9518 */ 'b', 't', 'e', 'q', 'z', 9, 0,
  /* 9525 */ 'b', 'g', 't', 'z', 9, 0,
  /* 9531 */ 'b', 'l', 't', 'z', 9, 0,
  /* 9537 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 9543 */ 's', 'e', 'b', 9, 32, 0,
  /* 9549 */ 'j', 'r', 'c', 9, 32, 0,
  /* 9555 */ 's', 'e', 'h', 9, 32, 0,
  /* 9561 */ 'd', 'd', 'i', 'v', 'u', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 9575 */ 'd', 'd', 'i', 'v', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 9588 */ 'a', 'd', 'd', 'i', 'u', 9, '$', 's', 'p', ',', 32, 0,
  /* 9600 */ 'c', 'i', 'n', 's', '3', '2', 32, 0,
  /* 9608 */ 'e', 'x', 't', 's', '3', '2', 32, 0,
  /* 9616 */ 's', 'y', 'n', 'c', 32, 0,
  /* 9622 */ 9, '.', 'w', 'o', 'r', 'd', 32, 0,
  /* 9630 */ 'd', 'i', 'n', 's', 'm', 32, 0,
  /* 9637 */ 'd', 'e', 'x', 't', 'm', 32, 0,
  /* 9644 */ 'c', 'i', 'n', 's', 32, 0,
  /* 9650 */ 'd', 'i', 'n', 's', 32, 0,
  /* 9656 */ 'e', 'x', 't', 's', 32, 0,
  /* 9662 */ 'd', 'e', 'x', 't', 32, 0,
  /* 9668 */ 'd', 'i', 'n', 's', 'u', 32, 0,
  /* 9675 */ 'd', 'e', 'x', 't', 'u', 32, 0,
  /* 9682 */ 'b', 'c', '1', 'n', 'e', 'z', 32, 0,
  /* 9690 */ 'b', 'c', '2', 'n', 'e', 'z', 32, 0,
  /* 9698 */ 'b', 'c', '1', 'e', 'q', 'z', 32, 0,
  /* 9706 */ 'b', 'c', '2', 'e', 'q', 'z', 32, 0,
  /* 9714 */ 'c', '.', 0,
  /* 9717 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 9740 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 9762 */ 'b', 'r', 'e', 'a', 'k', 32, '0', 0,
  /* 9770 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 9783 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 9790 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 9800 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 9815 */ 'j', 'r', 'c', 9, 32, '$', 'r', 'a', 0,
  /* 9824 */ 'j', 'r', 9, 32, '$', 'r', 'a', 0,
  /* 9832 */ 'e', 'h', 'b', 0,
  /* 9836 */ 'e', 'r', 'e', 't', 'n', 'c', 0,
  /* 9843 */ 'p', 'a', 'u', 's', 'e', 0,
  /* 9849 */ 't', 'l', 'b', 'i', 'n', 'v', 'f', 0,
  /* 9857 */ 't', 'l', 'b', 'w', 'i', 0,
  /* 9863 */ 'f', 'o', 'o', 0,
  /* 9867 */ 't', 'l', 'b', 'p', 0,
  /* 9872 */ 's', 's', 'n', 'o', 'p', 0,
  /* 9878 */ 't', 'l', 'b', 'r', 0,
  /* 9883 */ 't', 'l', 'b', 'w', 'r', 0,
  /* 9889 */ 'd', 'e', 'r', 'e', 't', 0,
  /* 9895 */ 'w', 'a', 'i', 't', 0,
  /* 9900 */ 't', 'l', 'b', 'i', 'n', 'v', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    9791U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    9784U,	// BUNDLE
    9801U,	// LIFETIME_START
    9771U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    0U,	// PATCHABLE_OP
    9718U,	// PATCHABLE_FUNCTION_ENTER
    9741U,	// PATCHABLE_RET
    0U,	// G_ADD
    0U,	// G_OR
    0U,	// G_BR
    23720U,	// ABSMacro
    21885U,	// ABSQ_S_PH
    21885U,	// ABSQ_S_PH_MM
    18107U,	// ABSQ_S_QB
    18107U,	// ABSQ_S_QB_MMR2
    25192U,	// ABSQ_S_W
    25192U,	// ABSQ_S_W_MM
    19782U,	// ABS_D_MMR6
    23499U,	// ABS_S_MMR6
    268455861U,	// ADD
    18393U,	// ADDIUPC
    18393U,	// ADDIUPC_MM
    18393U,	// ADDIUPC_MMR6
    22775U,	// ADDIUR1SP_MM
    268452166U,	// ADDIUR2_MM
    8683879U,	// ADDIUS5_MM
    547124U,	// ADDIUSP_MM
    268459358U,	// ADDIU_MMR6
    268457146U,	// ADDQH_PH
    268457146U,	// ADDQH_PH_MMR2
    268457263U,	// ADDQH_R_PH
    268457263U,	// ADDQH_R_PH_MMR2
    268460323U,	// ADDQH_R_W
    268460323U,	// ADDQH_R_W_MMR2
    268459926U,	// ADDQH_W
    268459926U,	// ADDQH_W_MMR2
    268457220U,	// ADDQ_PH
    268457220U,	// ADDQ_PH_MM
    268457319U,	// ADDQ_S_PH
    268457319U,	// ADDQ_S_PH_MM
    268460628U,	// ADDQ_S_W
    268460628U,	// ADDQ_S_W_MM
    268453889U,	// ADDSC
    268453889U,	// ADDSC_MM
    268452530U,	// ADDS_A_B
    268454050U,	// ADDS_A_D
    268456090U,	// ADDS_A_H
    268459634U,	// ADDS_A_W
    268452998U,	// ADDS_S_B
    268455148U,	// ADDS_S_D
    268456647U,	// ADDS_S_H
    268460678U,	// ADDS_S_W
    268453213U,	// ADDS_U_B
    268455615U,	// ADDS_U_D
    268456925U,	// ADDS_U_H
    268461096U,	// ADDS_U_W
    268452370U,	// ADDU16_MM
    268452370U,	// ADDU16_MMR6
    268453431U,	// ADDUH_QB
    268453431U,	// ADDUH_QB_MMR2
    268453539U,	// ADDUH_R_QB
    268453539U,	// ADDUH_R_QB_MMR2
    268459299U,	// ADDU_MMR6
    268457418U,	// ADDU_PH
    268457418U,	// ADDU_PH_MMR2
    268453644U,	// ADDU_QB
    268453644U,	// ADDU_QB_MM
    268457363U,	// ADDU_S_PH
    268457363U,	// ADDU_S_PH_MMR2
    268453585U,	// ADDU_S_QB
    268453585U,	// ADDU_S_QB_MM
    268452779U,	// ADDVI_B
    268454570U,	// ADDVI_D
    268456306U,	// ADDVI_H
    268460059U,	// ADDVI_W
    268453291U,	// ADDV_B
    268455705U,	// ADDV_D
    268457003U,	// ADDV_H
    268461196U,	// ADDV_W
    268453928U,	// ADDWC
    268453928U,	// ADDWC_MM
    268452512U,	// ADD_A_B
    268454031U,	// ADD_A_D
    268456072U,	// ADD_A_H
    268459615U,	// ADD_A_W
    268455861U,	// ADD_MM
    268455861U,	// ADD_MMR6
    268457638U,	// ADDi
    268457638U,	// ADDi_MM
    268459358U,	// ADDiu
    268459358U,	// ADDiu_MM
    268459299U,	// ADDu
    268459299U,	// ADDu_MM
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    268458134U,	// ALIGN
    268458134U,	// ALIGN_MMR6
    18385U,	// ALUIPC
    18385U,	// ALUIPC_MMR6
    268455883U,	// AND
    9224597U,	// AND16_MM
    9224597U,	// AND16_MMR6
    268455883U,	// AND64
    268452266U,	// ANDI16_MM
    268452266U,	// ANDI16_MMR6
    268452638U,	// ANDI_B
    268457644U,	// ANDI_MMR6
    268455883U,	// AND_MM
    268455883U,	// AND_MMR6
    268459459U,	// AND_V
    0U,	// AND_V_D_PSEUDO
    0U,	// AND_V_H_PSEUDO
    0U,	// AND_V_W_PSEUDO
    268457644U,	// ANDi
    268457644U,	// ANDi64
    268457644U,	// ANDi_MM
    268455897U,	// APPEND
    268455897U,	// APPEND_MMR2
    268452892U,	// ASUB_S_B
    268454978U,	// ASUB_S_D
    268456479U,	// ASUB_S_H
    268460458U,	// ASUB_S_W
    268453107U,	// ASUB_U_B
    268455445U,	// ASUB_U_D
    268456767U,	// ASUB_U_H
    268460926U,	// ASUB_U_W
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    268457748U,	// AUI
    18378U,	// AUIPC
    18378U,	// AUIPC_MMR6
    268457748U,	// AUI_MMR6
    268452978U,	// AVER_S_B
    268455128U,	// AVER_S_D
    268456617U,	// AVER_S_H
    268460658U,	// AVER_S_W
    268453193U,	// AVER_U_B
    268455595U,	// AVER_U_D
    268456905U,	// AVER_U_H
    268461076U,	// AVER_U_W
    268452920U,	// AVE_S_B
    268455060U,	// AVE_S_D
    268456549U,	// AVE_S_H
    268460540U,	// AVE_S_W
    268453135U,	// AVE_U_B
    268455527U,	// AVE_U_D
    268456837U,	// AVE_U_H
    268461008U,	// AVE_U_W
    23902U,	// AddiuRxImmX16
    1072478U,	// AddiuRxPcImmX16
    553672030U,	// AddiuRxRxImm16
    16801118U,	// AddiuRxRxImmX16
    25189726U,	// AddiuRxRyOffMemX16
    1336693U,	// AddiuSpImm16
    550261U,	// AddiuSpImmX16
    268459299U,	// AdduRxRyRz16
    16797643U,	// AndRxRxRy16
    0U,	// B
    541041U,	// B16_MM
    268459298U,	// BADDu
    546618U,	// BAL
    542587U,	// BALC
    542587U,	// BALC_MMR6
    268458133U,	// BALIGN
    268458133U,	// BALIGN_MMR2
    0U,	// BAL_BR
    33570871U,	// BBIT0
    33571003U,	// BBIT032
    33570996U,	// BBIT1
    33571012U,	// BBIT132
    542566U,	// BC
    541046U,	// BC16_MMR6
    26083U,	// BC1EQZ
    18518U,	// BC1EQZC_MMR6
    20593U,	// BC1F
    22455U,	// BC1FL
    20593U,	// BC1F_MM
    26067U,	// BC1NEZ
    18493U,	// BC1NEZC_MMR6
    23767U,	// BC1T
    22569U,	// BC1TL
    23767U,	// BC1T_MM
    26091U,	// BC2EQZ
    18527U,	// BC2EQZC_MMR6
    26075U,	// BC2NEZ
    18502U,	// BC2NEZC_MMR6
    268452707U,	// BCLRI_B
    268454514U,	// BCLRI_D
    268456250U,	// BCLRI_H
    268460003U,	// BCLRI_W
    268452859U,	// BCLR_B
    268454902U,	// BCLR_D
    268456446U,	// BCLR_H
    268460374U,	// BCLR_W
    542566U,	// BC_MMR6
    268458338U,	// BEQ
    268458338U,	// BEQ64
    268453871U,	// BEQC
    268453871U,	// BEQC_MMR6
    268458013U,	// BEQL
    16949U,	// BEQZ16_MM
    18339U,	// BEQZALC
    18339U,	// BEQZALC_MMR6
    18536U,	// BEQZC
    16780U,	// BEQZC16_MMR6
    18536U,	// BEQZC_MM
    18536U,	// BEQZC_MMR6
    268458338U,	// BEQ_MM
    268455945U,	// BGE
    268453738U,	// BGEC
    268453738U,	// BGEC_MMR6
    268455945U,	// BGEImmMacro
    268457893U,	// BGEL
    268457893U,	// BGELImmMacro
    268459326U,	// BGEU
    268453902U,	// BGEUC
    268453902U,	// BGEUC_MMR6
    268459326U,	// BGEUImmMacro
    268458044U,	// BGEUL
    268458044U,	// BGEULImmMacro
    25850U,	// BGEZ
    25850U,	// BGEZ64
    22340U,	// BGEZAL
    18312U,	// BGEZALC
    18312U,	// BGEZALC_MMR6
    22527U,	// BGEZALL
    23731U,	// BGEZALS_MM
    22340U,	// BGEZAL_MM
    18479U,	// BGEZC
    22632U,	// BGEZL
    25850U,	// BGEZ_MM
    268459229U,	// BGT
    268459229U,	// BGTImmMacro
    268458032U,	// BGTL
    268458032U,	// BGTLImmMacro
    268459408U,	// BGTU
    268459408U,	// BGTUImmMacro
    268458064U,	// BGTUL
    268458064U,	// BGTULImmMacro
    25910U,	// BGTZ
    25910U,	// BGTZ64
    18348U,	// BGTZALC
    18348U,	// BGTZALC_MMR6
    18543U,	// BGTZC
    22646U,	// BGTZL
    25910U,	// BGTZ_MM
    285229896U,	// BINSLI_B
    285231703U,	// BINSLI_D
    285233439U,	// BINSLI_H
    285237192U,	// BINSLI_W
    285230043U,	// BINSL_B
    285231903U,	// BINSL_D
    285233553U,	// BINSL_H
    285237350U,	// BINSL_W
    285229957U,	// BINSRI_B
    285231748U,	// BINSRI_D
    285233484U,	// BINSRI_H
    285237237U,	// BINSRI_W
    285230091U,	// BINSR_B
    285232168U,	// BINSR_D
    285233678U,	// BINSR_H
    285237640U,	// BINSR_W
    24075U,	// BITREV
    24075U,	// BITREV_MM
    22725U,	// BITSWAP
    22725U,	// BITSWAP_MMR6
    268455972U,	// BLE
    268455972U,	// BLEImmMacro
    268457899U,	// BLEL
    268457899U,	// BLELImmMacro
    268459338U,	// BLEU
    268459338U,	// BLEUImmMacro
    268458051U,	// BLEUL
    268458051U,	// BLEULImmMacro
    25856U,	// BLEZ
    25856U,	// BLEZ64
    18321U,	// BLEZALC
    18321U,	// BLEZALC_MMR6
    18486U,	// BLEZC
    22639U,	// BLEZL
    25856U,	// BLEZ_MM
    268459240U,	// BLT
    268453896U,	// BLTC
    268453896U,	// BLTC_MMR6
    268459240U,	// BLTImmMacro
    268458038U,	// BLTL
    268458038U,	// BLTLImmMacro
    268459414U,	// BLTU
    268453909U,	// BLTUC
    268453909U,	// BLTUC_MMR6
    268459414U,	// BLTUImmMacro
    268458071U,	// BLTUL
    268458071U,	// BLTULImmMacro
    25916U,	// BLTZ
    25916U,	// BLTZ64
    22348U,	// BLTZAL
    18357U,	// BLTZALC
    18357U,	// BLTZALC_MMR6
    22536U,	// BLTZALL
    23740U,	// BLTZALS_MM
    22348U,	// BLTZAL_MM
    18550U,	// BLTZC
    22653U,	// BLTZL
    25916U,	// BLTZ_MM
    285230012U,	// BMNZI_B
    285236732U,	// BMNZ_V
    285230004U,	// BMZI_B
    285236718U,	// BMZ_V
    268455994U,	// BNE
    268455994U,	// BNE64
    268453744U,	// BNEC
    268453744U,	// BNEC_MMR6
    268452646U,	// BNEGI_B
    268454462U,	// BNEGI_D
    268456198U,	// BNEGI_H
    268459951U,	// BNEGI_W
    268452614U,	// BNEG_B
    268454438U,	// BNEG_D
    268456174U,	// BNEG_H
    268459846U,	// BNEG_W
    268457905U,	// BNEL
    16941U,	// BNEZ16_MM
    18330U,	// BNEZALC
    18330U,	// BNEZALC_MMR6
    18511U,	// BNEZC
    16771U,	// BNEZC16_MMR6
    18511U,	// BNEZC_MM
    18511U,	// BNEZC_MMR6
    268455994U,	// BNE_MM
    268453916U,	// BNVC
    268453916U,	// BNVC_MMR6
    17875U,	// BNZ_B
    20374U,	// BNZ_D
    21587U,	// BNZ_H
    24053U,	// BNZ_V
    25805U,	// BNZ_W
    268453922U,	// BOVC
    268453922U,	// BOVC_MMR6
    540885U,	// BPOSGE32
    542555U,	// BPOSGE32C_MMR3
    540885U,	// BPOSGE32_MM
    0U,	// BPOSGE32_PSEUDO
    42014497U,	// BREAK
    82360U,	// BREAK16_MM
    82360U,	// BREAK16_MMR6
    42014497U,	// BREAK_MM
    42014497U,	// BREAK_MMR6
    285229871U,	// BSELI_B
    0U,	// BSEL_D_PSEUDO
    0U,	// BSEL_FD_PSEUDO
    0U,	// BSEL_FW_PSEUDO
    0U,	// BSEL_H_PSEUDO
    285236690U,	// BSEL_V
    0U,	// BSEL_W_PSEUDO
    268452761U,	// BSETI_B
    268454552U,	// BSETI_D
    268456288U,	// BSETI_H
    268460041U,	// BSETI_W
    268453075U,	// BSET_B
    268455264U,	// BSET_D
    268456735U,	// BSET_H
    268460832U,	// BSET_W
    17869U,	// BZ_B
    20358U,	// BZ_D
    21581U,	// BZ_H
    24040U,	// BZ_V
    25799U,	// BZ_W
    541350U,	// B_MMR6_Pseudo
    541350U,	// B_MM_Pseudo
    268458338U,	// BeqImm
    805332257U,	// BeqzRxImm16
    25889U,	// BeqzRxImmX16
    1327782U,	// Bimm16
    541350U,	// BimmX16
    268455994U,	// BneImm
    805332230U,	// BnezRxImm16
    25862U,	// BnezRxImmX16
    9763U,	// Break16
    1598767U,	// Bteqz16
    1073764588U,	// BteqzT8CmpX16
    1073764073U,	// BteqzT8CmpiX16
    1073765613U,	// BteqzT8SltX16
    1073764103U,	// BteqzT8SltiX16
    1073765740U,	// BteqzT8SltiuX16
    1073765788U,	// BteqzT8SltuX16
    550191U,	// BteqzX16
    1598740U,	// Btnez16
    1342200044U,	// BtnezT8CmpX16
    1342199529U,	// BtnezT8CmpiX16
    1342201069U,	// BtnezT8SltX16
    1342199559U,	// BtnezT8SltiX16
    1342201196U,	// BtnezT8SltiuX16
    1342201244U,	// BtnezT8SltuX16
    550164U,	// BtnezX16
    0U,	// BuildPairF64
    0U,	// BuildPairF64_64
    1937427U,	// CACHE
    1937402U,	// CACHEE
    1937402U,	// CACHEE_MM
    1937402U,	// CACHEE_MMR6
    1937427U,	// CACHE_MM
    1937427U,	// CACHE_MMR6
    1937427U,	// CACHE_R6
    19145U,	// CEIL_L_D64
    19145U,	// CEIL_L_D_MMR6
    23323U,	// CEIL_L_S
    23323U,	// CEIL_L_S_MMR6
    20320U,	// CEIL_W_D32
    20320U,	// CEIL_W_D64
    20320U,	// CEIL_W_D_MMR6
    20320U,	// CEIL_W_MM
    23655U,	// CEIL_W_S
    23655U,	// CEIL_W_S_MM
    23655U,	// CEIL_W_S_MMR6
    268452690U,	// CEQI_B
    268454497U,	// CEQI_D
    268456233U,	// CEQI_H
    268459986U,	// CEQI_W
    268452844U,	// CEQ_B
    268454809U,	// CEQ_D
    268456424U,	// CEQ_H
    268460262U,	// CEQ_W
    16458U,	// CFC1
    16458U,	// CFC1_MM
    17040U,	// CFCMSA
    268461485U,	// CINS
    268461441U,	// CINS32
    19790U,	// CLASS_D
    19790U,	// CLASS_D_MMR6
    23506U,	// CLASS_S
    23506U,	// CLASS_S_MMR6
    268452929U,	// CLEI_S_B
    268455069U,	// CLEI_S_D
    268456558U,	// CLEI_S_H
    268460549U,	// CLEI_S_W
    268453144U,	// CLEI_U_B
    268455536U,	// CLEI_U_D
    268456846U,	// CLEI_U_H
    268461017U,	// CLEI_U_W
    268452911U,	// CLE_S_B
    268455051U,	// CLE_S_D
    268456540U,	// CLE_S_H
    268460531U,	// CLE_S_W
    268453126U,	// CLE_U_B
    268455518U,	// CLE_U_D
    268456828U,	// CLE_U_H
    268460999U,	// CLE_U_W
    22700U,	// CLO
    22700U,	// CLO_MM
    22700U,	// CLO_MMR6
    22700U,	// CLO_R6
    268452949U,	// CLTI_S_B
    268455089U,	// CLTI_S_D
    268456578U,	// CLTI_S_H
    268460569U,	// CLTI_S_W
    268453164U,	// CLTI_U_B
    268455556U,	// CLTI_U_D
    268456866U,	// CLTI_U_H
    268461037U,	// CLTI_U_W
    268453017U,	// CLT_S_B
    268455167U,	// CLT_S_D
    268456666U,	// CLT_S_H
    268460697U,	// CLT_S_W
    268453244U,	// CLT_U_B
    268455646U,	// CLT_U_D
    268456956U,	// CLT_U_H
    268461127U,	// CLT_U_W
    25884U,	// CLZ
    25884U,	// CLZ_MM
    25884U,	// CLZ_MMR6
    25884U,	// CLZ_R6
    268453477U,	// CMPGDU_EQ_QB
    268453477U,	// CMPGDU_EQ_QB_MMR2
    268453382U,	// CMPGDU_LE_QB
    268453382U,	// CMPGDU_LE_QB_MMR2
    268453596U,	// CMPGDU_LT_QB
    268453596U,	// CMPGDU_LT_QB_MMR2
    268453491U,	// CMPGU_EQ_QB
    268453491U,	// CMPGU_EQ_QB_MM
    268453396U,	// CMPGU_LE_QB
    268453396U,	// CMPGU_LE_QB_MM
    268453610U,	// CMPGU_LT_QB
    268453610U,	// CMPGU_LT_QB_MM
    18048U,	// CMPU_EQ_QB
    18048U,	// CMPU_EQ_QB_MM
    17953U,	// CMPU_LE_QB
    17953U,	// CMPU_LE_QB_MM
    18167U,	// CMPU_LT_QB
    18167U,	// CMPU_LT_QB_MM
    268454359U,	// CMP_AF_D_MMR6
    268458695U,	// CMP_AF_S_MMR6
    268454798U,	// CMP_EQ_D
    268454798U,	// CMP_EQ_D_MMR6
    21773U,	// CMP_EQ_PH
    21773U,	// CMP_EQ_PH_MM
    268458893U,	// CMP_EQ_S
    268458893U,	// CMP_EQ_S_MMR6
    268454359U,	// CMP_F_D
    268458695U,	// CMP_F_S
    268454203U,	// CMP_LE_D
    268454203U,	// CMP_LE_D_MMR6
    21669U,	// CMP_LE_PH
    21669U,	// CMP_LE_PH_MM
    268458616U,	// CMP_LE_S
    268458616U,	// CMP_LE_S_MMR6
    268455289U,	// CMP_LT_D
    268455289U,	// CMP_LT_D_MMR6
    21942U,	// CMP_LT_PH
    21942U,	// CMP_LT_PH_MM
    268458988U,	// CMP_LT_S
    268458988U,	// CMP_LT_S_MMR6
    268454377U,	// CMP_SAF_D
    268454377U,	// CMP_SAF_D_MMR6
    268458705U,	// CMP_SAF_S
    268458705U,	// CMP_SAF_S_MMR6
    268454825U,	// CMP_SEQ_D
    268454825U,	// CMP_SEQ_D_MMR6
    268458912U,	// CMP_SEQ_S
    268458912U,	// CMP_SEQ_S_MMR6
    268454240U,	// CMP_SLE_D
    268454240U,	// CMP_SLE_D_MMR6
    268458645U,	// CMP_SLE_S
    268458645U,	// CMP_SLE_S_MMR6
    268455316U,	// CMP_SLT_D
    268455316U,	// CMP_SLT_D_MMR6
    268459007U,	// CMP_SLT_S
    268459007U,	// CMP_SLT_S_MMR6
    268454873U,	// CMP_SUEQ_D
    268454873U,	// CMP_SUEQ_D_MMR6
    268458943U,	// CMP_SUEQ_S
    268458943U,	// CMP_SUEQ_S_MMR6
    268454288U,	// CMP_SULE_D
    268454288U,	// CMP_SULE_D_MMR6
    268458676U,	// CMP_SULE_S
    268458676U,	// CMP_SULE_S_MMR6
    268455364U,	// CMP_SULT_D
    268455364U,	// CMP_SULT_D_MMR6
    268459038U,	// CMP_SULT_S
    268459038U,	// CMP_SULT_S_MMR6
    268454746U,	// CMP_SUN_D
    268454746U,	// CMP_SUN_D_MMR6
    268458857U,	// CMP_SUN_S
    268458857U,	// CMP_SUN_S_MMR6
    268454853U,	// CMP_UEQ_D
    268454853U,	// CMP_UEQ_D_MMR6
    268458932U,	// CMP_UEQ_S
    268458932U,	// CMP_UEQ_S_MMR6
    268454268U,	// CMP_ULE_D
    268454268U,	// CMP_ULE_D_MMR6
    268458665U,	// CMP_ULE_S
    268458665U,	// CMP_ULE_S_MMR6
    268455344U,	// CMP_ULT_D
    268455344U,	// CMP_ULT_D_MMR6
    268459027U,	// CMP_ULT_S
    268459027U,	// CMP_ULT_S_MMR6
    268454728U,	// CMP_UN_D
    268454728U,	// CMP_UN_D_MMR6
    268458847U,	// CMP_UN_S
    268458847U,	// CMP_UN_S_MMR6
    9864U,	// CONSTPOOL_ENTRY
    0U,	// COPY_FD_PSEUDO
    0U,	// COPY_FW_PSEUDO
    1610630336U,	// COPY_S_B
    1610632508U,	// COPY_S_D
    1610633996U,	// COPY_S_H
    1610638049U,	// COPY_S_W
    1610630551U,	// COPY_U_B
    1610634263U,	// COPY_U_H
    1610638456U,	// COPY_U_W
    10518629U,	// CTC1
    10518629U,	// CTC1_MM
    17048U,	// CTCMSA
    23125U,	// CVT_D32_S
    24238U,	// CVT_D32_W
    24238U,	// CVT_D32_W_MM
    22312U,	// CVT_D64_L
    23125U,	// CVT_D64_S
    24238U,	// CVT_D64_W
    22312U,	// CVT_D_L_MMR6
    23125U,	// CVT_D_S_MM
    23125U,	// CVT_D_S_MMR6
    24238U,	// CVT_D_W_MMR6
    19166U,	// CVT_L_D64
    19166U,	// CVT_L_D64_MM
    19166U,	// CVT_L_D_MMR6
    23344U,	// CVT_L_S
    23344U,	// CVT_L_S_MM
    23344U,	// CVT_L_S_MMR6
    19513U,	// CVT_S_D32
    19513U,	// CVT_S_D32_MM
    19513U,	// CVT_S_D64
    19513U,	// CVT_S_D_MMR6
    22321U,	// CVT_S_L
    22321U,	// CVT_S_L_MMR6
    24993U,	// CVT_S_W
    24993U,	// CVT_S_W_MM
    24993U,	// CVT_S_W_MMR6
    20341U,	// CVT_W_D32
    20341U,	// CVT_W_D64
    20341U,	// CVT_W_D_MMR6
    20341U,	// CVT_W_MM
    23676U,	// CVT_W_S
    23676U,	// CVT_W_S_MM
    23676U,	// CVT_W_S_MMR6
    19334U,	// C_EQ_D32
    19334U,	// C_EQ_D64
    23429U,	// C_EQ_S
    18896U,	// C_F_D32
    18896U,	// C_F_D64
    23232U,	// C_F_S
    18739U,	// C_LE_D32
    18739U,	// C_LE_D64
    23152U,	// C_LE_S
    19825U,	// C_LT_D32
    19825U,	// C_LT_D64
    23524U,	// C_LT_S
    18730U,	// C_NGE_D32
    18730U,	// C_NGE_D64
    23143U,	// C_NGE_S
    18765U,	// C_NGLE_D32
    18765U,	// C_NGLE_D64
    23170U,	// C_NGLE_S
    19182U,	// C_NGL_D32
    19182U,	// C_NGL_D64
    23360U,	// C_NGL_S
    19816U,	// C_NGT_D32
    19816U,	// C_NGT_D64
    23515U,	// C_NGT_S
    18775U,	// C_OLE_D32
    18775U,	// C_OLE_D64
    23180U,	// C_OLE_S
    19851U,	// C_OLT_D32
    19851U,	// C_OLT_D64
    23542U,	// C_OLT_S
    19360U,	// C_SEQ_D32
    19360U,	// C_SEQ_D64
    23447U,	// C_SEQ_S
    18966U,	// C_SF_D32
    18966U,	// C_SF_D64
    23278U,	// C_SF_S
    19388U,	// C_UEQ_D32
    19388U,	// C_UEQ_D64
    23467U,	// C_UEQ_S
    18803U,	// C_ULE_D32
    18803U,	// C_ULE_D64
    23200U,	// C_ULE_S
    19879U,	// C_ULT_D32
    19879U,	// C_ULT_D64
    23562U,	// C_ULT_S
    19264U,	// C_UN_D32
    19264U,	// C_UN_D64
    23383U,	// C_UN_S
    22764U,	// CmpRxRy16
    1879070441U,	// CmpiRxImm16
    22249U,	// CmpiRxImmX16
    550295U,	// Constant32
    268455860U,	// DADD
    268459357U,	// DADDIU_MM64R6
    268459305U,	// DADDU_MM64R6
    268455860U,	// DADD_MM64R6
    268457637U,	// DADDi
    268459357U,	// DADDiu
    268459305U,	// DADDu
    8689348U,	// DAHI
    8689348U,	// DAHI_MM64R6
    268458141U,	// DALIGN
    268458141U,	// DALIGN_MM64R6
    8689409U,	// DATI
    8689409U,	// DATI_MM64R6
    268457747U,	// DAUI
    268457747U,	// DAUI_MM64R6
    22724U,	// DBITSWAP
    22699U,	// DCLO
    22699U,	// DCLO_MM64R6
    22699U,	// DCLO_R6
    25883U,	// DCLZ
    25883U,	// DCLZ_MM64R6
    25883U,	// DCLZ_R6
    268459539U,	// DDIV
    268459447U,	// DDIVU
    268459447U,	// DDIVU_MM64R6
    268459539U,	// DDIV_MM64R6
    9890U,	// DERET
    9890U,	// DERET_MM
    9890U,	// DERET_MMR6
    268461503U,	// DEXT
    268461478U,	// DEXTM
    268458116U,	// DEXTM_MM64R6
    268461516U,	// DEXTU
    268459440U,	// DEXTU_MM64R6
    268459273U,	// DEXT_MM64R6
    546472U,	// DI
    268461491U,	// DINS
    268461471U,	// DINSM
    268461471U,	// DINSM_MM64R6
    268461509U,	// DINSU
    268461509U,	// DINSU_MM64R6
    268461491U,	// DINS_MM64R6
    268459540U,	// DIV
    268459448U,	// DIVU
    268459448U,	// DIVU_MMR6
    268459540U,	// DIV_MMR6
    268453038U,	// DIV_S_B
    268455210U,	// DIV_S_D
    268456687U,	// DIV_S_H
    268460740U,	// DIV_S_W
    268453253U,	// DIV_U_B
    268455677U,	// DIV_U_D
    268456965U,	// DIV_U_H
    268461158U,	// DIV_U_W
    546472U,	// DI_MM
    546472U,	// DI_MMR6
    268452490U,	// DLSA
    268452490U,	// DLSA_R6
    268451849U,	// DMFC0
    268451849U,	// DMFC0_MM64R6
    16464U,	// DMFC1
    16464U,	// DMFC1_MM64R6
    268452114U,	// DMFC2
    16658U,	// DMFC2_MM64R6
    50348306U,	// DMFC2_OCTEON
    268455905U,	// DMOD
    268459319U,	// DMODU
    268459319U,	// DMODU_MM64R6
    268455905U,	// DMOD_MM64R6
    2208333854U,	// DMTC0
    2208333854U,	// DMTC0_MM64R6
    10518635U,	// DMTC1
    10518635U,	// DMTC1_MM64R6
    2208334119U,	// DMTC2
    10518823U,	// DMTC2_MM64R6
    50348327U,	// DMTC2_OCTEON
    268457624U,	// DMUH
    268459350U,	// DMUHU
    268459350U,	// DMUHU_MM64R6
    268457624U,	// DMUH_MM64R6
    268458058U,	// DMUL
    23799U,	// DMULT
    23976U,	// DMULTu
    268459394U,	// DMULU
    268459394U,	// DMULU_MM64R6
    268458058U,	// DMUL_MM64R6
    268458058U,	// DMUL_R6
    268455118U,	// DOTP_S_D
    268456607U,	// DOTP_S_H
    268460608U,	// DOTP_S_W
    268455585U,	// DOTP_U_D
    268456895U,	// DOTP_U_H
    268461066U,	// DOTP_U_W
    285232247U,	// DPADD_S_D
    285233736U,	// DPADD_S_H
    285237727U,	// DPADD_S_W
    285232714U,	// DPADD_U_D
    285234024U,	// DPADD_U_H
    285238195U,	// DPADD_U_W
    268457477U,	// DPAQX_SA_W_PH
    268457477U,	// DPAQX_SA_W_PH_MMR2
    268457560U,	// DPAQX_S_W_PH
    268457560U,	// DPAQX_S_W_PH_MMR2
    268460068U,	// DPAQ_SA_L_W
    268460068U,	// DPAQ_SA_L_W_MM
    268457519U,	// DPAQ_S_W_PH
    268457519U,	// DPAQ_S_W_PH_MM
    268457812U,	// DPAU_H_QBL
    268457812U,	// DPAU_H_QBL_MM
    268458353U,	// DPAU_H_QBR
    268458353U,	// DPAU_H_QBR_MM
    268457598U,	// DPAX_W_PH
    268457598U,	// DPAX_W_PH_MMR2
    268457467U,	// DPA_W_PH
    268457467U,	// DPA_W_PH_MMR2
    22769U,	// DPOP
    268457492U,	// DPSQX_SA_W_PH
    268457492U,	// DPSQX_SA_W_PH_MMR2
    268457574U,	// DPSQX_S_W_PH
    268457574U,	// DPSQX_S_W_PH_MMR2
    268460081U,	// DPSQ_SA_L_W
    268460081U,	// DPSQ_SA_L_W_MM
    268457547U,	// DPSQ_S_W_PH
    268457547U,	// DPSQ_S_W_PH_MM
    285232214U,	// DPSUB_S_D
    285233715U,	// DPSUB_S_H
    285237694U,	// DPSUB_S_W
    285232681U,	// DPSUB_U_D
    285234003U,	// DPSUB_U_H
    285238162U,	// DPSUB_U_W
    268457824U,	// DPSU_H_QBL
    268457824U,	// DPSU_H_QBL_MM
    268458365U,	// DPSU_H_QBR
    268458365U,	// DPSU_H_QBR_MM
    268457609U,	// DPSX_W_PH
    268457609U,	// DPSX_W_PH_MMR2
    268457588U,	// DPS_W_PH
    268457588U,	// DPS_W_PH_MMR2
    268458007U,	// DROL
    268458007U,	// DROLImm
    268458505U,	// DROR
    268458505U,	// DRORImm
    268458532U,	// DROTR
    268452093U,	// DROTR32
    268452093U,	// DROTR32_MM64R6
    268459583U,	// DROTRV
    268459583U,	// DROTRV_MM64R6
    268458532U,	// DROTR_MM64R6
    21594U,	// DSBH
    21594U,	// DSBH_MM64R6
    25960U,	// DSDIV
    268459539U,	// DSDivMacro
    20416U,	// DSHD
    20416U,	// DSHD_MM64R6
    268458001U,	// DSLL
    268452063U,	// DSLL32
    268452063U,	// DSLL32_MM64R6
    2415941649U,	// DSLL64_32
    268459545U,	// DSLLV
    268459545U,	// DSLLV_MM64R6
    268458001U,	// DSLL_MM64R6
    268452484U,	// DSRA
    268452045U,	// DSRA32
    268452045U,	// DSRA32_MM64R6
    268459524U,	// DSRAV
    268459524U,	// DSRAV_MM64R6
    268452484U,	// DSRA_MM64R6
    268458019U,	// DSRL
    268452071U,	// DSRL32
    268452071U,	// DSRL32_MM64R6
    268459552U,	// DSRLV
    268459552U,	// DSRLV_MM64R6
    268458019U,	// DSRL_MM64R6
    268453711U,	// DSUB
    268459284U,	// DSUBU_MM64R6
    268453711U,	// DSUB_MM64R6
    268459284U,	// DSUBu
    25946U,	// DUDIV
    268459447U,	// DUDivMacro
    547150U,	// DVP_MMR6
    25961U,	// DivRxRy16
    25947U,	// DivuRxRy16
    9833U,	// EHB
    9833U,	// EHB_MM
    9833U,	// EHB_MMR6
    546484U,	// EI
    546484U,	// EI_MM
    546484U,	// EI_MMR6
    9891U,	// ERET
    9837U,	// ERETNC
    9837U,	// ERETNC_MMR6
    9891U,	// ERET_MM
    9891U,	// ERET_MMR6
    0U,	// ERet
    547155U,	// EVP_MMR6
    268461504U,	// EXT
    268458312U,	// EXTP
    268458197U,	// EXTPDP
    268459567U,	// EXTPDPV
    268459567U,	// EXTPDPV_MM
    268458197U,	// EXTPDP_MM
    268459576U,	// EXTPV
    268459576U,	// EXTPV_MM
    268458312U,	// EXTP_MM
    268460801U,	// EXTRV_RS_W
    268460801U,	// EXTRV_RS_W_MM
    268460355U,	// EXTRV_R_W
    268460355U,	// EXTRV_R_W_MM
    268456696U,	// EXTRV_S_H
    268456696U,	// EXTRV_S_H_MM
    268461238U,	// EXTRV_W
    268461238U,	// EXTRV_W_MM
    268460790U,	// EXTR_RS_W
    268460790U,	// EXTR_RS_W_MM
    268460334U,	// EXTR_R_W
    268460334U,	// EXTR_R_W_MM
    268456627U,	// EXTR_S_H
    268456627U,	// EXTR_S_H_MM
    268460433U,	// EXTR_W
    268460433U,	// EXTR_W_MM
    268461497U,	// EXTS
    268461449U,	// EXTS32
    268461504U,	// EXT_MM
    268459274U,	// EXT_MMR6
    0U,	// ExtractElementF64
    0U,	// ExtractElementF64_64
    0U,	// FABS_D
    19782U,	// FABS_D32
    19782U,	// FABS_D64
    19782U,	// FABS_MM
    23499U,	// FABS_S
    23499U,	// FABS_S_MM
    0U,	// FABS_W
    268454135U,	// FADD_D
    268454136U,	// FADD_D32
    268454136U,	// FADD_D64
    285231352U,	// FADD_D_MMR6
    268454136U,	// FADD_MM
    268458592U,	// FADD_S
    268458592U,	// FADD_S_MM
    285235808U,	// FADD_S_MMR6
    268459703U,	// FADD_W
    268454369U,	// FCAF_D
    268459822U,	// FCAF_W
    268454808U,	// FCEQ_D
    268460261U,	// FCEQ_W
    19789U,	// FCLASS_D
    25357U,	// FCLASS_W
    268454213U,	// FCLE_D
    268459745U,	// FCLE_W
    268455299U,	// FCLT_D
    268460840U,	// FCLT_W
    2483699U,	// FCMP_D32
    2483699U,	// FCMP_D32_MM
    2483699U,	// FCMP_D64
    2745843U,	// FCMP_S32
    2745843U,	// FCMP_S32_MM
    268454309U,	// FCNE_D
    268459779U,	// FCNE_W
    268454918U,	// FCOR_D
    268460390U,	// FCOR_W
    268454864U,	// FCUEQ_D
    268460277U,	// FCUEQ_W
    268454279U,	// FCULE_D
    268459761U,	// FCULE_W
    268455355U,	// FCULT_D
    268460856U,	// FCULT_W
    268454325U,	// FCUNE_D
    268459795U,	// FCUNE_W
    268454738U,	// FCUN_D
    268460167U,	// FCUN_W
    268455731U,	// FDIV_D
    268455732U,	// FDIV_D32
    268455732U,	// FDIV_D64
    285232948U,	// FDIV_D_MMR6
    268455732U,	// FDIV_MM
    268459075U,	// FDIV_S
    268459075U,	// FDIV_S_MM
    285236291U,	// FDIV_S_MMR6
    268461222U,	// FDIV_W
    268456354U,	// FEXDO_H
    268460183U,	// FEXDO_W
    268454022U,	// FEXP2_D
    0U,	// FEXP2_D_1_PSEUDO
    268459606U,	// FEXP2_W
    0U,	// FEXP2_W_1_PSEUDO
    19206U,	// FEXUPL_D
    24653U,	// FEXUPL_W
    19478U,	// FEXUPR_D
    24950U,	// FEXUPR_W
    19720U,	// FFINT_S_D
    25250U,	// FFINT_S_W
    20199U,	// FFINT_U_D
    25680U,	// FFINT_U_W
    19216U,	// FFQL_D
    24663U,	// FFQL_W
    19488U,	// FFQR_D
    24960U,	// FFQR_W
    17349U,	// FILL_B
    19191U,	// FILL_D
    0U,	// FILL_FD_PSEUDO
    0U,	// FILL_FW_PSEUDO
    20859U,	// FILL_H
    24638U,	// FILL_W
    18557U,	// FLOG2_D
    24141U,	// FLOG2_W
    19155U,	// FLOOR_L_D64
    19155U,	// FLOOR_L_D_MMR6
    23333U,	// FLOOR_L_S
    23333U,	// FLOOR_L_S_MMR6
    20330U,	// FLOOR_W_D32
    20330U,	// FLOOR_W_D64
    20330U,	// FLOOR_W_D_MMR6
    20330U,	// FLOOR_W_MM
    23665U,	// FLOOR_W_S
    23665U,	// FLOOR_W_S_MM
    23665U,	// FLOOR_W_S_MMR6
    285231359U,	// FMADD_D
    285236927U,	// FMADD_W
    268454060U,	// FMAX_A_D
    268459644U,	// FMAX_A_W
    268455806U,	// FMAX_D
    268461247U,	// FMAX_W
    268454040U,	// FMIN_A_D
    268459624U,	// FMIN_A_W
    268454712U,	// FMIN_D
    268460159U,	// FMIN_W
    20291U,	// FMOV_D32
    20291U,	// FMOV_D32_MM
    20291U,	// FMOV_D64
    20291U,	// FMOV_D_MMR6
    23626U,	// FMOV_S
    23626U,	// FMOV_S_MM
    23626U,	// FMOV_S_MMR6
    285231317U,	// FMSUB_D
    285236885U,	// FMSUB_W
    268454696U,	// FMUL_D
    268454697U,	// FMUL_D32
    268454697U,	// FMUL_D64
    285231913U,	// FMUL_D_MMR6
    268454697U,	// FMUL_MM
    268458825U,	// FMUL_S
    268458825U,	// FMUL_S_MM
    285236041U,	// FMUL_S_MMR6
    268460143U,	// FMUL_W
    18983U,	// FNEG_D32
    18983U,	// FNEG_D64
    18983U,	// FNEG_D_MMR6
    18983U,	// FNEG_MM
    23294U,	// FNEG_S
    23294U,	// FNEG_S_MM
    23294U,	// FNEG_S_MMR6
    19317U,	// FRCP_D
    24736U,	// FRCP_W
    19937U,	// FRINT_D
    25426U,	// FRINT_W
    19965U,	// FRSQRT_D
    25454U,	// FRSQRT_W
    268454388U,	// FSAF_D
    268459830U,	// FSAF_W
    268454836U,	// FSEQ_D
    268460269U,	// FSEQ_W
    268454251U,	// FSLE_D
    268459753U,	// FSLE_W
    268455327U,	// FSLT_D
    268460848U,	// FSLT_W
    268454317U,	// FSNE_D
    268459787U,	// FSNE_W
    268454926U,	// FSOR_D
    268460398U,	// FSOR_W
    19956U,	// FSQRT_D
    19957U,	// FSQRT_D32
    19957U,	// FSQRT_D64
    19957U,	// FSQRT_MM
    23603U,	// FSQRT_S
    23603U,	// FSQRT_S_MM
    25445U,	// FSQRT_W
    268454093U,	// FSUB_D
    268454094U,	// FSUB_D32
    268454094U,	// FSUB_D64
    285231310U,	// FSUB_D_MMR6
    268454094U,	// FSUB_MM
    268458574U,	// FSUB_S
    268458574U,	// FSUB_S_MM
    285235790U,	// FSUB_S_MMR6
    268459661U,	// FSUB_W
    268454885U,	// FSUEQ_D
    268460286U,	// FSUEQ_W
    268454300U,	// FSULE_D
    268459770U,	// FSULE_W
    268455376U,	// FSULT_D
    268460865U,	// FSULT_W
    268454334U,	// FSUNE_D
    268459804U,	// FSUNE_W
    268454757U,	// FSUN_D
    268460175U,	// FSUN_W
    19731U,	// FTINT_S_D
    25261U,	// FTINT_S_W
    20210U,	// FTINT_U_D
    25691U,	// FTINT_U_W
    268456431U,	// FTQ_H
    268460295U,	// FTQ_W
    19553U,	// FTRUNC_S_D
    25033U,	// FTRUNC_S_W
    20020U,	// FTRUNC_U_D
    25501U,	// FTRUNC_U_W
    2701154016U,	// GotPrologue16
    268455021U,	// HADD_S_D
    268456510U,	// HADD_S_H
    268460501U,	// HADD_S_W
    268455488U,	// HADD_U_D
    268456798U,	// HADD_U_H
    268460969U,	// HADD_U_W
    268454988U,	// HSUB_S_D
    268456489U,	// HSUB_S_H
    268460468U,	// HSUB_S_W
    268455455U,	// HSUB_U_D
    268456777U,	// HSUB_U_H
    268460936U,	// HSUB_U_W
    268453308U,	// ILVEV_B
    268455722U,	// ILVEV_D
    268457020U,	// ILVEV_H
    268461213U,	// ILVEV_W
    268452836U,	// ILVL_B
    268454704U,	// ILVL_D
    268456346U,	// ILVL_H
    268460151U,	// ILVL_W
    268452588U,	// ILVOD_B
    268454177U,	// ILVOD_D
    268456148U,	// ILVOD_H
    268459736U,	// ILVOD_W
    268452884U,	// ILVR_B
    268454961U,	// ILVR_D
    268456471U,	// ILVR_H
    268460441U,	// ILVR_W
    268461486U,	// INS
    70010083U,	// INSERT_B
    0U,	// INSERT_B_VIDX64_PSEUDO
    0U,	// INSERT_B_VIDX_PSEUDO
    78401002U,	// INSERT_D
    0U,	// INSERT_D_VIDX64_PSEUDO
    0U,	// INSERT_D_VIDX_PSEUDO
    0U,	// INSERT_FD_PSEUDO
    0U,	// INSERT_FD_VIDX64_PSEUDO
    0U,	// INSERT_FD_VIDX_PSEUDO
    0U,	// INSERT_FW_PSEUDO
    0U,	// INSERT_FW_VIDX64_PSEUDO
    0U,	// INSERT_FW_VIDX_PSEUDO
    86790959U,	// INSERT_H
    0U,	// INSERT_H_VIDX64_PSEUDO
    0U,	// INSERT_H_VIDX_PSEUDO
    95183707U,	// INSERT_W
    0U,	// INSERT_W_VIDX64_PSEUDO
    0U,	// INSERT_W_VIDX_PSEUDO
    16801351U,	// INSV
    103564021U,	// INSVE_B
    111954375U,	// INSVE_D
    120344797U,	// INSVE_H
    128737061U,	// INSVE_W
    16801351U,	// INSV_MM
    268461486U,	// INS_MM
    268459205U,	// INS_MMR6
    546590U,	// J
    546623U,	// JAL
    23038U,	// JALR
    547326U,	// JALR16_MM
    23038U,	// JALR64
    0U,	// JALR64Pseudo
    547326U,	// JALRC16_MMR6
    17887U,	// JALRC_HB_MMR6
    18426U,	// JALRC_MMR6
    0U,	// JALRPseudo
    541171U,	// JALRS16_MM
    23754U,	// JALRS_MM
    17904U,	// JALR_HB
    23038U,	// JALR_MM
    548013U,	// JALS_MM
    550121U,	// JALX
    550121U,	// JALX_MM
    546623U,	// JAL_MM
    18305U,	// JIALC
    18305U,	// JIALC64
    18305U,	// JIALC_MMR6
    18294U,	// JIC
    18294U,	// JIC64
    18294U,	// JIC_MMR6
    547322U,	// JR
    541158U,	// JR16_MM
    547322U,	// JR64
    547133U,	// JRADDIUSP
    542709U,	// JRC16_MM
    541052U,	// JRC16_MMR6
    547121U,	// JRCADDIUSP_MMR6
    542185U,	// JR_HB
    542185U,	// JR_HB_R6
    547322U,	// JR_MM
    546590U,	// J_MM
    3282751U,	// Jal16
    3544895U,	// JalB16
    546623U,	// JalOneReg
    22335U,	// JalTwoReg
    9825U,	// JrRa16
    9816U,	// JrcRa16
    550222U,	// JrcRx16
    540673U,	// JumpLinkReg16
    134235641U,	// LB
    134235641U,	// LB64
    134238187U,	// LBE
    134238187U,	// LBE_MM
    134238187U,	// LBE_MMR6
    134234627U,	// LBU16_MM
    134238293U,	// LBUE_MMR6
    2969593071U,	// LBUX
    2969593071U,	// LBUX_MM
    134241551U,	// LBU_MMR6
    134235641U,	// LB_MM
    134235641U,	// LB_MMR6
    134241551U,	// LBu
    134241551U,	// LBu64
    134238293U,	// LBuE
    134238293U,	// LBuE_MM
    134241551U,	// LBu_MM
    134238151U,	// LD
    134234174U,	// LDC1
    134234174U,	// LDC164
    134234174U,	// LDC1_D64_MMR6
    134234174U,	// LDC1_MM
    134234374U,	// LDC2
    134234374U,	// LDC2_MMR6
    134234374U,	// LDC2_R6
    134234447U,	// LDC3
    17175U,	// LDI_B
    18999U,	// LDI_D
    20735U,	// LDI_H
    24488U,	// LDI_W
    134240155U,	// LDL
    18372U,	// LDPC
    18372U,	// LDPC_MM64R6
    134240696U,	// LDR
    2969583742U,	// LDXC1
    2969583742U,	// LDXC164
    134234845U,	// LD_B
    134236434U,	// LD_D
    134238405U,	// LD_H
    134238151U,	// LD_MM64R6
    134241993U,	// LD_W
    25189726U,	// LEA_ADDiu
    25189725U,	// LEA_ADDiu64
    25189726U,	// LEA_ADDiu_MM
    134239340U,	// LH
    134239340U,	// LH64
    134238234U,	// LHE
    134238234U,	// LHE_MM
    134234650U,	// LHU16_MM
    2969593060U,	// LHX
    2969593060U,	// LHX_MM
    134239340U,	// LH_MM
    134241617U,	// LHu
    134241617U,	// LHu64
    134238299U,	// LHuE
    134238299U,	// LHuE_MM
    134241617U,	// LHu_MM
    16818U,	// LI16_MM
    16818U,	// LI16_MMR6
    134240251U,	// LL
    134240251U,	// LL64
    134240251U,	// LL64_R6
    134238150U,	// LLD
    134238150U,	// LLD_MM64R6
    134238150U,	// LLD_R6
    134238249U,	// LLE
    134238249U,	// LLE_MM
    134238249U,	// LLE_MMR6
    134240251U,	// LL_MM
    134240251U,	// LL_R6
    134234119U,	// LOAD_ACC128
    134234119U,	// LOAD_ACC64
    134234119U,	// LOAD_ACC64DSP
    134240514U,	// LOAD_CCOND_DSP
    0U,	// LONG_BRANCH_ADDiu
    0U,	// LONG_BRANCH_DADDiu
    0U,	// LONG_BRANCH_LUi
    268452491U,	// LSA
    3280781963U,	// LSA_MMR6
    268452491U,	// LSA_R6
    50353945U,	// LUI_MMR6
    2969583756U,	// LUXC1
    2969583756U,	// LUXC164
    2969583756U,	// LUXC1_MM
    50353945U,	// LUi
    50353945U,	// LUi64
    50353945U,	// LUi_MM
    134243541U,	// LW
    134234657U,	// LW16_MM
    134243541U,	// LW64
    134234226U,	// LWC1
    134234226U,	// LWC1_MM
    134234414U,	// LWC2
    134234414U,	// LWC2_MMR6
    134234414U,	// LWC2_R6
    134234459U,	// LWC3
    134238311U,	// LWE
    134238311U,	// LWE_MM
    134238311U,	// LWE_MMR6
    134243541U,	// LWGP_MM
    134240350U,	// LWL
    134240350U,	// LWL64
    134238254U,	// LWLE
    134238254U,	// LWLE_MM
    134240350U,	// LWL_MM
    3817935U,	// LWM16_MM
    3817935U,	// LWM16_MMR6
    3817711U,	// LWM32_MM
    3823755U,	// LWM_MM
    18409U,	// LWPC
    18409U,	// LWPC_MMR6
    170328U,	// LWP_MM
    170328U,	// LWP_MMR6
    134240818U,	// LWR
    134240818U,	// LWR64
    134238281U,	// LWRE
    134238281U,	// LWRE_MM
    134240818U,	// LWR_MM
    134243541U,	// LWSP_MM
    18402U,	// LWUPC
    134241726U,	// LWU_MM
    134241726U,	// LWU_MM64R6
    2969593077U,	// LWX
    2969583770U,	// LWXC1
    2969583770U,	// LWXC1_MM
    2969590993U,	// LWXS_MM
    2969593077U,	// LWX_MM
    134243541U,	// LW_MM
    134243541U,	// LW_MMR6
    134241726U,	// LWu
    134235641U,	// LbRxRyOffMemX16
    134241551U,	// LbuRxRyOffMemX16
    134239340U,	// LhRxRyOffMemX16
    134241617U,	// LhuRxRyOffMemX16
    1879070432U,	// LiRxImm16
    22230U,	// LiRxImmAlignX16
    22240U,	// LiRxImmX16
    16969U,	// LoadAddrImm32
    16990U,	// LoadAddrImm64
    134234697U,	// LoadAddrReg32
    134234718U,	// LoadAddrReg64
    22240U,	// LoadImm32
    22244U,	// LoadImm64
    3957973U,	// LwConstant32
    536896725U,	// LwRxPcTcp16
    25813U,	// LwRxPcTcpX16
    134243541U,	// LwRxRyOffMemX16
    134243541U,	// LwRxSpImmX16
    20410U,	// MADD
    285231621U,	// MADDF_D
    285231621U,	// MADDF_D_MMR6
    285235941U,	// MADDF_S
    285235941U,	// MADDF_S_MMR6
    285233619U,	// MADDR_Q_H
    285237456U,	// MADDR_Q_W
    23856U,	// MADDU
    268459312U,	// MADDU_DSP
    268459312U,	// MADDU_DSP_MM
    23856U,	// MADDU_MM
    285230506U,	// MADDV_B
    285232920U,	// MADDV_D
    285234218U,	// MADDV_H
    285238411U,	// MADDV_W
    268454144U,	// MADD_D32
    268454144U,	// MADD_D32_MM
    268454144U,	// MADD_D64
    268455866U,	// MADD_DSP
    268455866U,	// MADD_DSP_MM
    20410U,	// MADD_MM
    285233589U,	// MADD_Q_H
    285237426U,	// MADD_Q_W
    268458591U,	// MADD_S
    268458591U,	// MADD_S_MM
    268457918U,	// MAQ_SA_W_PHL
    268457918U,	// MAQ_SA_W_PHL_MM
    268458434U,	// MAQ_SA_W_PHR
    268458434U,	// MAQ_SA_W_PHR_MM
    268457946U,	// MAQ_S_W_PHL
    268457946U,	// MAQ_S_W_PHL_MM
    268458462U,	// MAQ_S_W_PHR
    268458462U,	// MAQ_S_W_PHR_MM
    268454085U,	// MAXA_D
    268454085U,	// MAXA_D_MMR6
    268458564U,	// MAXA_S
    268458564U,	// MAXA_S_MMR6
    268452959U,	// MAXI_S_B
    268455099U,	// MAXI_S_D
    268456588U,	// MAXI_S_H
    268460579U,	// MAXI_S_W
    268453174U,	// MAXI_U_B
    268455566U,	// MAXI_U_D
    268456876U,	// MAXI_U_H
    268461047U,	// MAXI_U_W
    268452540U,	// MAX_A_B
    268454061U,	// MAX_A_D
    268456100U,	// MAX_A_H
    268459645U,	// MAX_A_W
    268455807U,	// MAX_D
    268455807U,	// MAX_D_MMR6
    268459141U,	// MAX_S
    268453047U,	// MAX_S_B
    268455219U,	// MAX_S_D
    268456707U,	// MAX_S_H
    268459141U,	// MAX_S_MMR6
    268460760U,	// MAX_S_W
    268453262U,	// MAX_U_B
    268455686U,	// MAX_U_D
    268456974U,	// MAX_U_H
    268461167U,	// MAX_U_W
    268451850U,	// MFC0
    268451850U,	// MFC0_MMR6
    16465U,	// MFC1
    16465U,	// MFC1_MM
    16465U,	// MFC1_MMR6
    268452115U,	// MFC2
    16659U,	// MFC2_MMR6
    268451856U,	// MFHC0_MMR6
    16471U,	// MFHC1_D32
    16471U,	// MFHC1_D32_MMR6
    16471U,	// MFHC1_D64
    16471U,	// MFHC1_D64_MMR6
    16471U,	// MFHC1_MM
    16665U,	// MFHC2_MMR6
    546506U,	// MFHI
    546506U,	// MFHI16_MM
    546506U,	// MFHI64
    22218U,	// MFHI_DSP
    22218U,	// MFHI_DSP_MM
    546506U,	// MFHI_MM
    546993U,	// MFLO
    546993U,	// MFLO16_MM
    546993U,	// MFLO64
    22705U,	// MFLO_DSP
    22705U,	// MFLO_DSP_MM
    546993U,	// MFLO_MM
    268454070U,	// MINA_D
    268454070U,	// MINA_D_MMR6
    268458556U,	// MINA_S
    268458556U,	// MINA_S_MMR6
    268452939U,	// MINI_S_B
    268455079U,	// MINI_S_D
    268456568U,	// MINI_S_H
    268460559U,	// MINI_S_W
    268453154U,	// MINI_U_B
    268455546U,	// MINI_U_D
    268456856U,	// MINI_U_H
    268461027U,	// MINI_U_W
    268452521U,	// MIN_A_B
    268454041U,	// MIN_A_D
    268456081U,	// MIN_A_H
    268459625U,	// MIN_A_W
    268454713U,	// MIN_D
    268454713U,	// MIN_D_MMR6
    268458832U,	// MIN_S
    268452969U,	// MIN_S_B
    268455109U,	// MIN_S_D
    268456598U,	// MIN_S_H
    268458832U,	// MIN_S_MMR6
    268460599U,	// MIN_S_W
    268453184U,	// MIN_U_B
    268455576U,	// MIN_U_D
    268456886U,	// MIN_U_H
    268461057U,	// MIN_U_W
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    268455906U,	// MOD
    268453709U,	// MODSUB
    268453709U,	// MODSUB_MM
    268459320U,	// MODU
    268459320U,	// MODU_MMR6
    268455906U,	// MOD_MMR6
    268452902U,	// MOD_S_B
    268455042U,	// MOD_S_D
    268456531U,	// MOD_S_H
    268460522U,	// MOD_S_W
    268453117U,	// MOD_U_B
    268455509U,	// MOD_U_D
    268456819U,	// MOD_U_H
    268460990U,	// MOD_U_W
    20577U,	// MOVE16_MM
    16796U,	// MOVE16_MMR6
    3548797149U,	// MOVEP_MM
    24010U,	// MOVE_V
    268454430U,	// MOVF_D32
    268454430U,	// MOVF_D32_MM
    268454430U,	// MOVF_D64
    268456061U,	// MOVF_I
    268456061U,	// MOVF_I64
    268456061U,	// MOVF_I_MM
    268458742U,	// MOVF_S
    268458742U,	// MOVF_S_MM
    268454765U,	// MOVN_I64_D64
    268458149U,	// MOVN_I64_I
    268458149U,	// MOVN_I64_I64
    268458868U,	// MOVN_I64_S
    268454765U,	// MOVN_I_D32
    268454765U,	// MOVN_I_D32_MM
    268454765U,	// MOVN_I_D64
    268458149U,	// MOVN_I_I
    268458149U,	// MOVN_I_I64
    268458149U,	// MOVN_I_MM
    268458868U,	// MOVN_I_S
    268458868U,	// MOVN_I_S_MM
    268455437U,	// MOVT_D32
    268455437U,	// MOVT_D32_MM
    268455437U,	// MOVT_D64
    268459267U,	// MOVT_I
    268459267U,	// MOVT_I64
    268459267U,	// MOVT_I_MM
    268459067U,	// MOVT_S
    268459067U,	// MOVT_S_MM
    268455847U,	// MOVZ_I64_D64
    268461378U,	// MOVZ_I64_I
    268461378U,	// MOVZ_I64_I64
    268459168U,	// MOVZ_I64_S
    268455847U,	// MOVZ_I_D32
    268455847U,	// MOVZ_I_D32_MM
    268455847U,	// MOVZ_I_D64
    268461378U,	// MOVZ_I_I
    268461378U,	// MOVZ_I_I64
    268461378U,	// MOVZ_I_MM
    268459168U,	// MOVZ_I_S
    268459168U,	// MOVZ_I_S_MM
    18261U,	// MSUB
    285231612U,	// MSUBF_D
    285231612U,	// MSUBF_D_MMR6
    285235932U,	// MSUBF_S
    285235932U,	// MSUBF_S_MMR6
    285233608U,	// MSUBR_Q_H
    285237445U,	// MSUBR_Q_W
    23835U,	// MSUBU
    268459291U,	// MSUBU_DSP
    268459291U,	// MSUBU_DSP_MM
    23835U,	// MSUBU_MM
    285230497U,	// MSUBV_B
    285232911U,	// MSUBV_D
    285234209U,	// MSUBV_H
    285238402U,	// MSUBV_W
    268454102U,	// MSUB_D32
    268454102U,	// MSUB_D32_MM
    268454102U,	// MSUB_D64
    268453717U,	// MSUB_DSP
    268453717U,	// MSUB_DSP_MM
    18261U,	// MSUB_MM
    285233579U,	// MSUB_Q_H
    285237416U,	// MSUB_Q_W
    268458573U,	// MSUB_S
    268458573U,	// MSUB_S_MM
    2208333855U,	// MTC0
    2208333855U,	// MTC0_MMR6
    10518636U,	// MTC1
    10518636U,	// MTC1_MM
    10518636U,	// MTC1_MMR6
    2208334120U,	// MTC2
    10518824U,	// MTC2_MMR6
    2208333847U,	// MTHC0_MMR6
    10535006U,	// MTHC1_D32
    10535006U,	// MTHC1_D32_MMR6
    10535006U,	// MTHC1_D64
    10535006U,	// MTHC1_D64_MMR6
    10535006U,	// MTHC1_MM
    10518816U,	// MTHC2_MMR6
    546512U,	// MTHI
    546512U,	// MTHI64
    10524368U,	// MTHI_DSP
    10524368U,	// MTHI_DSP_MM
    546512U,	// MTHI_MM
    10524900U,	// MTHLIP
    10524900U,	// MTHLIP_MM
    547006U,	// MTLO
    547006U,	// MTLO64
    10524862U,	// MTLO_DSP
    10524862U,	// MTLO_DSP_MM
    547006U,	// MTLO_MM
    540715U,	// MTM0
    540840U,	// MTM1
    540986U,	// MTM2
    540721U,	// MTP0
    540846U,	// MTP1
    540992U,	// MTP2
    268457625U,	// MUH
    268459351U,	// MUHU
    268459351U,	// MUHU_MMR6
    268457625U,	// MUH_MMR6
    268458059U,	// MUL
    268457959U,	// MULEQ_S_W_PHL
    268457959U,	// MULEQ_S_W_PHL_MM
    268458475U,	// MULEQ_S_W_PHR
    268458475U,	// MULEQ_S_W_PHR_MM
    268457836U,	// MULEU_S_PH_QBL
    268457836U,	// MULEU_S_PH_QBL_MM
    268458377U,	// MULEU_S_PH_QBR
    268458377U,	// MULEU_S_PH_QBR_MM
    268457386U,	// MULQ_RS_PH
    268457386U,	// MULQ_RS_PH_MM
    268460779U,	// MULQ_RS_W
    268460779U,	// MULQ_RS_W_MMR2
    268457330U,	// MULQ_S_PH
    268457330U,	// MULQ_S_PH_MMR2
    268460638U,	// MULQ_S_W
    268460638U,	// MULQ_S_W_MMR2
    268456414U,	// MULR_Q_H
    268460251U,	// MULR_Q_W
    268457532U,	// MULSAQ_S_W_PH
    268457532U,	// MULSAQ_S_W_PH_MM
    268457507U,	// MULSA_W_PH
    268457507U,	// MULSA_W_PH_MMR2
    23800U,	// MULT
    268459433U,	// MULTU_DSP
    268459433U,	// MULTU_DSP_MM
    268459256U,	// MULT_DSP
    268459256U,	// MULT_DSP_MM
    23800U,	// MULT_MM
    23977U,	// MULTu
    23977U,	// MULTu_MM
    268459388U,	// MULU
    268459388U,	// MULU_MMR6
    268453317U,	// MULV_B
    268455739U,	// MULV_D
    268457029U,	// MULV_H
    268461230U,	// MULV_W
    268458059U,	// MUL_MM
    268458059U,	// MUL_MMR6
    268457203U,	// MUL_PH
    268457203U,	// MUL_PH_MMR2
    268456383U,	// MUL_Q_H
    268460220U,	// MUL_Q_W
    268458059U,	// MUL_R6
    268457298U,	// MUL_S_PH
    268457298U,	// MUL_S_PH_MMR2
    546506U,	// Mfhi16
    546993U,	// Mflo16
    20577U,	// Move32R16
    20577U,	// MoveR3216
    23800U,	// MultRxRy16
    142908664U,	// MultRxRyRz16
    23977U,	// MultuRxRy16
    142908841U,	// MultuRxRyRz16
    17100U,	// NLOC_B
    18663U,	// NLOC_D
    20660U,	// NLOC_H
    24222U,	// NLOC_W
    17108U,	// NLZC_B
    18671U,	// NLZC_D
    20668U,	// NLZC_H
    24230U,	// NLZC_W
    268454152U,	// NMADD_D32
    268454152U,	// NMADD_D32_MM
    268454152U,	// NMADD_D64
    268458590U,	// NMADD_S
    268458590U,	// NMADD_S_MM
    268454110U,	// NMSUB_D32
    268454110U,	// NMSUB_D32_MM
    268454110U,	// NMSUB_D64
    268458572U,	// NMSUB_S
    268458572U,	// NMSUB_S_MM
    0U,	// NOP
    268458500U,	// NOR
    268458500U,	// NOR64
    268452725U,	// NORI_B
    268458500U,	// NORImm
    268458500U,	// NOR_MM
    268458500U,	// NOR_MMR6
    268459482U,	// NOR_V
    0U,	// NOR_V_D_PSEUDO
    0U,	// NOR_V_H_PSEUDO
    0U,	// NOR_V_W_PSEUDO
    16892U,	// NOT16_MM
    16892U,	// NOT16_MMR6
    20611U,	// NegRxRy16
    23806U,	// NotRxRy16
    268458501U,	// OR
    9224685U,	// OR16_MM
    9224685U,	// OR16_MMR6
    268458501U,	// OR64
    268452726U,	// ORI_B
    268457724U,	// ORI_MMR6
    268458501U,	// OR_MM
    268458501U,	// OR_MMR6
    268459483U,	// OR_V
    0U,	// OR_V_D_PSEUDO
    0U,	// OR_V_H_PSEUDO
    0U,	// OR_V_W_PSEUDO
    268457724U,	// ORi
    268457724U,	// ORi64
    268457724U,	// ORi_MM
    16800261U,	// OrRxRxRy16
    268457192U,	// PACKRL_PH
    268457192U,	// PACKRL_PH_MM
    9844U,	// PAUSE
    9844U,	// PAUSE_MM
    9844U,	// PAUSE_MMR6
    268453299U,	// PCKEV_B
    268455713U,	// PCKEV_D
    268457011U,	// PCKEV_H
    268461204U,	// PCKEV_W
    268452579U,	// PCKOD_B
    268454168U,	// PCKOD_D
    268456139U,	// PCKOD_H
    268459727U,	// PCKOD_W
    17627U,	// PCNT_B
    19929U,	// PCNT_D
    21287U,	// PCNT_H
    25418U,	// PCNT_W
    268457156U,	// PICK_PH
    268457156U,	// PICK_PH_MM
    268453441U,	// PICK_QB
    268453441U,	// PICK_QB_MM
    22770U,	// POP
    22411U,	// PRECEQU_PH_QBL
    16973U,	// PRECEQU_PH_QBLA
    16973U,	// PRECEQU_PH_QBLA_MM
    22411U,	// PRECEQU_PH_QBL_MM
    22952U,	// PRECEQU_PH_QBR
    17011U,	// PRECEQU_PH_QBRA
    17011U,	// PRECEQU_PH_QBRA_MM
    22952U,	// PRECEQU_PH_QBR_MM
    22476U,	// PRECEQ_W_PHL
    22476U,	// PRECEQ_W_PHL_MM
    22992U,	// PRECEQ_W_PHR
    22992U,	// PRECEQ_W_PHR_MM
    22396U,	// PRECEU_PH_QBL
    16957U,	// PRECEU_PH_QBLA
    16957U,	// PRECEU_PH_QBLA_MM
    22396U,	// PRECEU_PH_QBL_MM
    22937U,	// PRECEU_PH_QBR
    16995U,	// PRECEU_PH_QBRA
    16995U,	// PRECEU_PH_QBRA_MM
    22937U,	// PRECEU_PH_QBR_MM
    268457108U,	// PRECRQU_S_QB_PH
    268457108U,	// PRECRQU_S_QB_PH_MM
    268459870U,	// PRECRQ_PH_W
    268459870U,	// PRECRQ_PH_W_MM
    268457081U,	// PRECRQ_QB_PH
    268457081U,	// PRECRQ_QB_PH_MM
    268459901U,	// PRECRQ_RS_PH_W
    268459901U,	// PRECRQ_RS_PH_W_MM
    268457095U,	// PRECR_QB_PH
    268457095U,	// PRECR_QB_PH_MMR2
    268459854U,	// PRECR_SRA_PH_W
    268459854U,	// PRECR_SRA_PH_W_MMR2
    268459883U,	// PRECR_SRA_R_PH_W
    268459883U,	// PRECR_SRA_R_PH_W_MMR2
    1937527U,	// PREF
    1937410U,	// PREFE
    1937410U,	// PREFE_MM
    1937410U,	// PREFE_MMR6
    151889117U,	// PREFX_MM
    1937527U,	// PREF_MM
    1937527U,	// PREF_MMR6
    1937527U,	// PREF_R6
    268455888U,	// PREPEND
    268455888U,	// PREPEND_MMR2
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    16391U,	// PseudoCVT_D32_W
    16391U,	// PseudoCVT_D64_L
    16391U,	// PseudoCVT_D64_W
    16391U,	// PseudoCVT_S_L
    16391U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    0U,	// PseudoIndirectBranch
    0U,	// PseudoIndirectBranch64
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMFHI
    0U,	// PseudoMFHI64
    0U,	// PseudoMFLO
    0U,	// PseudoMFLO64
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMTLOHI
    0U,	// PseudoMTLOHI64
    0U,	// PseudoMTLOHI_DSP
    0U,	// PseudoMULT
    0U,	// PseudoMULTu
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    0U,	// PseudoReturn
    0U,	// PseudoReturn64
    0U,	// PseudoSDIV
    0U,	// PseudoSELECTFP_F_D32
    0U,	// PseudoSELECTFP_F_D64
    0U,	// PseudoSELECTFP_F_I
    0U,	// PseudoSELECTFP_F_I64
    0U,	// PseudoSELECTFP_F_S
    0U,	// PseudoSELECTFP_T_D32
    0U,	// PseudoSELECTFP_T_D64
    0U,	// PseudoSELECTFP_T_I
    0U,	// PseudoSELECTFP_T_I64
    0U,	// PseudoSELECTFP_T_S
    0U,	// PseudoSELECT_D32
    0U,	// PseudoSELECT_D64
    0U,	// PseudoSELECT_I
    0U,	// PseudoSELECT_I64
    0U,	// PseudoSELECT_S
    268455754U,	// PseudoTRUNC_W_D
    268455754U,	// PseudoTRUNC_W_D32
    268459089U,	// PseudoTRUNC_W_S
    0U,	// PseudoUDIV
    18237U,	// RADDU_W_QB
    18237U,	// RADDU_W_QB_MM
    41965859U,	// RDDSP
    159406371U,	// RDDSP_MM
    23083U,	// RDHWR
    23083U,	// RDHWR64
    23083U,	// RDHWR_MM
    268458539U,	// RDHWR_MMR6
    23060U,	// RDPGPR_MMR6
    19325U,	// RECIP_D_MMR6
    23420U,	// RECIP_S_MMR6
    21991U,	// REPLV_PH
    21991U,	// REPLV_PH_MM
    18217U,	// REPLV_QB
    18217U,	// REPLV_QB_MM
    41964758U,	// REPL_PH
    41964758U,	// REPL_PH_MM
    167790163U,	// REPL_QB
    167790163U,	// REPL_QB_MM
    19938U,	// RINT_D
    19938U,	// RINT_D_MMR6
    23594U,	// RINT_S
    23594U,	// RINT_S_MMR6
    268458008U,	// ROL
    268458008U,	// ROLImm
    268458506U,	// ROR
    268458506U,	// RORImm
    268458533U,	// ROTR
    268459584U,	// ROTRV
    268459584U,	// ROTRV_MM
    268458533U,	// ROTR_MM
    19134U,	// ROUND_L_D64
    19134U,	// ROUND_L_D_MMR6
    23312U,	// ROUND_L_S
    23312U,	// ROUND_L_S_MMR6
    20309U,	// ROUND_W_D32
    20309U,	// ROUND_W_D64
    20309U,	// ROUND_W_D_MMR6
    20309U,	// ROUND_W_MM
    23644U,	// ROUND_W_S
    23644U,	// ROUND_W_S_MM
    23644U,	// ROUND_W_S_MMR6
    19966U,	// RSQRT_D_MMR6
    23602U,	// RSQRT_S_MMR6
    0U,	// Restore16
    0U,	// RestoreX16
    0U,	// RetRA
    0U,	// RetRA16
    268453008U,	// SAT_S_B
    268455158U,	// SAT_S_D
    268456657U,	// SAT_S_H
    268460688U,	// SAT_S_W
    268453235U,	// SAT_U_B
    268455637U,	// SAT_U_D
    268456947U,	// SAT_U_H
    268461118U,	// SAT_U_W
    134235977U,	// SB
    134234480U,	// SB16_MM
    134234480U,	// SB16_MMR6
    134235977U,	// SB64
    134238192U,	// SBE
    134238192U,	// SBE_MM
    134238192U,	// SBE_MMR6
    134235977U,	// SB_MM
    134235977U,	// SB_MMR6
    4229124U,	// SC
    4229124U,	// SC64
    4229124U,	// SC64_R6
    4231087U,	// SCD
    4231087U,	// SCD_R6
    4231157U,	// SCE
    4231157U,	// SCE_MM
    134238197U,	// SCE_MMR6
    4229124U,	// SC_MM
    4229124U,	// SC_R6
    134238183U,	// SD
    186574U,	// SDBBP
    82397U,	// SDBBP16_MM
    82397U,	// SDBBP16_MMR6
    596174U,	// SDBBP_MM
    186574U,	// SDBBP_MMR6
    186574U,	// SDBBP_R6
    134234180U,	// SDC1
    134234180U,	// SDC164
    134234180U,	// SDC1_D64_MMR6
    134234180U,	// SDC1_MM
    134234380U,	// SDC2
    134234380U,	// SDC2_MMR6
    134234380U,	// SDC2_R6
    134234453U,	// SDC3
    25961U,	// SDIV
    25961U,	// SDIV_MM
    0U,	// SDIV_MM_Pseudo
    134240160U,	// SDL
    134240701U,	// SDR
    2969583749U,	// SDXC1
    2969583749U,	// SDXC164
    134238183U,	// SD_MM64R6
    268459540U,	// SDivMacro
    17882U,	// SEB
    17882U,	// SEB64
    17882U,	// SEB_MM
    17882U,	// SEB_MMR6
    21606U,	// SEH
    21606U,	// SEH64
    21606U,	// SEH_MM
    21606U,	// SEH_MMR6
    268461351U,	// SELEQZ
    268461351U,	// SELEQZ64
    268455837U,	// SELEQZ_D
    268455837U,	// SELEQZ_D_MMR6
    268461351U,	// SELEQZ_MMR6
    268459158U,	// SELEQZ_S
    268459158U,	// SELEQZ_S_MMR6
    268461324U,	// SELNEZ
    268461324U,	// SELNEZ64
    268455820U,	// SELNEZ_D
    268455820U,	// SELNEZ_D_MMR6
    268461324U,	// SELNEZ_MMR6
    268459148U,	// SELNEZ_S
    268459148U,	// SELNEZ_S_MMR6
    285231847U,	// SEL_D
    285231847U,	// SEL_D_MMR6
    285236025U,	// SEL_S
    285236025U,	// SEL_S_MMR6
    268458343U,	// SEQ
    268457711U,	// SEQi
    134239892U,	// SH
    134234532U,	// SH16_MM
    134234532U,	// SH16_MMR6
    134239892U,	// SH64
    134238239U,	// SHE
    134238239U,	// SHE_MM
    134238239U,	// SHE_MMR6
    268452607U,	// SHF_B
    268456167U,	// SHF_H
    268459839U,	// SHF_W
    22711U,	// SHILO
    24103U,	// SHILOV
    24103U,	// SHILOV_MM
    22711U,	// SHILO_MM
    268457437U,	// SHLLV_PH
    268457437U,	// SHLLV_PH_MM
    268453663U,	// SHLLV_QB
    268453663U,	// SHLLV_QB_MM
    268457374U,	// SHLLV_S_PH
    268457374U,	// SHLLV_S_PH_MM
    268460749U,	// SHLLV_S_W
    268460749U,	// SHLLV_S_W_MM
    268457165U,	// SHLL_PH
    268457165U,	// SHLL_PH_MM
    268453450U,	// SHLL_QB
    268453450U,	// SHLL_QB_MM
    268457287U,	// SHLL_S_PH
    268457287U,	// SHLL_S_PH_MM
    268460589U,	// SHLL_S_W
    268460589U,	// SHLL_S_W_MM
    268457427U,	// SHRAV_PH
    268457427U,	// SHRAV_PH_MM
    268453653U,	// SHRAV_QB
    268453653U,	// SHRAV_QB_MMR2
    268457275U,	// SHRAV_R_PH
    268457275U,	// SHRAV_R_PH_MM
    268453551U,	// SHRAV_R_QB
    268453551U,	// SHRAV_R_QB_MMR2
    268460344U,	// SHRAV_R_W
    268460344U,	// SHRAV_R_W_MM
    268457072U,	// SHRA_PH
    268457072U,	// SHRA_PH_MM
    268453373U,	// SHRA_QB
    268453373U,	// SHRA_QB_MMR2
    268457240U,	// SHRA_R_PH
    268457240U,	// SHRA_R_PH_MM
    268453516U,	// SHRA_R_QB
    268453516U,	// SHRA_R_QB_MMR2
    268460302U,	// SHRA_R_W
    268460302U,	// SHRA_R_W_MM
    268457457U,	// SHRLV_PH
    268457457U,	// SHRLV_PH_MMR2
    268453683U,	// SHRLV_QB
    268453683U,	// SHRLV_QB_MM
    268457183U,	// SHRL_PH
    268457183U,	// SHRL_PH_MMR2
    268453468U,	// SHRL_QB
    268453468U,	// SHRL_QB_MM
    134239892U,	// SH_MM
    134239892U,	// SH_MMR6
    1627407126U,	// SLDI_B
    1627408950U,	// SLDI_D
    1627410686U,	// SLDI_H
    1627414439U,	// SLDI_W
    1627407068U,	// SLD_B
    1627408657U,	// SLD_D
    1627410628U,	// SLD_H
    1627414216U,	// SLD_W
    268458002U,	// SLL
    268452289U,	// SLL16_MM
    268452289U,	// SLL16_MMR6
    3758118930U,	// SLL64_32
    3758118930U,	// SLL64_64
    268452664U,	// SLLI_B
    268454471U,	// SLLI_D
    268456207U,	// SLLI_H
    268459960U,	// SLLI_W
    268459546U,	// SLLV
    268459546U,	// SLLV_MM
    268452813U,	// SLL_B
    268454655U,	// SLL_D
    268456323U,	// SLL_H
    268458002U,	// SLL_MM
    268458002U,	// SLL_MMR6
    268460102U,	// SLL_W
    268459245U,	// SLT
    268459245U,	// SLT64
    268459245U,	// SLT_MM
    268457735U,	// SLTi
    268457735U,	// SLTi64
    268457735U,	// SLTi_MM
    268459372U,	// SLTiu
    268459372U,	// SLTiu64
    268459372U,	// SLTiu_MM
    268459420U,	// SLTu
    268459420U,	// SLTu64
    268459420U,	// SLTu_MM
    268455999U,	// SNE
    268457656U,	// SNEi
    0U,	// SNZ_B_PSEUDO
    0U,	// SNZ_D_PSEUDO
    0U,	// SNZ_H_PSEUDO
    0U,	// SNZ_V_PSEUDO
    0U,	// SNZ_W_PSEUDO
    1610630031U,	// SPLATI_B
    1610631822U,	// SPLATI_D
    1610633558U,	// SPLATI_H
    1610637311U,	// SPLATI_W
    1610630346U,	// SPLAT_B
    1610632535U,	// SPLAT_D
    1610634006U,	// SPLAT_H
    1610638103U,	// SPLAT_W
    19957U,	// SQRT_D_MMR6
    23603U,	// SQRT_S_MMR6
    268452485U,	// SRA
    268452622U,	// SRAI_B
    268454446U,	// SRAI_D
    268456182U,	// SRAI_H
    268459935U,	// SRAI_W
    268452698U,	// SRARI_B
    268454505U,	// SRARI_D
    268456241U,	// SRARI_H
    268459994U,	// SRARI_W
    268452851U,	// SRAR_B
    268454894U,	// SRAR_D
    268456438U,	// SRAR_H
    268460366U,	// SRAR_W
    268459525U,	// SRAV
    268459525U,	// SRAV_MM
    268452549U,	// SRA_B
    268454078U,	// SRA_D
    268456109U,	// SRA_H
    268452485U,	// SRA_MM
    268459654U,	// SRA_W
    268458020U,	// SRL
    268452296U,	// SRL16_MM
    268452296U,	// SRL16_MMR6
    268452672U,	// SRLI_B
    268454479U,	// SRLI_D
    268456215U,	// SRLI_H
    268459968U,	// SRLI_W
    268452716U,	// SRLRI_B
    268454523U,	// SRLRI_D
    268456259U,	// SRLRI_H
    268460012U,	// SRLRI_W
    268452867U,	// SRLR_B
    268454910U,	// SRLR_D
    268456454U,	// SRLR_H
    268460382U,	// SRLR_W
    268459553U,	// SRLV
    268459553U,	// SRLV_MM
    268452820U,	// SRL_B
    268454680U,	// SRL_D
    268456330U,	// SRL_H
    268458020U,	// SRL_MM
    268460127U,	// SRL_W
    9873U,	// SSNOP
    9873U,	// SSNOP_MM
    9873U,	// SSNOP_MMR6
    134234119U,	// STORE_ACC128
    134234119U,	// STORE_ACC64
    134234119U,	// STORE_ACC64DSP
    134240530U,	// STORE_CCOND_DSP
    134235373U,	// ST_B
    134237703U,	// ST_D
    134239033U,	// ST_H
    134243192U,	// ST_W
    268453712U,	// SUB
    268457136U,	// SUBQH_PH
    268457136U,	// SUBQH_PH_MMR2
    268457251U,	// SUBQH_R_PH
    268457251U,	// SUBQH_R_PH_MMR2
    268460312U,	// SUBQH_R_W
    268460312U,	// SUBQH_R_W_MMR2
    268459917U,	// SUBQH_W
    268459917U,	// SUBQH_W_MMR2
    268457211U,	// SUBQ_PH
    268457211U,	// SUBQ_PH_MM
    268457308U,	// SUBQ_S_PH
    268457308U,	// SUBQ_S_PH_MM
    268460618U,	// SUBQ_S_W
    268460618U,	// SUBQ_S_W_MM
    268453223U,	// SUBSUS_U_B
    268455625U,	// SUBSUS_U_D
    268456935U,	// SUBSUS_U_H
    268461106U,	// SUBSUS_U_W
    268453026U,	// SUBSUU_S_B
    268455198U,	// SUBSUU_S_D
    268456675U,	// SUBSUU_S_H
    268460728U,	// SUBSUU_S_W
    268452988U,	// SUBS_S_B
    268455138U,	// SUBS_S_D
    268456637U,	// SUBS_S_H
    268460668U,	// SUBS_S_W
    268453203U,	// SUBS_U_B
    268455605U,	// SUBS_U_D
    268456915U,	// SUBS_U_H
    268461086U,	// SUBS_U_W
    268452362U,	// SUBU16_MM
    268452362U,	// SUBU16_MMR6
    268453421U,	// SUBUH_QB
    268453421U,	// SUBUH_QB_MMR2
    268453527U,	// SUBUH_R_QB
    268453527U,	// SUBUH_R_QB_MMR2
    268459285U,	// SUBU_MMR6
    268457409U,	// SUBU_PH
    268457409U,	// SUBU_PH_MMR2
    268453635U,	// SUBU_QB
    268453635U,	// SUBU_QB_MM
    268457352U,	// SUBU_S_PH
    268457352U,	// SUBU_S_PH_MMR2
    268453574U,	// SUBU_S_QB
    268453574U,	// SUBU_S_QB_MM
    268452770U,	// SUBVI_B
    268454561U,	// SUBVI_D
    268456297U,	// SUBVI_H
    268460050U,	// SUBVI_W
    268453282U,	// SUBV_B
    268455696U,	// SUBV_D
    268456994U,	// SUBV_H
    268461187U,	// SUBV_W
    268453712U,	// SUB_MM
    268453712U,	// SUB_MMR6
    268459285U,	// SUBu
    268459285U,	// SUBu_MM
    2969583763U,	// SUXC1
    2969583763U,	// SUXC164
    2969583763U,	// SUXC1_MM
    134243545U,	// SW
    134234663U,	// SW16_MM
    134234663U,	// SW16_MMR6
    134243545U,	// SW64
    134234232U,	// SWC1
    134234232U,	// SWC1_MM
    134234420U,	// SWC2
    134234420U,	// SWC2_MMR6
    134234420U,	// SWC2_R6
    134234465U,	// SWC3
    134238316U,	// SWE
    134238316U,	// SWE_MM
    134238316U,	// SWE_MMR6
    134240355U,	// SWL
    134240355U,	// SWL64
    134238260U,	// SWLE
    134238260U,	// SWLE_MM
    134240355U,	// SWL_MM
    3817942U,	// SWM16_MM
    3817942U,	// SWM16_MMR6
    3817718U,	// SWM32_MM
    3823760U,	// SWM_MM
    170333U,	// SWP_MM
    170333U,	// SWP_MMR6
    134240823U,	// SWR
    134240823U,	// SWR64
    134238287U,	// SWRE
    134238287U,	// SWRE_MM
    134240823U,	// SWR_MM
    134243545U,	// SWSP_MM
    134243545U,	// SWSP_MMR6
    2969583777U,	// SWXC1
    2969583777U,	// SWXC1_MM
    134243545U,	// SW_MM
    134243545U,	// SW_MMR6
    206225U,	// SYNC
    218782U,	// SYNCI
    218782U,	// SYNCI_MMR6
    206225U,	// SYNC_MM
    198590U,	// SYNC_MMR6
    186358U,	// SYSCALL
    595958U,	// SYSCALL_MM
    0U,	// SZ_B_PSEUDO
    0U,	// SZ_D_PSEUDO
    0U,	// SZ_H_PSEUDO
    0U,	// SZ_V_PSEUDO
    0U,	// SZ_W_PSEUDO
    0U,	// Save16
    0U,	// SaveX16
    134235977U,	// SbRxRyOffMemX16
    550216U,	// SebRx16
    550228U,	// SehRx16
    4695329U,	// SelBeqZ
    4695302U,	// SelBneZ
    4202928364U,	// SelTBteqZCmp
    4202927849U,	// SelTBteqZCmpi
    4202929389U,	// SelTBteqZSlt
    4202927879U,	// SelTBteqZSlti
    4202929516U,	// SelTBteqZSltiu
    4202929564U,	// SelTBteqZSltu
    176396524U,	// SelTBtneZCmp
    176396009U,	// SelTBtneZCmpi
    176397549U,	// SelTBtneZSlt
    176396039U,	// SelTBtneZSlti
    176397676U,	// SelTBtneZSltiu
    176397724U,	// SelTBtneZSltu
    134239892U,	// ShRxRyOffMemX16
    268458002U,	// SllX16
    16801306U,	// SllvRxRy16
    184851693U,	// SltCCRxRy16
    23789U,	// SltRxRy16
    184850183U,	// SltiCCRxImmX16
    1879070471U,	// SltiRxImm16
    22279U,	// SltiRxImmX16
    184851820U,	// SltiuCCRxImmX16
    1879072108U,	// SltiuRxImm16
    23916U,	// SltiuRxImmX16
    184851868U,	// SltuCCRxRy16
    23964U,	// SltuRxRy16
    184851868U,	// SltuRxRyRz16
    268452485U,	// SraX16
    16801285U,	// SravRxRy16
    268458020U,	// SrlX16
    16801313U,	// SrlvRxRy16
    268459285U,	// SubuRxRyRz16
    134243545U,	// SwRxRyOffMemX16
    134243545U,	// SwRxSpImmX16
    0U,	// TAILCALL
    0U,	// TAILCALL64_R
    0U,	// TAILCALL_R
    268458348U,	// TEQ
    22261U,	// TEQI
    22261U,	// TEQI_MM
    268458348U,	// TEQ_MM
    268455950U,	// TGE
    22194U,	// TGEI
    23909U,	// TGEIU
    23909U,	// TGEIU_MM
    22194U,	// TGEI_MM
    268459332U,	// TGEU
    268459332U,	// TGEU_MM
    268455950U,	// TGE_MM
    9901U,	// TLBINV
    9850U,	// TLBINVF
    9850U,	// TLBINVF_MMR6
    9901U,	// TLBINV_MMR6
    9868U,	// TLBP
    9868U,	// TLBP_MM
    9879U,	// TLBR
    9879U,	// TLBR_MM
    9858U,	// TLBWI
    9858U,	// TLBWI_MM
    9884U,	// TLBWR
    9884U,	// TLBWR_MM
    268459250U,	// TLT
    22285U,	// TLTI
    23923U,	// TLTIU_MM
    22285U,	// TLTI_MM
    268459426U,	// TLTU
    268459426U,	// TLTU_MM
    268459250U,	// TLT_MM
    268456004U,	// TNE
    22206U,	// TNEI
    22206U,	// TNEI_MM
    268456004U,	// TNE_MM
    0U,	// TRAP
    19123U,	// TRUNC_L_D64
    19123U,	// TRUNC_L_D_MMR6
    23301U,	// TRUNC_L_S
    23301U,	// TRUNC_L_S_MMR6
    20298U,	// TRUNC_W_D32
    20298U,	// TRUNC_W_D64
    20298U,	// TRUNC_W_D_MMR6
    20298U,	// TRUNC_W_MM
    23633U,	// TRUNC_W_S
    23633U,	// TRUNC_W_S_MM
    23633U,	// TRUNC_W_S_MMR6
    23923U,	// TTLTIU
    25947U,	// UDIV
    25947U,	// UDIV_MM
    0U,	// UDIV_MM_Pseudo
    268459448U,	// UDivMacro
    134239339U,	// Ulh
    134241616U,	// Ulhu
    134243540U,	// Ulw
    268459386U,	// V3MULU
    268451877U,	// VMM0
    268459401U,	// VMULU
    285229822U,	// VSHF_B
    285231630U,	// VSHF_D
    285233382U,	// VSHF_H
    285237054U,	// VSHF_W
    9896U,	// WAIT
    597218U,	// WAIT_MM
    597218U,	// WAIT_MMR6
    41965866U,	// WRDSP
    159406378U,	// WRDSP_MM
    23068U,	// WRPGPR_MMR6
    21600U,	// WSBH
    21600U,	// WSBH_MM
    21600U,	// WSBH_MMR6
    268458511U,	// XOR
    9224684U,	// XOR16_MM
    9224684U,	// XOR16_MMR6
    268458511U,	// XOR64
    268452733U,	// XORI_B
    268457723U,	// XORI_MMR6
    268458511U,	// XOR_MM
    268458511U,	// XOR_MMR6
    268459489U,	// XOR_V
    0U,	// XOR_V_D_PSEUDO
    0U,	// XOR_V_H_PSEUDO
    0U,	// XOR_V_W_PSEUDO
    268457723U,	// XORi
    268457723U,	// XORi64
    268457723U,	// XORi_MM
    16800271U,	// XorRxRxRy16
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// G_ADD
    0U,	// G_OR
    0U,	// G_BR
    0U,	// ABSMacro
    0U,	// ABSQ_S_PH
    0U,	// ABSQ_S_PH_MM
    0U,	// ABSQ_S_QB
    0U,	// ABSQ_S_QB_MMR2
    0U,	// ABSQ_S_W
    0U,	// ABSQ_S_W_MM
    0U,	// ABS_D_MMR6
    0U,	// ABS_S_MMR6
    0U,	// ADD
    0U,	// ADDIUPC
    0U,	// ADDIUPC_MM
    0U,	// ADDIUPC_MMR6
    0U,	// ADDIUR1SP_MM
    0U,	// ADDIUR2_MM
    0U,	// ADDIUS5_MM
    0U,	// ADDIUSP_MM
    0U,	// ADDIU_MMR6
    0U,	// ADDQH_PH
    0U,	// ADDQH_PH_MMR2
    0U,	// ADDQH_R_PH
    0U,	// ADDQH_R_PH_MMR2
    0U,	// ADDQH_R_W
    0U,	// ADDQH_R_W_MMR2
    0U,	// ADDQH_W
    0U,	// ADDQH_W_MMR2
    0U,	// ADDQ_PH
    0U,	// ADDQ_PH_MM
    0U,	// ADDQ_S_PH
    0U,	// ADDQ_S_PH_MM
    0U,	// ADDQ_S_W
    0U,	// ADDQ_S_W_MM
    0U,	// ADDSC
    0U,	// ADDSC_MM
    0U,	// ADDS_A_B
    0U,	// ADDS_A_D
    0U,	// ADDS_A_H
    0U,	// ADDS_A_W
    0U,	// ADDS_S_B
    0U,	// ADDS_S_D
    0U,	// ADDS_S_H
    0U,	// ADDS_S_W
    0U,	// ADDS_U_B
    0U,	// ADDS_U_D
    0U,	// ADDS_U_H
    0U,	// ADDS_U_W
    0U,	// ADDU16_MM
    0U,	// ADDU16_MMR6
    0U,	// ADDUH_QB
    0U,	// ADDUH_QB_MMR2
    0U,	// ADDUH_R_QB
    0U,	// ADDUH_R_QB_MMR2
    0U,	// ADDU_MMR6
    0U,	// ADDU_PH
    0U,	// ADDU_PH_MMR2
    0U,	// ADDU_QB
    0U,	// ADDU_QB_MM
    0U,	// ADDU_S_PH
    0U,	// ADDU_S_PH_MMR2
    0U,	// ADDU_S_QB
    0U,	// ADDU_S_QB_MM
    2U,	// ADDVI_B
    2U,	// ADDVI_D
    2U,	// ADDVI_H
    2U,	// ADDVI_W
    0U,	// ADDV_B
    0U,	// ADDV_D
    0U,	// ADDV_H
    0U,	// ADDV_W
    0U,	// ADDWC
    0U,	// ADDWC_MM
    0U,	// ADD_A_B
    0U,	// ADD_A_D
    0U,	// ADD_A_H
    0U,	// ADD_A_W
    0U,	// ADD_MM
    0U,	// ADD_MMR6
    0U,	// ADDi
    0U,	// ADDi_MM
    0U,	// ADDiu
    0U,	// ADDiu_MM
    0U,	// ADDu
    0U,	// ADDu_MM
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    64U,	// ALIGN
    64U,	// ALIGN_MMR6
    0U,	// ALUIPC
    0U,	// ALUIPC_MMR6
    0U,	// AND
    0U,	// AND16_MM
    0U,	// AND16_MMR6
    0U,	// AND64
    0U,	// ANDI16_MM
    0U,	// ANDI16_MMR6
    4U,	// ANDI_B
    6U,	// ANDI_MMR6
    0U,	// AND_MM
    0U,	// AND_MMR6
    0U,	// AND_V
    0U,	// AND_V_D_PSEUDO
    0U,	// AND_V_H_PSEUDO
    0U,	// AND_V_W_PSEUDO
    6U,	// ANDi
    6U,	// ANDi64
    6U,	// ANDi_MM
    2U,	// APPEND
    2U,	// APPEND_MMR2
    0U,	// ASUB_S_B
    0U,	// ASUB_S_D
    0U,	// ASUB_S_H
    0U,	// ASUB_S_W
    0U,	// ASUB_U_B
    0U,	// ASUB_U_D
    0U,	// ASUB_U_H
    0U,	// ASUB_U_W
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// AUI
    0U,	// AUIPC
    0U,	// AUIPC_MMR6
    0U,	// AUI_MMR6
    0U,	// AVER_S_B
    0U,	// AVER_S_D
    0U,	// AVER_S_H
    0U,	// AVER_S_W
    0U,	// AVER_U_B
    0U,	// AVER_U_D
    0U,	// AVER_U_H
    0U,	// AVER_U_W
    0U,	// AVE_S_B
    0U,	// AVE_S_D
    0U,	// AVE_S_H
    0U,	// AVE_S_W
    0U,	// AVE_U_B
    0U,	// AVE_U_D
    0U,	// AVE_U_H
    0U,	// AVE_U_W
    0U,	// AddiuRxImmX16
    0U,	// AddiuRxPcImmX16
    0U,	// AddiuRxRxImm16
    0U,	// AddiuRxRxImmX16
    0U,	// AddiuRxRyOffMemX16
    0U,	// AddiuSpImm16
    0U,	// AddiuSpImmX16
    0U,	// AdduRxRyRz16
    0U,	// AndRxRxRy16
    0U,	// B
    0U,	// B16_MM
    0U,	// BADDu
    0U,	// BAL
    0U,	// BALC
    0U,	// BALC_MMR6
    8U,	// BALIGN
    8U,	// BALIGN_MMR2
    0U,	// BAL_BR
    0U,	// BBIT0
    0U,	// BBIT032
    0U,	// BBIT1
    0U,	// BBIT132
    0U,	// BC
    0U,	// BC16_MMR6
    0U,	// BC1EQZ
    0U,	// BC1EQZC_MMR6
    0U,	// BC1F
    0U,	// BC1FL
    0U,	// BC1F_MM
    0U,	// BC1NEZ
    0U,	// BC1NEZC_MMR6
    0U,	// BC1T
    0U,	// BC1TL
    0U,	// BC1T_MM
    0U,	// BC2EQZ
    0U,	// BC2EQZC_MMR6
    0U,	// BC2NEZ
    0U,	// BC2NEZC_MMR6
    10U,	// BCLRI_B
    12U,	// BCLRI_D
    14U,	// BCLRI_H
    2U,	// BCLRI_W
    0U,	// BCLR_B
    0U,	// BCLR_D
    0U,	// BCLR_H
    0U,	// BCLR_W
    0U,	// BC_MMR6
    0U,	// BEQ
    0U,	// BEQ64
    0U,	// BEQC
    0U,	// BEQC_MMR6
    0U,	// BEQL
    0U,	// BEQZ16_MM
    0U,	// BEQZALC
    0U,	// BEQZALC_MMR6
    0U,	// BEQZC
    0U,	// BEQZC16_MMR6
    0U,	// BEQZC_MM
    0U,	// BEQZC_MMR6
    0U,	// BEQ_MM
    0U,	// BGE
    0U,	// BGEC
    0U,	// BGEC_MMR6
    0U,	// BGEImmMacro
    0U,	// BGEL
    0U,	// BGELImmMacro
    0U,	// BGEU
    0U,	// BGEUC
    0U,	// BGEUC_MMR6
    0U,	// BGEUImmMacro
    0U,	// BGEUL
    0U,	// BGEULImmMacro
    0U,	// BGEZ
    0U,	// BGEZ64
    0U,	// BGEZAL
    0U,	// BGEZALC
    0U,	// BGEZALC_MMR6
    0U,	// BGEZALL
    0U,	// BGEZALS_MM
    0U,	// BGEZAL_MM
    0U,	// BGEZC
    0U,	// BGEZL
    0U,	// BGEZ_MM
    0U,	// BGT
    0U,	// BGTImmMacro
    0U,	// BGTL
    0U,	// BGTLImmMacro
    0U,	// BGTU
    0U,	// BGTUImmMacro
    0U,	// BGTUL
    0U,	// BGTULImmMacro
    0U,	// BGTZ
    0U,	// BGTZ64
    0U,	// BGTZALC
    0U,	// BGTZALC_MMR6
    0U,	// BGTZC
    0U,	// BGTZL
    0U,	// BGTZ_MM
    16U,	// BINSLI_B
    18U,	// BINSLI_D
    20U,	// BINSLI_H
    22U,	// BINSLI_W
    24U,	// BINSL_B
    24U,	// BINSL_D
    24U,	// BINSL_H
    24U,	// BINSL_W
    16U,	// BINSRI_B
    18U,	// BINSRI_D
    20U,	// BINSRI_H
    22U,	// BINSRI_W
    24U,	// BINSR_B
    24U,	// BINSR_D
    24U,	// BINSR_H
    24U,	// BINSR_W
    0U,	// BITREV
    0U,	// BITREV_MM
    0U,	// BITSWAP
    0U,	// BITSWAP_MMR6
    0U,	// BLE
    0U,	// BLEImmMacro
    0U,	// BLEL
    0U,	// BLELImmMacro
    0U,	// BLEU
    0U,	// BLEUImmMacro
    0U,	// BLEUL
    0U,	// BLEULImmMacro
    0U,	// BLEZ
    0U,	// BLEZ64
    0U,	// BLEZALC
    0U,	// BLEZALC_MMR6
    0U,	// BLEZC
    0U,	// BLEZL
    0U,	// BLEZ_MM
    0U,	// BLT
    0U,	// BLTC
    0U,	// BLTC_MMR6
    0U,	// BLTImmMacro
    0U,	// BLTL
    0U,	// BLTLImmMacro
    0U,	// BLTU
    0U,	// BLTUC
    0U,	// BLTUC_MMR6
    0U,	// BLTUImmMacro
    0U,	// BLTUL
    0U,	// BLTULImmMacro
    0U,	// BLTZ
    0U,	// BLTZ64
    0U,	// BLTZAL
    0U,	// BLTZALC
    0U,	// BLTZALC_MMR6
    0U,	// BLTZALL
    0U,	// BLTZALS_MM
    0U,	// BLTZAL_MM
    0U,	// BLTZC
    0U,	// BLTZL
    0U,	// BLTZ_MM
    26U,	// BMNZI_B
    24U,	// BMNZ_V
    26U,	// BMZI_B
    24U,	// BMZ_V
    0U,	// BNE
    0U,	// BNE64
    0U,	// BNEC
    0U,	// BNEC_MMR6
    10U,	// BNEGI_B
    12U,	// BNEGI_D
    14U,	// BNEGI_H
    2U,	// BNEGI_W
    0U,	// BNEG_B
    0U,	// BNEG_D
    0U,	// BNEG_H
    0U,	// BNEG_W
    0U,	// BNEL
    0U,	// BNEZ16_MM
    0U,	// BNEZALC
    0U,	// BNEZALC_MMR6
    0U,	// BNEZC
    0U,	// BNEZC16_MMR6
    0U,	// BNEZC_MM
    0U,	// BNEZC_MMR6
    0U,	// BNE_MM
    0U,	// BNVC
    0U,	// BNVC_MMR6
    0U,	// BNZ_B
    0U,	// BNZ_D
    0U,	// BNZ_H
    0U,	// BNZ_V
    0U,	// BNZ_W
    0U,	// BOVC
    0U,	// BOVC_MMR6
    0U,	// BPOSGE32
    0U,	// BPOSGE32C_MMR3
    0U,	// BPOSGE32_MM
    0U,	// BPOSGE32_PSEUDO
    0U,	// BREAK
    0U,	// BREAK16_MM
    0U,	// BREAK16_MMR6
    0U,	// BREAK_MM
    0U,	// BREAK_MMR6
    26U,	// BSELI_B
    0U,	// BSEL_D_PSEUDO
    0U,	// BSEL_FD_PSEUDO
    0U,	// BSEL_FW_PSEUDO
    0U,	// BSEL_H_PSEUDO
    24U,	// BSEL_V
    0U,	// BSEL_W_PSEUDO
    10U,	// BSETI_B
    12U,	// BSETI_D
    14U,	// BSETI_H
    2U,	// BSETI_W
    0U,	// BSET_B
    0U,	// BSET_D
    0U,	// BSET_H
    0U,	// BSET_W
    0U,	// BZ_B
    0U,	// BZ_D
    0U,	// BZ_H
    0U,	// BZ_V
    0U,	// BZ_W
    0U,	// B_MMR6_Pseudo
    0U,	// B_MM_Pseudo
    0U,	// BeqImm
    0U,	// BeqzRxImm16
    0U,	// BeqzRxImmX16
    0U,	// Bimm16
    0U,	// BimmX16
    0U,	// BneImm
    0U,	// BnezRxImm16
    0U,	// BnezRxImmX16
    0U,	// Break16
    0U,	// Bteqz16
    0U,	// BteqzT8CmpX16
    0U,	// BteqzT8CmpiX16
    0U,	// BteqzT8SltX16
    0U,	// BteqzT8SltiX16
    0U,	// BteqzT8SltiuX16
    0U,	// BteqzT8SltuX16
    0U,	// BteqzX16
    0U,	// Btnez16
    0U,	// BtnezT8CmpX16
    0U,	// BtnezT8CmpiX16
    0U,	// BtnezT8SltX16
    0U,	// BtnezT8SltiX16
    0U,	// BtnezT8SltiuX16
    0U,	// BtnezT8SltuX16
    0U,	// BtnezX16
    0U,	// BuildPairF64
    0U,	// BuildPairF64_64
    0U,	// CACHE
    0U,	// CACHEE
    0U,	// CACHEE_MM
    0U,	// CACHEE_MMR6
    0U,	// CACHE_MM
    0U,	// CACHE_MMR6
    0U,	// CACHE_R6
    0U,	// CEIL_L_D64
    0U,	// CEIL_L_D_MMR6
    0U,	// CEIL_L_S
    0U,	// CEIL_L_S_MMR6
    0U,	// CEIL_W_D32
    0U,	// CEIL_W_D64
    0U,	// CEIL_W_D_MMR6
    0U,	// CEIL_W_MM
    0U,	// CEIL_W_S
    0U,	// CEIL_W_S_MM
    0U,	// CEIL_W_S_MMR6
    0U,	// CEQI_B
    0U,	// CEQI_D
    0U,	// CEQI_H
    0U,	// CEQI_W
    0U,	// CEQ_B
    0U,	// CEQ_D
    0U,	// CEQ_H
    0U,	// CEQ_W
    0U,	// CFC1
    0U,	// CFC1_MM
    0U,	// CFCMSA
    578U,	// CINS
    578U,	// CINS32
    0U,	// CLASS_D
    0U,	// CLASS_D_MMR6
    0U,	// CLASS_S
    0U,	// CLASS_S_MMR6
    0U,	// CLEI_S_B
    0U,	// CLEI_S_D
    0U,	// CLEI_S_H
    0U,	// CLEI_S_W
    2U,	// CLEI_U_B
    2U,	// CLEI_U_D
    2U,	// CLEI_U_H
    2U,	// CLEI_U_W
    0U,	// CLE_S_B
    0U,	// CLE_S_D
    0U,	// CLE_S_H
    0U,	// CLE_S_W
    0U,	// CLE_U_B
    0U,	// CLE_U_D
    0U,	// CLE_U_H
    0U,	// CLE_U_W
    0U,	// CLO
    0U,	// CLO_MM
    0U,	// CLO_MMR6
    0U,	// CLO_R6
    0U,	// CLTI_S_B
    0U,	// CLTI_S_D
    0U,	// CLTI_S_H
    0U,	// CLTI_S_W
    2U,	// CLTI_U_B
    2U,	// CLTI_U_D
    2U,	// CLTI_U_H
    2U,	// CLTI_U_W
    0U,	// CLT_S_B
    0U,	// CLT_S_D
    0U,	// CLT_S_H
    0U,	// CLT_S_W
    0U,	// CLT_U_B
    0U,	// CLT_U_D
    0U,	// CLT_U_H
    0U,	// CLT_U_W
    0U,	// CLZ
    0U,	// CLZ_MM
    0U,	// CLZ_MMR6
    0U,	// CLZ_R6
    0U,	// CMPGDU_EQ_QB
    0U,	// CMPGDU_EQ_QB_MMR2
    0U,	// CMPGDU_LE_QB
    0U,	// CMPGDU_LE_QB_MMR2
    0U,	// CMPGDU_LT_QB
    0U,	// CMPGDU_LT_QB_MMR2
    0U,	// CMPGU_EQ_QB
    0U,	// CMPGU_EQ_QB_MM
    0U,	// CMPGU_LE_QB
    0U,	// CMPGU_LE_QB_MM
    0U,	// CMPGU_LT_QB
    0U,	// CMPGU_LT_QB_MM
    0U,	// CMPU_EQ_QB
    0U,	// CMPU_EQ_QB_MM
    0U,	// CMPU_LE_QB
    0U,	// CMPU_LE_QB_MM
    0U,	// CMPU_LT_QB
    0U,	// CMPU_LT_QB_MM
    0U,	// CMP_AF_D_MMR6
    0U,	// CMP_AF_S_MMR6
    0U,	// CMP_EQ_D
    0U,	// CMP_EQ_D_MMR6
    0U,	// CMP_EQ_PH
    0U,	// CMP_EQ_PH_MM
    0U,	// CMP_EQ_S
    0U,	// CMP_EQ_S_MMR6
    0U,	// CMP_F_D
    0U,	// CMP_F_S
    0U,	// CMP_LE_D
    0U,	// CMP_LE_D_MMR6
    0U,	// CMP_LE_PH
    0U,	// CMP_LE_PH_MM
    0U,	// CMP_LE_S
    0U,	// CMP_LE_S_MMR6
    0U,	// CMP_LT_D
    0U,	// CMP_LT_D_MMR6
    0U,	// CMP_LT_PH
    0U,	// CMP_LT_PH_MM
    0U,	// CMP_LT_S
    0U,	// CMP_LT_S_MMR6
    0U,	// CMP_SAF_D
    0U,	// CMP_SAF_D_MMR6
    0U,	// CMP_SAF_S
    0U,	// CMP_SAF_S_MMR6
    0U,	// CMP_SEQ_D
    0U,	// CMP_SEQ_D_MMR6
    0U,	// CMP_SEQ_S
    0U,	// CMP_SEQ_S_MMR6
    0U,	// CMP_SLE_D
    0U,	// CMP_SLE_D_MMR6
    0U,	// CMP_SLE_S
    0U,	// CMP_SLE_S_MMR6
    0U,	// CMP_SLT_D
    0U,	// CMP_SLT_D_MMR6
    0U,	// CMP_SLT_S
    0U,	// CMP_SLT_S_MMR6
    0U,	// CMP_SUEQ_D
    0U,	// CMP_SUEQ_D_MMR6
    0U,	// CMP_SUEQ_S
    0U,	// CMP_SUEQ_S_MMR6
    0U,	// CMP_SULE_D
    0U,	// CMP_SULE_D_MMR6
    0U,	// CMP_SULE_S
    0U,	// CMP_SULE_S_MMR6
    0U,	// CMP_SULT_D
    0U,	// CMP_SULT_D_MMR6
    0U,	// CMP_SULT_S
    0U,	// CMP_SULT_S_MMR6
    0U,	// CMP_SUN_D
    0U,	// CMP_SUN_D_MMR6
    0U,	// CMP_SUN_S
    0U,	// CMP_SUN_S_MMR6
    0U,	// CMP_UEQ_D
    0U,	// CMP_UEQ_D_MMR6
    0U,	// CMP_UEQ_S
    0U,	// CMP_UEQ_S_MMR6
    0U,	// CMP_ULE_D
    0U,	// CMP_ULE_D_MMR6
    0U,	// CMP_ULE_S
    0U,	// CMP_ULE_S_MMR6
    0U,	// CMP_ULT_D
    0U,	// CMP_ULT_D_MMR6
    0U,	// CMP_ULT_S
    0U,	// CMP_ULT_S_MMR6
    0U,	// CMP_UN_D
    0U,	// CMP_UN_D_MMR6
    0U,	// CMP_UN_S
    0U,	// CMP_UN_S_MMR6
    0U,	// CONSTPOOL_ENTRY
    0U,	// COPY_FD_PSEUDO
    0U,	// COPY_FW_PSEUDO
    142U,	// COPY_S_B
    28U,	// COPY_S_D
    138U,	// COPY_S_H
    136U,	// COPY_S_W
    142U,	// COPY_U_B
    138U,	// COPY_U_H
    136U,	// COPY_U_W
    0U,	// CTC1
    0U,	// CTC1_MM
    0U,	// CTCMSA
    0U,	// CVT_D32_S
    0U,	// CVT_D32_W
    0U,	// CVT_D32_W_MM
    0U,	// CVT_D64_L
    0U,	// CVT_D64_S
    0U,	// CVT_D64_W
    0U,	// CVT_D_L_MMR6
    0U,	// CVT_D_S_MM
    0U,	// CVT_D_S_MMR6
    0U,	// CVT_D_W_MMR6
    0U,	// CVT_L_D64
    0U,	// CVT_L_D64_MM
    0U,	// CVT_L_D_MMR6
    0U,	// CVT_L_S
    0U,	// CVT_L_S_MM
    0U,	// CVT_L_S_MMR6
    0U,	// CVT_S_D32
    0U,	// CVT_S_D32_MM
    0U,	// CVT_S_D64
    0U,	// CVT_S_D_MMR6
    0U,	// CVT_S_L
    0U,	// CVT_S_L_MMR6
    0U,	// CVT_S_W
    0U,	// CVT_S_W_MM
    0U,	// CVT_S_W_MMR6
    0U,	// CVT_W_D32
    0U,	// CVT_W_D64
    0U,	// CVT_W_D_MMR6
    0U,	// CVT_W_MM
    0U,	// CVT_W_S
    0U,	// CVT_W_S_MM
    0U,	// CVT_W_S_MMR6
    0U,	// C_EQ_D32
    0U,	// C_EQ_D64
    0U,	// C_EQ_S
    0U,	// C_F_D32
    0U,	// C_F_D64
    0U,	// C_F_S
    0U,	// C_LE_D32
    0U,	// C_LE_D64
    0U,	// C_LE_S
    0U,	// C_LT_D32
    0U,	// C_LT_D64
    0U,	// C_LT_S
    0U,	// C_NGE_D32
    0U,	// C_NGE_D64
    0U,	// C_NGE_S
    0U,	// C_NGLE_D32
    0U,	// C_NGLE_D64
    0U,	// C_NGLE_S
    0U,	// C_NGL_D32
    0U,	// C_NGL_D64
    0U,	// C_NGL_S
    0U,	// C_NGT_D32
    0U,	// C_NGT_D64
    0U,	// C_NGT_S
    0U,	// C_OLE_D32
    0U,	// C_OLE_D64
    0U,	// C_OLE_S
    0U,	// C_OLT_D32
    0U,	// C_OLT_D64
    0U,	// C_OLT_S
    0U,	// C_SEQ_D32
    0U,	// C_SEQ_D64
    0U,	// C_SEQ_S
    0U,	// C_SF_D32
    0U,	// C_SF_D64
    0U,	// C_SF_S
    0U,	// C_UEQ_D32
    0U,	// C_UEQ_D64
    0U,	// C_UEQ_S
    0U,	// C_ULE_D32
    0U,	// C_ULE_D64
    0U,	// C_ULE_S
    0U,	// C_ULT_D32
    0U,	// C_ULT_D64
    0U,	// C_ULT_S
    0U,	// C_UN_D32
    0U,	// C_UN_D64
    0U,	// C_UN_S
    0U,	// CmpRxRy16
    0U,	// CmpiRxImm16
    0U,	// CmpiRxImmX16
    0U,	// Constant32
    0U,	// DADD
    0U,	// DADDIU_MM64R6
    0U,	// DADDU_MM64R6
    0U,	// DADD_MM64R6
    0U,	// DADDi
    0U,	// DADDiu
    0U,	// DADDu
    0U,	// DAHI
    0U,	// DAHI_MM64R6
    1088U,	// DALIGN
    1088U,	// DALIGN_MM64R6
    0U,	// DATI
    0U,	// DATI_MM64R6
    0U,	// DAUI
    0U,	// DAUI_MM64R6
    0U,	// DBITSWAP
    0U,	// DCLO
    0U,	// DCLO_MM64R6
    0U,	// DCLO_R6
    0U,	// DCLZ
    0U,	// DCLZ_MM64R6
    0U,	// DCLZ_R6
    0U,	// DDIV
    0U,	// DDIVU
    0U,	// DDIVU_MM64R6
    0U,	// DDIV_MM64R6
    0U,	// DERET
    0U,	// DERET_MM
    0U,	// DERET_MMR6
    1602U,	// DEXT
    2114U,	// DEXTM
    2114U,	// DEXTM_MM64R6
    222U,	// DEXTU
    222U,	// DEXTU_MM64R6
    1602U,	// DEXT_MM64R6
    0U,	// DI
    2636U,	// DINS
    2626U,	// DINSM
    3138U,	// DINSM_MM64R6
    286U,	// DINSU
    286U,	// DINSU_MM64R6
    2626U,	// DINS_MM64R6
    0U,	// DIV
    0U,	// DIVU
    0U,	// DIVU_MMR6
    0U,	// DIV_MMR6
    0U,	// DIV_S_B
    0U,	// DIV_S_D
    0U,	// DIV_S_H
    0U,	// DIV_S_W
    0U,	// DIV_U_B
    0U,	// DIV_U_D
    0U,	// DIV_U_H
    0U,	// DIV_U_W
    0U,	// DI_MM
    0U,	// DI_MMR6
    3648U,	// DLSA
    3648U,	// DLSA_R6
    10U,	// DMFC0
    10U,	// DMFC0_MM64R6
    0U,	// DMFC1
    0U,	// DMFC1_MM64R6
    10U,	// DMFC2
    0U,	// DMFC2_MM64R6
    0U,	// DMFC2_OCTEON
    0U,	// DMOD
    0U,	// DMODU
    0U,	// DMODU_MM64R6
    0U,	// DMOD_MM64R6
    0U,	// DMTC0
    0U,	// DMTC0_MM64R6
    0U,	// DMTC1
    0U,	// DMTC1_MM64R6
    0U,	// DMTC2
    0U,	// DMTC2_MM64R6
    0U,	// DMTC2_OCTEON
    0U,	// DMUH
    0U,	// DMUHU
    0U,	// DMUHU_MM64R6
    0U,	// DMUH_MM64R6
    0U,	// DMUL
    0U,	// DMULT
    0U,	// DMULTu
    0U,	// DMULU
    0U,	// DMULU_MM64R6
    0U,	// DMUL_MM64R6
    0U,	// DMUL_R6
    0U,	// DOTP_S_D
    0U,	// DOTP_S_H
    0U,	// DOTP_S_W
    0U,	// DOTP_U_D
    0U,	// DOTP_U_H
    0U,	// DOTP_U_W
    24U,	// DPADD_S_D
    24U,	// DPADD_S_H
    24U,	// DPADD_S_W
    24U,	// DPADD_U_D
    24U,	// DPADD_U_H
    24U,	// DPADD_U_W
    0U,	// DPAQX_SA_W_PH
    0U,	// DPAQX_SA_W_PH_MMR2
    0U,	// DPAQX_S_W_PH
    0U,	// DPAQX_S_W_PH_MMR2
    0U,	// DPAQ_SA_L_W
    0U,	// DPAQ_SA_L_W_MM
    0U,	// DPAQ_S_W_PH
    0U,	// DPAQ_S_W_PH_MM
    0U,	// DPAU_H_QBL
    0U,	// DPAU_H_QBL_MM
    0U,	// DPAU_H_QBR
    0U,	// DPAU_H_QBR_MM
    0U,	// DPAX_W_PH
    0U,	// DPAX_W_PH_MMR2
    0U,	// DPA_W_PH
    0U,	// DPA_W_PH_MMR2
    0U,	// DPOP
    0U,	// DPSQX_SA_W_PH
    0U,	// DPSQX_SA_W_PH_MMR2
    0U,	// DPSQX_S_W_PH
    0U,	// DPSQX_S_W_PH_MMR2
    0U,	// DPSQ_SA_L_W
    0U,	// DPSQ_SA_L_W_MM
    0U,	// DPSQ_S_W_PH
    0U,	// DPSQ_S_W_PH_MM
    24U,	// DPSUB_S_D
    24U,	// DPSUB_S_H
    24U,	// DPSUB_S_W
    24U,	// DPSUB_U_D
    24U,	// DPSUB_U_H
    24U,	// DPSUB_U_W
    0U,	// DPSU_H_QBL
    0U,	// DPSU_H_QBL_MM
    0U,	// DPSU_H_QBR
    0U,	// DPSU_H_QBR_MM
    0U,	// DPSX_W_PH
    0U,	// DPSX_W_PH_MMR2
    0U,	// DPS_W_PH
    0U,	// DPS_W_PH_MMR2
    0U,	// DROL
    0U,	// DROLImm
    0U,	// DROR
    0U,	// DRORImm
    12U,	// DROTR
    2U,	// DROTR32
    2U,	// DROTR32_MM64R6
    0U,	// DROTRV
    0U,	// DROTRV_MM64R6
    12U,	// DROTR_MM64R6
    0U,	// DSBH
    0U,	// DSBH_MM64R6
    0U,	// DSDIV
    0U,	// DSDivMacro
    0U,	// DSHD
    0U,	// DSHD_MM64R6
    12U,	// DSLL
    2U,	// DSLL32
    2U,	// DSLL32_MM64R6
    0U,	// DSLL64_32
    0U,	// DSLLV
    0U,	// DSLLV_MM64R6
    12U,	// DSLL_MM64R6
    12U,	// DSRA
    2U,	// DSRA32
    2U,	// DSRA32_MM64R6
    0U,	// DSRAV
    0U,	// DSRAV_MM64R6
    12U,	// DSRA_MM64R6
    12U,	// DSRL
    2U,	// DSRL32
    2U,	// DSRL32_MM64R6
    0U,	// DSRLV
    0U,	// DSRLV_MM64R6
    12U,	// DSRL_MM64R6
    0U,	// DSUB
    0U,	// DSUBU_MM64R6
    0U,	// DSUB_MM64R6
    0U,	// DSUBu
    0U,	// DUDIV
    0U,	// DUDivMacro
    0U,	// DVP_MMR6
    0U,	// DivRxRy16
    0U,	// DivuRxRy16
    0U,	// EHB
    0U,	// EHB_MM
    0U,	// EHB_MMR6
    0U,	// EI
    0U,	// EI_MM
    0U,	// EI_MMR6
    0U,	// ERET
    0U,	// ERETNC
    0U,	// ERETNC_MMR6
    0U,	// ERET_MM
    0U,	// ERET_MMR6
    0U,	// ERet
    0U,	// EVP_MMR6
    1602U,	// EXT
    2U,	// EXTP
    2U,	// EXTPDP
    0U,	// EXTPDPV
    0U,	// EXTPDPV_MM
    2U,	// EXTPDP_MM
    0U,	// EXTPV
    0U,	// EXTPV_MM
    2U,	// EXTP_MM
    0U,	// EXTRV_RS_W
    0U,	// EXTRV_RS_W_MM
    0U,	// EXTRV_R_W
    0U,	// EXTRV_R_W_MM
    0U,	// EXTRV_S_H
    0U,	// EXTRV_S_H_MM
    0U,	// EXTRV_W
    0U,	// EXTRV_W_MM
    2U,	// EXTR_RS_W
    2U,	// EXTR_RS_W_MM
    2U,	// EXTR_R_W
    2U,	// EXTR_R_W_MM
    2U,	// EXTR_S_H
    2U,	// EXTR_S_H_MM
    2U,	// EXTR_W
    2U,	// EXTR_W_MM
    578U,	// EXTS
    578U,	// EXTS32
    1602U,	// EXT_MM
    1602U,	// EXT_MMR6
    0U,	// ExtractElementF64
    0U,	// ExtractElementF64_64
    0U,	// FABS_D
    0U,	// FABS_D32
    0U,	// FABS_D64
    0U,	// FABS_MM
    0U,	// FABS_S
    0U,	// FABS_S_MM
    0U,	// FABS_W
    0U,	// FADD_D
    0U,	// FADD_D32
    0U,	// FADD_D64
    32U,	// FADD_D_MMR6
    0U,	// FADD_MM
    0U,	// FADD_S
    0U,	// FADD_S_MM
    32U,	// FADD_S_MMR6
    0U,	// FADD_W
    0U,	// FCAF_D
    0U,	// FCAF_W
    0U,	// FCEQ_D
    0U,	// FCEQ_W
    0U,	// FCLASS_D
    0U,	// FCLASS_W
    0U,	// FCLE_D
    0U,	// FCLE_W
    0U,	// FCLT_D
    0U,	// FCLT_W
    0U,	// FCMP_D32
    0U,	// FCMP_D32_MM
    0U,	// FCMP_D64
    0U,	// FCMP_S32
    0U,	// FCMP_S32_MM
    0U,	// FCNE_D
    0U,	// FCNE_W
    0U,	// FCOR_D
    0U,	// FCOR_W
    0U,	// FCUEQ_D
    0U,	// FCUEQ_W
    0U,	// FCULE_D
    0U,	// FCULE_W
    0U,	// FCULT_D
    0U,	// FCULT_W
    0U,	// FCUNE_D
    0U,	// FCUNE_W
    0U,	// FCUN_D
    0U,	// FCUN_W
    0U,	// FDIV_D
    0U,	// FDIV_D32
    0U,	// FDIV_D64
    32U,	// FDIV_D_MMR6
    0U,	// FDIV_MM
    0U,	// FDIV_S
    0U,	// FDIV_S_MM
    32U,	// FDIV_S_MMR6
    0U,	// FDIV_W
    0U,	// FEXDO_H
    0U,	// FEXDO_W
    0U,	// FEXP2_D
    0U,	// FEXP2_D_1_PSEUDO
    0U,	// FEXP2_W
    0U,	// FEXP2_W_1_PSEUDO
    0U,	// FEXUPL_D
    0U,	// FEXUPL_W
    0U,	// FEXUPR_D
    0U,	// FEXUPR_W
    0U,	// FFINT_S_D
    0U,	// FFINT_S_W
    0U,	// FFINT_U_D
    0U,	// FFINT_U_W
    0U,	// FFQL_D
    0U,	// FFQL_W
    0U,	// FFQR_D
    0U,	// FFQR_W
    0U,	// FILL_B
    0U,	// FILL_D
    0U,	// FILL_FD_PSEUDO
    0U,	// FILL_FW_PSEUDO
    0U,	// FILL_H
    0U,	// FILL_W
    0U,	// FLOG2_D
    0U,	// FLOG2_W
    0U,	// FLOOR_L_D64
    0U,	// FLOOR_L_D_MMR6
    0U,	// FLOOR_L_S
    0U,	// FLOOR_L_S_MMR6
    0U,	// FLOOR_W_D32
    0U,	// FLOOR_W_D64
    0U,	// FLOOR_W_D_MMR6
    0U,	// FLOOR_W_MM
    0U,	// FLOOR_W_S
    0U,	// FLOOR_W_S_MM
    0U,	// FLOOR_W_S_MMR6
    24U,	// FMADD_D
    24U,	// FMADD_W
    0U,	// FMAX_A_D
    0U,	// FMAX_A_W
    0U,	// FMAX_D
    0U,	// FMAX_W
    0U,	// FMIN_A_D
    0U,	// FMIN_A_W
    0U,	// FMIN_D
    0U,	// FMIN_W
    0U,	// FMOV_D32
    0U,	// FMOV_D32_MM
    0U,	// FMOV_D64
    0U,	// FMOV_D_MMR6
    0U,	// FMOV_S
    0U,	// FMOV_S_MM
    0U,	// FMOV_S_MMR6
    24U,	// FMSUB_D
    24U,	// FMSUB_W
    0U,	// FMUL_D
    0U,	// FMUL_D32
    0U,	// FMUL_D64
    32U,	// FMUL_D_MMR6
    0U,	// FMUL_MM
    0U,	// FMUL_S
    0U,	// FMUL_S_MM
    32U,	// FMUL_S_MMR6
    0U,	// FMUL_W
    0U,	// FNEG_D32
    0U,	// FNEG_D64
    0U,	// FNEG_D_MMR6
    0U,	// FNEG_MM
    0U,	// FNEG_S
    0U,	// FNEG_S_MM
    0U,	// FNEG_S_MMR6
    0U,	// FRCP_D
    0U,	// FRCP_W
    0U,	// FRINT_D
    0U,	// FRINT_W
    0U,	// FRSQRT_D
    0U,	// FRSQRT_W
    0U,	// FSAF_D
    0U,	// FSAF_W
    0U,	// FSEQ_D
    0U,	// FSEQ_W
    0U,	// FSLE_D
    0U,	// FSLE_W
    0U,	// FSLT_D
    0U,	// FSLT_W
    0U,	// FSNE_D
    0U,	// FSNE_W
    0U,	// FSOR_D
    0U,	// FSOR_W
    0U,	// FSQRT_D
    0U,	// FSQRT_D32
    0U,	// FSQRT_D64
    0U,	// FSQRT_MM
    0U,	// FSQRT_S
    0U,	// FSQRT_S_MM
    0U,	// FSQRT_W
    0U,	// FSUB_D
    0U,	// FSUB_D32
    0U,	// FSUB_D64
    32U,	// FSUB_D_MMR6
    0U,	// FSUB_MM
    0U,	// FSUB_S
    0U,	// FSUB_S_MM
    32U,	// FSUB_S_MMR6
    0U,	// FSUB_W
    0U,	// FSUEQ_D
    0U,	// FSUEQ_W
    0U,	// FSULE_D
    0U,	// FSULE_W
    0U,	// FSULT_D
    0U,	// FSULT_W
    0U,	// FSUNE_D
    0U,	// FSUNE_W
    0U,	// FSUN_D
    0U,	// FSUN_W
    0U,	// FTINT_S_D
    0U,	// FTINT_S_W
    0U,	// FTINT_U_D
    0U,	// FTINT_U_W
    0U,	// FTQ_H
    0U,	// FTQ_W
    0U,	// FTRUNC_S_D
    0U,	// FTRUNC_S_W
    0U,	// FTRUNC_U_D
    0U,	// FTRUNC_U_W
    0U,	// GotPrologue16
    0U,	// HADD_S_D
    0U,	// HADD_S_H
    0U,	// HADD_S_W
    0U,	// HADD_U_D
    0U,	// HADD_U_H
    0U,	// HADD_U_W
    0U,	// HSUB_S_D
    0U,	// HSUB_S_H
    0U,	// HSUB_S_W
    0U,	// HSUB_U_D
    0U,	// HSUB_U_H
    0U,	// HSUB_U_W
    0U,	// ILVEV_B
    0U,	// ILVEV_D
    0U,	// ILVEV_H
    0U,	// ILVEV_W
    0U,	// ILVL_B
    0U,	// ILVL_D
    0U,	// ILVL_H
    0U,	// ILVL_W
    0U,	// ILVOD_B
    0U,	// ILVOD_D
    0U,	// ILVOD_H
    0U,	// ILVOD_W
    0U,	// ILVR_B
    0U,	// ILVR_D
    0U,	// ILVR_H
    0U,	// ILVR_W
    2626U,	// INS
    0U,	// INSERT_B
    0U,	// INSERT_B_VIDX64_PSEUDO
    0U,	// INSERT_B_VIDX_PSEUDO
    0U,	// INSERT_D
    0U,	// INSERT_D_VIDX64_PSEUDO
    0U,	// INSERT_D_VIDX_PSEUDO
    0U,	// INSERT_FD_PSEUDO
    0U,	// INSERT_FD_VIDX64_PSEUDO
    0U,	// INSERT_FD_VIDX_PSEUDO
    0U,	// INSERT_FW_PSEUDO
    0U,	// INSERT_FW_VIDX64_PSEUDO
    0U,	// INSERT_FW_VIDX_PSEUDO
    0U,	// INSERT_H
    0U,	// INSERT_H_VIDX64_PSEUDO
    0U,	// INSERT_H_VIDX_PSEUDO
    0U,	// INSERT_W
    0U,	// INSERT_W_VIDX64_PSEUDO
    0U,	// INSERT_W_VIDX_PSEUDO
    0U,	// INSV
    0U,	// INSVE_B
    0U,	// INSVE_D
    0U,	// INSVE_H
    0U,	// INSVE_W
    0U,	// INSV_MM
    2626U,	// INS_MM
    2626U,	// INS_MMR6
    0U,	// J
    0U,	// JAL
    0U,	// JALR
    0U,	// JALR16_MM
    0U,	// JALR64
    0U,	// JALR64Pseudo
    0U,	// JALRC16_MMR6
    0U,	// JALRC_HB_MMR6
    0U,	// JALRC_MMR6
    0U,	// JALRPseudo
    0U,	// JALRS16_MM
    0U,	// JALRS_MM
    0U,	// JALR_HB
    0U,	// JALR_MM
    0U,	// JALS_MM
    0U,	// JALX
    0U,	// JALX_MM
    0U,	// JAL_MM
    0U,	// JIALC
    0U,	// JIALC64
    0U,	// JIALC_MMR6
    0U,	// JIC
    0U,	// JIC64
    0U,	// JIC_MMR6
    0U,	// JR
    0U,	// JR16_MM
    0U,	// JR64
    0U,	// JRADDIUSP
    0U,	// JRC16_MM
    0U,	// JRC16_MMR6
    0U,	// JRCADDIUSP_MMR6
    0U,	// JR_HB
    0U,	// JR_HB_R6
    0U,	// JR_MM
    0U,	// J_MM
    0U,	// Jal16
    0U,	// JalB16
    0U,	// JalOneReg
    0U,	// JalTwoReg
    0U,	// JrRa16
    0U,	// JrcRa16
    0U,	// JrcRx16
    0U,	// JumpLinkReg16
    0U,	// LB
    0U,	// LB64
    0U,	// LBE
    0U,	// LBE_MM
    0U,	// LBE_MMR6
    0U,	// LBU16_MM
    0U,	// LBUE_MMR6
    0U,	// LBUX
    0U,	// LBUX_MM
    0U,	// LBU_MMR6
    0U,	// LB_MM
    0U,	// LB_MMR6
    0U,	// LBu
    0U,	// LBu64
    0U,	// LBuE
    0U,	// LBuE_MM
    0U,	// LBu_MM
    0U,	// LD
    0U,	// LDC1
    0U,	// LDC164
    0U,	// LDC1_D64_MMR6
    0U,	// LDC1_MM
    0U,	// LDC2
    0U,	// LDC2_MMR6
    0U,	// LDC2_R6
    0U,	// LDC3
    0U,	// LDI_B
    0U,	// LDI_D
    0U,	// LDI_H
    0U,	// LDI_W
    0U,	// LDL
    0U,	// LDPC
    0U,	// LDPC_MM64R6
    0U,	// LDR
    0U,	// LDXC1
    0U,	// LDXC164
    0U,	// LD_B
    0U,	// LD_D
    0U,	// LD_H
    0U,	// LD_MM64R6
    0U,	// LD_W
    0U,	// LEA_ADDiu
    0U,	// LEA_ADDiu64
    0U,	// LEA_ADDiu_MM
    0U,	// LH
    0U,	// LH64
    0U,	// LHE
    0U,	// LHE_MM
    0U,	// LHU16_MM
    0U,	// LHX
    0U,	// LHX_MM
    0U,	// LH_MM
    0U,	// LHu
    0U,	// LHu64
    0U,	// LHuE
    0U,	// LHuE_MM
    0U,	// LHu_MM
    0U,	// LI16_MM
    0U,	// LI16_MMR6
    0U,	// LL
    0U,	// LL64
    0U,	// LL64_R6
    0U,	// LLD
    0U,	// LLD_MM64R6
    0U,	// LLD_R6
    0U,	// LLE
    0U,	// LLE_MM
    0U,	// LLE_MMR6
    0U,	// LL_MM
    0U,	// LL_R6
    0U,	// LOAD_ACC128
    0U,	// LOAD_ACC64
    0U,	// LOAD_ACC64DSP
    0U,	// LOAD_CCOND_DSP
    0U,	// LONG_BRANCH_ADDiu
    0U,	// LONG_BRANCH_DADDiu
    0U,	// LONG_BRANCH_LUi
    3648U,	// LSA
    0U,	// LSA_MMR6
    3648U,	// LSA_R6
    0U,	// LUI_MMR6
    0U,	// LUXC1
    0U,	// LUXC164
    0U,	// LUXC1_MM
    0U,	// LUi
    0U,	// LUi64
    0U,	// LUi_MM
    0U,	// LW
    0U,	// LW16_MM
    0U,	// LW64
    0U,	// LWC1
    0U,	// LWC1_MM
    0U,	// LWC2
    0U,	// LWC2_MMR6
    0U,	// LWC2_R6
    0U,	// LWC3
    0U,	// LWE
    0U,	// LWE_MM
    0U,	// LWE_MMR6
    0U,	// LWGP_MM
    0U,	// LWL
    0U,	// LWL64
    0U,	// LWLE
    0U,	// LWLE_MM
    0U,	// LWL_MM
    0U,	// LWM16_MM
    0U,	// LWM16_MMR6
    0U,	// LWM32_MM
    0U,	// LWM_MM
    0U,	// LWPC
    0U,	// LWPC_MMR6
    0U,	// LWP_MM
    0U,	// LWP_MMR6
    0U,	// LWR
    0U,	// LWR64
    0U,	// LWRE
    0U,	// LWRE_MM
    0U,	// LWR_MM
    0U,	// LWSP_MM
    0U,	// LWUPC
    0U,	// LWU_MM
    0U,	// LWU_MM64R6
    0U,	// LWX
    0U,	// LWXC1
    0U,	// LWXC1_MM
    0U,	// LWXS_MM
    0U,	// LWX_MM
    0U,	// LW_MM
    0U,	// LW_MMR6
    0U,	// LWu
    0U,	// LbRxRyOffMemX16
    0U,	// LbuRxRyOffMemX16
    0U,	// LhRxRyOffMemX16
    0U,	// LhuRxRyOffMemX16
    0U,	// LiRxImm16
    0U,	// LiRxImmAlignX16
    0U,	// LiRxImmX16
    0U,	// LoadAddrImm32
    0U,	// LoadAddrImm64
    0U,	// LoadAddrReg32
    0U,	// LoadAddrReg64
    0U,	// LoadImm32
    0U,	// LoadImm64
    0U,	// LwConstant32
    0U,	// LwRxPcTcp16
    0U,	// LwRxPcTcpX16
    0U,	// LwRxRyOffMemX16
    0U,	// LwRxSpImmX16
    0U,	// MADD
    24U,	// MADDF_D
    24U,	// MADDF_D_MMR6
    24U,	// MADDF_S
    24U,	// MADDF_S_MMR6
    24U,	// MADDR_Q_H
    24U,	// MADDR_Q_W
    0U,	// MADDU
    0U,	// MADDU_DSP
    0U,	// MADDU_DSP_MM
    0U,	// MADDU_MM
    24U,	// MADDV_B
    24U,	// MADDV_D
    24U,	// MADDV_H
    24U,	// MADDV_W
    4160U,	// MADD_D32
    4160U,	// MADD_D32_MM
    4160U,	// MADD_D64
    0U,	// MADD_DSP
    0U,	// MADD_DSP_MM
    0U,	// MADD_MM
    24U,	// MADD_Q_H
    24U,	// MADD_Q_W
    4160U,	// MADD_S
    4160U,	// MADD_S_MM
    0U,	// MAQ_SA_W_PHL
    0U,	// MAQ_SA_W_PHL_MM
    0U,	// MAQ_SA_W_PHR
    0U,	// MAQ_SA_W_PHR_MM
    0U,	// MAQ_S_W_PHL
    0U,	// MAQ_S_W_PHL_MM
    0U,	// MAQ_S_W_PHR
    0U,	// MAQ_S_W_PHR_MM
    0U,	// MAXA_D
    0U,	// MAXA_D_MMR6
    0U,	// MAXA_S
    0U,	// MAXA_S_MMR6
    0U,	// MAXI_S_B
    0U,	// MAXI_S_D
    0U,	// MAXI_S_H
    0U,	// MAXI_S_W
    2U,	// MAXI_U_B
    2U,	// MAXI_U_D
    2U,	// MAXI_U_H
    2U,	// MAXI_U_W
    0U,	// MAX_A_B
    0U,	// MAX_A_D
    0U,	// MAX_A_H
    0U,	// MAX_A_W
    0U,	// MAX_D
    0U,	// MAX_D_MMR6
    0U,	// MAX_S
    0U,	// MAX_S_B
    0U,	// MAX_S_D
    0U,	// MAX_S_H
    0U,	// MAX_S_MMR6
    0U,	// MAX_S_W
    0U,	// MAX_U_B
    0U,	// MAX_U_D
    0U,	// MAX_U_H
    0U,	// MAX_U_W
    10U,	// MFC0
    10U,	// MFC0_MMR6
    0U,	// MFC1
    0U,	// MFC1_MM
    0U,	// MFC1_MMR6
    10U,	// MFC2
    0U,	// MFC2_MMR6
    10U,	// MFHC0_MMR6
    0U,	// MFHC1_D32
    0U,	// MFHC1_D32_MMR6
    0U,	// MFHC1_D64
    0U,	// MFHC1_D64_MMR6
    0U,	// MFHC1_MM
    0U,	// MFHC2_MMR6
    0U,	// MFHI
    0U,	// MFHI16_MM
    0U,	// MFHI64
    0U,	// MFHI_DSP
    0U,	// MFHI_DSP_MM
    0U,	// MFHI_MM
    0U,	// MFLO
    0U,	// MFLO16_MM
    0U,	// MFLO64
    0U,	// MFLO_DSP
    0U,	// MFLO_DSP_MM
    0U,	// MFLO_MM
    0U,	// MINA_D
    0U,	// MINA_D_MMR6
    0U,	// MINA_S
    0U,	// MINA_S_MMR6
    0U,	// MINI_S_B
    0U,	// MINI_S_D
    0U,	// MINI_S_H
    0U,	// MINI_S_W
    2U,	// MINI_U_B
    2U,	// MINI_U_D
    2U,	// MINI_U_H
    2U,	// MINI_U_W
    0U,	// MIN_A_B
    0U,	// MIN_A_D
    0U,	// MIN_A_H
    0U,	// MIN_A_W
    0U,	// MIN_D
    0U,	// MIN_D_MMR6
    0U,	// MIN_S
    0U,	// MIN_S_B
    0U,	// MIN_S_D
    0U,	// MIN_S_H
    0U,	// MIN_S_MMR6
    0U,	// MIN_S_W
    0U,	// MIN_U_B
    0U,	// MIN_U_D
    0U,	// MIN_U_H
    0U,	// MIN_U_W
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    0U,	// MOD
    0U,	// MODSUB
    0U,	// MODSUB_MM
    0U,	// MODU
    0U,	// MODU_MMR6
    0U,	// MOD_MMR6
    0U,	// MOD_S_B
    0U,	// MOD_S_D
    0U,	// MOD_S_H
    0U,	// MOD_S_W
    0U,	// MOD_U_B
    0U,	// MOD_U_D
    0U,	// MOD_U_H
    0U,	// MOD_U_W
    0U,	// MOVE16_MM
    0U,	// MOVE16_MMR6
    0U,	// MOVEP_MM
    0U,	// MOVE_V
    0U,	// MOVF_D32
    0U,	// MOVF_D32_MM
    0U,	// MOVF_D64
    0U,	// MOVF_I
    0U,	// MOVF_I64
    0U,	// MOVF_I_MM
    0U,	// MOVF_S
    0U,	// MOVF_S_MM
    0U,	// MOVN_I64_D64
    0U,	// MOVN_I64_I
    0U,	// MOVN_I64_I64
    0U,	// MOVN_I64_S
    0U,	// MOVN_I_D32
    0U,	// MOVN_I_D32_MM
    0U,	// MOVN_I_D64
    0U,	// MOVN_I_I
    0U,	// MOVN_I_I64
    0U,	// MOVN_I_MM
    0U,	// MOVN_I_S
    0U,	// MOVN_I_S_MM
    0U,	// MOVT_D32
    0U,	// MOVT_D32_MM
    0U,	// MOVT_D64
    0U,	// MOVT_I
    0U,	// MOVT_I64
    0U,	// MOVT_I_MM
    0U,	// MOVT_S
    0U,	// MOVT_S_MM
    0U,	// MOVZ_I64_D64
    0U,	// MOVZ_I64_I
    0U,	// MOVZ_I64_I64
    0U,	// MOVZ_I64_S
    0U,	// MOVZ_I_D32
    0U,	// MOVZ_I_D32_MM
    0U,	// MOVZ_I_D64
    0U,	// MOVZ_I_I
    0U,	// MOVZ_I_I64
    0U,	// MOVZ_I_MM
    0U,	// MOVZ_I_S
    0U,	// MOVZ_I_S_MM
    0U,	// MSUB
    24U,	// MSUBF_D
    24U,	// MSUBF_D_MMR6
    24U,	// MSUBF_S
    24U,	// MSUBF_S_MMR6
    24U,	// MSUBR_Q_H
    24U,	// MSUBR_Q_W
    0U,	// MSUBU
    0U,	// MSUBU_DSP
    0U,	// MSUBU_DSP_MM
    0U,	// MSUBU_MM
    24U,	// MSUBV_B
    24U,	// MSUBV_D
    24U,	// MSUBV_H
    24U,	// MSUBV_W
    4160U,	// MSUB_D32
    4160U,	// MSUB_D32_MM
    4160U,	// MSUB_D64
    0U,	// MSUB_DSP
    0U,	// MSUB_DSP_MM
    0U,	// MSUB_MM
    24U,	// MSUB_Q_H
    24U,	// MSUB_Q_W
    4160U,	// MSUB_S
    4160U,	// MSUB_S_MM
    0U,	// MTC0
    0U,	// MTC0_MMR6
    0U,	// MTC1
    0U,	// MTC1_MM
    0U,	// MTC1_MMR6
    0U,	// MTC2
    0U,	// MTC2_MMR6
    0U,	// MTHC0_MMR6
    0U,	// MTHC1_D32
    0U,	// MTHC1_D32_MMR6
    0U,	// MTHC1_D64
    0U,	// MTHC1_D64_MMR6
    0U,	// MTHC1_MM
    0U,	// MTHC2_MMR6
    0U,	// MTHI
    0U,	// MTHI64
    0U,	// MTHI_DSP
    0U,	// MTHI_DSP_MM
    0U,	// MTHI_MM
    0U,	// MTHLIP
    0U,	// MTHLIP_MM
    0U,	// MTLO
    0U,	// MTLO64
    0U,	// MTLO_DSP
    0U,	// MTLO_DSP_MM
    0U,	// MTLO_MM
    0U,	// MTM0
    0U,	// MTM1
    0U,	// MTM2
    0U,	// MTP0
    0U,	// MTP1
    0U,	// MTP2
    0U,	// MUH
    0U,	// MUHU
    0U,	// MUHU_MMR6
    0U,	// MUH_MMR6
    0U,	// MUL
    0U,	// MULEQ_S_W_PHL
    0U,	// MULEQ_S_W_PHL_MM
    0U,	// MULEQ_S_W_PHR
    0U,	// MULEQ_S_W_PHR_MM
    0U,	// MULEU_S_PH_QBL
    0U,	// MULEU_S_PH_QBL_MM
    0U,	// MULEU_S_PH_QBR
    0U,	// MULEU_S_PH_QBR_MM
    0U,	// MULQ_RS_PH
    0U,	// MULQ_RS_PH_MM
    0U,	// MULQ_RS_W
    0U,	// MULQ_RS_W_MMR2
    0U,	// MULQ_S_PH
    0U,	// MULQ_S_PH_MMR2
    0U,	// MULQ_S_W
    0U,	// MULQ_S_W_MMR2
    0U,	// MULR_Q_H
    0U,	// MULR_Q_W
    0U,	// MULSAQ_S_W_PH
    0U,	// MULSAQ_S_W_PH_MM
    0U,	// MULSA_W_PH
    0U,	// MULSA_W_PH_MMR2
    0U,	// MULT
    0U,	// MULTU_DSP
    0U,	// MULTU_DSP_MM
    0U,	// MULT_DSP
    0U,	// MULT_DSP_MM
    0U,	// MULT_MM
    0U,	// MULTu
    0U,	// MULTu_MM
    0U,	// MULU
    0U,	// MULU_MMR6
    0U,	// MULV_B
    0U,	// MULV_D
    0U,	// MULV_H
    0U,	// MULV_W
    0U,	// MUL_MM
    0U,	// MUL_MMR6
    0U,	// MUL_PH
    0U,	// MUL_PH_MMR2
    0U,	// MUL_Q_H
    0U,	// MUL_Q_W
    0U,	// MUL_R6
    0U,	// MUL_S_PH
    0U,	// MUL_S_PH_MMR2
    0U,	// Mfhi16
    0U,	// Mflo16
    0U,	// Move32R16
    0U,	// MoveR3216
    0U,	// MultRxRy16
    0U,	// MultRxRyRz16
    0U,	// MultuRxRy16
    0U,	// MultuRxRyRz16
    0U,	// NLOC_B
    0U,	// NLOC_D
    0U,	// NLOC_H
    0U,	// NLOC_W
    0U,	// NLZC_B
    0U,	// NLZC_D
    0U,	// NLZC_H
    0U,	// NLZC_W
    4160U,	// NMADD_D32
    4160U,	// NMADD_D32_MM
    4160U,	// NMADD_D64
    4160U,	// NMADD_S
    4160U,	// NMADD_S_MM
    4160U,	// NMSUB_D32
    4160U,	// NMSUB_D32_MM
    4160U,	// NMSUB_D64
    4160U,	// NMSUB_S
    4160U,	// NMSUB_S_MM
    0U,	// NOP
    0U,	// NOR
    0U,	// NOR64
    4U,	// NORI_B
    0U,	// NORImm
    0U,	// NOR_MM
    0U,	// NOR_MMR6
    0U,	// NOR_V
    0U,	// NOR_V_D_PSEUDO
    0U,	// NOR_V_H_PSEUDO
    0U,	// NOR_V_W_PSEUDO
    0U,	// NOT16_MM
    0U,	// NOT16_MMR6
    0U,	// NegRxRy16
    0U,	// NotRxRy16
    0U,	// OR
    0U,	// OR16_MM
    0U,	// OR16_MMR6
    0U,	// OR64
    4U,	// ORI_B
    6U,	// ORI_MMR6
    0U,	// OR_MM
    0U,	// OR_MMR6
    0U,	// OR_V
    0U,	// OR_V_D_PSEUDO
    0U,	// OR_V_H_PSEUDO
    0U,	// OR_V_W_PSEUDO
    6U,	// ORi
    6U,	// ORi64
    6U,	// ORi_MM
    0U,	// OrRxRxRy16
    0U,	// PACKRL_PH
    0U,	// PACKRL_PH_MM
    0U,	// PAUSE
    0U,	// PAUSE_MM
    0U,	// PAUSE_MMR6
    0U,	// PCKEV_B
    0U,	// PCKEV_D
    0U,	// PCKEV_H
    0U,	// PCKEV_W
    0U,	// PCKOD_B
    0U,	// PCKOD_D
    0U,	// PCKOD_H
    0U,	// PCKOD_W
    0U,	// PCNT_B
    0U,	// PCNT_D
    0U,	// PCNT_H
    0U,	// PCNT_W
    0U,	// PICK_PH
    0U,	// PICK_PH_MM
    0U,	// PICK_QB
    0U,	// PICK_QB_MM
    0U,	// POP
    0U,	// PRECEQU_PH_QBL
    0U,	// PRECEQU_PH_QBLA
    0U,	// PRECEQU_PH_QBLA_MM
    0U,	// PRECEQU_PH_QBL_MM
    0U,	// PRECEQU_PH_QBR
    0U,	// PRECEQU_PH_QBRA
    0U,	// PRECEQU_PH_QBRA_MM
    0U,	// PRECEQU_PH_QBR_MM
    0U,	// PRECEQ_W_PHL
    0U,	// PRECEQ_W_PHL_MM
    0U,	// PRECEQ_W_PHR
    0U,	// PRECEQ_W_PHR_MM
    0U,	// PRECEU_PH_QBL
    0U,	// PRECEU_PH_QBLA
    0U,	// PRECEU_PH_QBLA_MM
    0U,	// PRECEU_PH_QBL_MM
    0U,	// PRECEU_PH_QBR
    0U,	// PRECEU_PH_QBRA
    0U,	// PRECEU_PH_QBRA_MM
    0U,	// PRECEU_PH_QBR_MM
    0U,	// PRECRQU_S_QB_PH
    0U,	// PRECRQU_S_QB_PH_MM
    0U,	// PRECRQ_PH_W
    0U,	// PRECRQ_PH_W_MM
    0U,	// PRECRQ_QB_PH
    0U,	// PRECRQ_QB_PH_MM
    0U,	// PRECRQ_RS_PH_W
    0U,	// PRECRQ_RS_PH_W_MM
    0U,	// PRECR_QB_PH
    0U,	// PRECR_QB_PH_MMR2
    2U,	// PRECR_SRA_PH_W
    2U,	// PRECR_SRA_PH_W_MMR2
    2U,	// PRECR_SRA_R_PH_W
    2U,	// PRECR_SRA_R_PH_W_MMR2
    0U,	// PREF
    0U,	// PREFE
    0U,	// PREFE_MM
    0U,	// PREFE_MMR6
    0U,	// PREFX_MM
    0U,	// PREF_MM
    0U,	// PREF_MMR6
    0U,	// PREF_R6
    2U,	// PREPEND
    2U,	// PREPEND_MMR2
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    0U,	// PseudoCVT_D32_W
    0U,	// PseudoCVT_D64_L
    0U,	// PseudoCVT_D64_W
    0U,	// PseudoCVT_S_L
    0U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    0U,	// PseudoIndirectBranch
    0U,	// PseudoIndirectBranch64
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMFHI
    0U,	// PseudoMFHI64
    0U,	// PseudoMFLO
    0U,	// PseudoMFLO64
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMTLOHI
    0U,	// PseudoMTLOHI64
    0U,	// PseudoMTLOHI_DSP
    0U,	// PseudoMULT
    0U,	// PseudoMULTu
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    0U,	// PseudoReturn
    0U,	// PseudoReturn64
    0U,	// PseudoSDIV
    0U,	// PseudoSELECTFP_F_D32
    0U,	// PseudoSELECTFP_F_D64
    0U,	// PseudoSELECTFP_F_I
    0U,	// PseudoSELECTFP_F_I64
    0U,	// PseudoSELECTFP_F_S
    0U,	// PseudoSELECTFP_T_D32
    0U,	// PseudoSELECTFP_T_D64
    0U,	// PseudoSELECTFP_T_I
    0U,	// PseudoSELECTFP_T_I64
    0U,	// PseudoSELECTFP_T_S
    0U,	// PseudoSELECT_D32
    0U,	// PseudoSELECT_D64
    0U,	// PseudoSELECT_I
    0U,	// PseudoSELECT_I64
    0U,	// PseudoSELECT_S
    0U,	// PseudoTRUNC_W_D
    0U,	// PseudoTRUNC_W_D32
    0U,	// PseudoTRUNC_W_S
    0U,	// PseudoUDIV
    0U,	// RADDU_W_QB
    0U,	// RADDU_W_QB_MM
    0U,	// RDDSP
    0U,	// RDDSP_MM
    0U,	// RDHWR
    0U,	// RDHWR64
    0U,	// RDHWR_MM
    10U,	// RDHWR_MMR6
    0U,	// RDPGPR_MMR6
    0U,	// RECIP_D_MMR6
    0U,	// RECIP_S_MMR6
    0U,	// REPLV_PH
    0U,	// REPLV_PH_MM
    0U,	// REPLV_QB
    0U,	// REPLV_QB_MM
    0U,	// REPL_PH
    0U,	// REPL_PH_MM
    0U,	// REPL_QB
    0U,	// REPL_QB_MM
    0U,	// RINT_D
    0U,	// RINT_D_MMR6
    0U,	// RINT_S
    0U,	// RINT_S_MMR6
    0U,	// ROL
    0U,	// ROLImm
    0U,	// ROR
    0U,	// RORImm
    2U,	// ROTR
    0U,	// ROTRV
    0U,	// ROTRV_MM
    2U,	// ROTR_MM
    0U,	// ROUND_L_D64
    0U,	// ROUND_L_D_MMR6
    0U,	// ROUND_L_S
    0U,	// ROUND_L_S_MMR6
    0U,	// ROUND_W_D32
    0U,	// ROUND_W_D64
    0U,	// ROUND_W_D_MMR6
    0U,	// ROUND_W_MM
    0U,	// ROUND_W_S
    0U,	// ROUND_W_S_MM
    0U,	// ROUND_W_S_MMR6
    0U,	// RSQRT_D_MMR6
    0U,	// RSQRT_S_MMR6
    0U,	// Restore16
    0U,	// RestoreX16
    0U,	// RetRA
    0U,	// RetRA16
    10U,	// SAT_S_B
    12U,	// SAT_S_D
    14U,	// SAT_S_H
    2U,	// SAT_S_W
    10U,	// SAT_U_B
    12U,	// SAT_U_D
    14U,	// SAT_U_H
    2U,	// SAT_U_W
    0U,	// SB
    0U,	// SB16_MM
    0U,	// SB16_MMR6
    0U,	// SB64
    0U,	// SBE
    0U,	// SBE_MM
    0U,	// SBE_MMR6
    0U,	// SB_MM
    0U,	// SB_MMR6
    0U,	// SC
    0U,	// SC64
    0U,	// SC64_R6
    0U,	// SCD
    0U,	// SCD_R6
    0U,	// SCE
    0U,	// SCE_MM
    0U,	// SCE_MMR6
    0U,	// SC_MM
    0U,	// SC_R6
    0U,	// SD
    0U,	// SDBBP
    0U,	// SDBBP16_MM
    0U,	// SDBBP16_MMR6
    0U,	// SDBBP_MM
    0U,	// SDBBP_MMR6
    0U,	// SDBBP_R6
    0U,	// SDC1
    0U,	// SDC164
    0U,	// SDC1_D64_MMR6
    0U,	// SDC1_MM
    0U,	// SDC2
    0U,	// SDC2_MMR6
    0U,	// SDC2_R6
    0U,	// SDC3
    0U,	// SDIV
    0U,	// SDIV_MM
    0U,	// SDIV_MM_Pseudo
    0U,	// SDL
    0U,	// SDR
    0U,	// SDXC1
    0U,	// SDXC164
    0U,	// SD_MM64R6
    0U,	// SDivMacro
    0U,	// SEB
    0U,	// SEB64
    0U,	// SEB_MM
    0U,	// SEB_MMR6
    0U,	// SEH
    0U,	// SEH64
    0U,	// SEH_MM
    0U,	// SEH_MMR6
    0U,	// SELEQZ
    0U,	// SELEQZ64
    0U,	// SELEQZ_D
    0U,	// SELEQZ_D_MMR6
    0U,	// SELEQZ_MMR6
    0U,	// SELEQZ_S
    0U,	// SELEQZ_S_MMR6
    0U,	// SELNEZ
    0U,	// SELNEZ64
    0U,	// SELNEZ_D
    0U,	// SELNEZ_D_MMR6
    0U,	// SELNEZ_MMR6
    0U,	// SELNEZ_S
    0U,	// SELNEZ_S_MMR6
    24U,	// SEL_D
    24U,	// SEL_D_MMR6
    24U,	// SEL_S
    24U,	// SEL_S_MMR6
    0U,	// SEQ
    0U,	// SEQi
    0U,	// SH
    0U,	// SH16_MM
    0U,	// SH16_MMR6
    0U,	// SH64
    0U,	// SHE
    0U,	// SHE_MM
    0U,	// SHE_MMR6
    4U,	// SHF_B
    4U,	// SHF_H
    4U,	// SHF_W
    0U,	// SHILO
    0U,	// SHILOV
    0U,	// SHILOV_MM
    0U,	// SHILO_MM
    0U,	// SHLLV_PH
    0U,	// SHLLV_PH_MM
    0U,	// SHLLV_QB
    0U,	// SHLLV_QB_MM
    0U,	// SHLLV_S_PH
    0U,	// SHLLV_S_PH_MM
    0U,	// SHLLV_S_W
    0U,	// SHLLV_S_W_MM
    14U,	// SHLL_PH
    14U,	// SHLL_PH_MM
    10U,	// SHLL_QB
    10U,	// SHLL_QB_MM
    14U,	// SHLL_S_PH
    14U,	// SHLL_S_PH_MM
    2U,	// SHLL_S_W
    2U,	// SHLL_S_W_MM
    0U,	// SHRAV_PH
    0U,	// SHRAV_PH_MM
    0U,	// SHRAV_QB
    0U,	// SHRAV_QB_MMR2
    0U,	// SHRAV_R_PH
    0U,	// SHRAV_R_PH_MM
    0U,	// SHRAV_R_QB
    0U,	// SHRAV_R_QB_MMR2
    0U,	// SHRAV_R_W
    0U,	// SHRAV_R_W_MM
    14U,	// SHRA_PH
    14U,	// SHRA_PH_MM
    10U,	// SHRA_QB
    10U,	// SHRA_QB_MMR2
    14U,	// SHRA_R_PH
    14U,	// SHRA_R_PH_MM
    10U,	// SHRA_R_QB
    10U,	// SHRA_R_QB_MMR2
    2U,	// SHRA_R_W
    2U,	// SHRA_R_W_MM
    0U,	// SHRLV_PH
    0U,	// SHRLV_PH_MMR2
    0U,	// SHRLV_QB
    0U,	// SHRLV_QB_MM
    14U,	// SHRL_PH
    14U,	// SHRL_PH_MMR2
    10U,	// SHRL_QB
    10U,	// SHRL_QB_MM
    0U,	// SH_MM
    0U,	// SH_MMR6
    148U,	// SLDI_B
    34U,	// SLDI_D
    144U,	// SLDI_H
    36U,	// SLDI_W
    152U,	// SLD_B
    152U,	// SLD_D
    152U,	// SLD_H
    152U,	// SLD_W
    2U,	// SLL
    0U,	// SLL16_MM
    0U,	// SLL16_MMR6
    0U,	// SLL64_32
    0U,	// SLL64_64
    10U,	// SLLI_B
    12U,	// SLLI_D
    14U,	// SLLI_H
    2U,	// SLLI_W
    0U,	// SLLV
    0U,	// SLLV_MM
    0U,	// SLL_B
    0U,	// SLL_D
    0U,	// SLL_H
    2U,	// SLL_MM
    2U,	// SLL_MMR6
    0U,	// SLL_W
    0U,	// SLT
    0U,	// SLT64
    0U,	// SLT_MM
    0U,	// SLTi
    0U,	// SLTi64
    0U,	// SLTi_MM
    0U,	// SLTiu
    0U,	// SLTiu64
    0U,	// SLTiu_MM
    0U,	// SLTu
    0U,	// SLTu64
    0U,	// SLTu_MM
    0U,	// SNE
    0U,	// SNEi
    0U,	// SNZ_B_PSEUDO
    0U,	// SNZ_D_PSEUDO
    0U,	// SNZ_H_PSEUDO
    0U,	// SNZ_V_PSEUDO
    0U,	// SNZ_W_PSEUDO
    142U,	// SPLATI_B
    28U,	// SPLATI_D
    138U,	// SPLATI_H
    136U,	// SPLATI_W
    128U,	// SPLAT_B
    128U,	// SPLAT_D
    128U,	// SPLAT_H
    128U,	// SPLAT_W
    0U,	// SQRT_D_MMR6
    0U,	// SQRT_S_MMR6
    2U,	// SRA
    10U,	// SRAI_B
    12U,	// SRAI_D
    14U,	// SRAI_H
    2U,	// SRAI_W
    10U,	// SRARI_B
    12U,	// SRARI_D
    14U,	// SRARI_H
    2U,	// SRARI_W
    0U,	// SRAR_B
    0U,	// SRAR_D
    0U,	// SRAR_H
    0U,	// SRAR_W
    0U,	// SRAV
    0U,	// SRAV_MM
    0U,	// SRA_B
    0U,	// SRA_D
    0U,	// SRA_H
    2U,	// SRA_MM
    0U,	// SRA_W
    2U,	// SRL
    0U,	// SRL16_MM
    0U,	// SRL16_MMR6
    10U,	// SRLI_B
    12U,	// SRLI_D
    14U,	// SRLI_H
    2U,	// SRLI_W
    10U,	// SRLRI_B
    12U,	// SRLRI_D
    14U,	// SRLRI_H
    2U,	// SRLRI_W
    0U,	// SRLR_B
    0U,	// SRLR_D
    0U,	// SRLR_H
    0U,	// SRLR_W
    0U,	// SRLV
    0U,	// SRLV_MM
    0U,	// SRL_B
    0U,	// SRL_D
    0U,	// SRL_H
    2U,	// SRL_MM
    0U,	// SRL_W
    0U,	// SSNOP
    0U,	// SSNOP_MM
    0U,	// SSNOP_MMR6
    0U,	// STORE_ACC128
    0U,	// STORE_ACC64
    0U,	// STORE_ACC64DSP
    0U,	// STORE_CCOND_DSP
    0U,	// ST_B
    0U,	// ST_D
    0U,	// ST_H
    0U,	// ST_W
    0U,	// SUB
    0U,	// SUBQH_PH
    0U,	// SUBQH_PH_MMR2
    0U,	// SUBQH_R_PH
    0U,	// SUBQH_R_PH_MMR2
    0U,	// SUBQH_R_W
    0U,	// SUBQH_R_W_MMR2
    0U,	// SUBQH_W
    0U,	// SUBQH_W_MMR2
    0U,	// SUBQ_PH
    0U,	// SUBQ_PH_MM
    0U,	// SUBQ_S_PH
    0U,	// SUBQ_S_PH_MM
    0U,	// SUBQ_S_W
    0U,	// SUBQ_S_W_MM
    0U,	// SUBSUS_U_B
    0U,	// SUBSUS_U_D
    0U,	// SUBSUS_U_H
    0U,	// SUBSUS_U_W
    0U,	// SUBSUU_S_B
    0U,	// SUBSUU_S_D
    0U,	// SUBSUU_S_H
    0U,	// SUBSUU_S_W
    0U,	// SUBS_S_B
    0U,	// SUBS_S_D
    0U,	// SUBS_S_H
    0U,	// SUBS_S_W
    0U,	// SUBS_U_B
    0U,	// SUBS_U_D
    0U,	// SUBS_U_H
    0U,	// SUBS_U_W
    0U,	// SUBU16_MM
    0U,	// SUBU16_MMR6
    0U,	// SUBUH_QB
    0U,	// SUBUH_QB_MMR2
    0U,	// SUBUH_R_QB
    0U,	// SUBUH_R_QB_MMR2
    0U,	// SUBU_MMR6
    0U,	// SUBU_PH
    0U,	// SUBU_PH_MMR2
    0U,	// SUBU_QB
    0U,	// SUBU_QB_MM
    0U,	// SUBU_S_PH
    0U,	// SUBU_S_PH_MMR2
    0U,	// SUBU_S_QB
    0U,	// SUBU_S_QB_MM
    2U,	// SUBVI_B
    2U,	// SUBVI_D
    2U,	// SUBVI_H
    2U,	// SUBVI_W
    0U,	// SUBV_B
    0U,	// SUBV_D
    0U,	// SUBV_H
    0U,	// SUBV_W
    0U,	// SUB_MM
    0U,	// SUB_MMR6
    0U,	// SUBu
    0U,	// SUBu_MM
    0U,	// SUXC1
    0U,	// SUXC164
    0U,	// SUXC1_MM
    0U,	// SW
    0U,	// SW16_MM
    0U,	// SW16_MMR6
    0U,	// SW64
    0U,	// SWC1
    0U,	// SWC1_MM
    0U,	// SWC2
    0U,	// SWC2_MMR6
    0U,	// SWC2_R6
    0U,	// SWC3
    0U,	// SWE
    0U,	// SWE_MM
    0U,	// SWE_MMR6
    0U,	// SWL
    0U,	// SWL64
    0U,	// SWLE
    0U,	// SWLE_MM
    0U,	// SWL_MM
    0U,	// SWM16_MM
    0U,	// SWM16_MMR6
    0U,	// SWM32_MM
    0U,	// SWM_MM
    0U,	// SWP_MM
    0U,	// SWP_MMR6
    0U,	// SWR
    0U,	// SWR64
    0U,	// SWRE
    0U,	// SWRE_MM
    0U,	// SWR_MM
    0U,	// SWSP_MM
    0U,	// SWSP_MMR6
    0U,	// SWXC1
    0U,	// SWXC1_MM
    0U,	// SW_MM
    0U,	// SW_MMR6
    0U,	// SYNC
    0U,	// SYNCI
    0U,	// SYNCI_MMR6
    0U,	// SYNC_MM
    0U,	// SYNC_MMR6
    0U,	// SYSCALL
    0U,	// SYSCALL_MM
    0U,	// SZ_B_PSEUDO
    0U,	// SZ_D_PSEUDO
    0U,	// SZ_H_PSEUDO
    0U,	// SZ_V_PSEUDO
    0U,	// SZ_W_PSEUDO
    0U,	// Save16
    0U,	// SaveX16
    0U,	// SbRxRyOffMemX16
    0U,	// SebRx16
    0U,	// SehRx16
    0U,	// SelBeqZ
    0U,	// SelBneZ
    0U,	// SelTBteqZCmp
    0U,	// SelTBteqZCmpi
    0U,	// SelTBteqZSlt
    0U,	// SelTBteqZSlti
    0U,	// SelTBteqZSltiu
    0U,	// SelTBteqZSltu
    1U,	// SelTBtneZCmp
    1U,	// SelTBtneZCmpi
    1U,	// SelTBtneZSlt
    1U,	// SelTBtneZSlti
    1U,	// SelTBtneZSltiu
    1U,	// SelTBtneZSltu
    0U,	// ShRxRyOffMemX16
    2U,	// SllX16
    0U,	// SllvRxRy16
    0U,	// SltCCRxRy16
    0U,	// SltRxRy16
    0U,	// SltiCCRxImmX16
    0U,	// SltiRxImm16
    0U,	// SltiRxImmX16
    0U,	// SltiuCCRxImmX16
    0U,	// SltiuRxImm16
    0U,	// SltiuRxImmX16
    0U,	// SltuCCRxRy16
    0U,	// SltuRxRy16
    0U,	// SltuRxRyRz16
    2U,	// SraX16
    0U,	// SravRxRy16
    2U,	// SrlX16
    0U,	// SrlvRxRy16
    0U,	// SubuRxRyRz16
    0U,	// SwRxRyOffMemX16
    0U,	// SwRxSpImmX16
    0U,	// TAILCALL
    0U,	// TAILCALL64_R
    0U,	// TAILCALL_R
    38U,	// TEQ
    0U,	// TEQI
    0U,	// TEQI_MM
    14U,	// TEQ_MM
    38U,	// TGE
    0U,	// TGEI
    0U,	// TGEIU
    0U,	// TGEIU_MM
    0U,	// TGEI_MM
    38U,	// TGEU
    14U,	// TGEU_MM
    14U,	// TGE_MM
    0U,	// TLBINV
    0U,	// TLBINVF
    0U,	// TLBINVF_MMR6
    0U,	// TLBINV_MMR6
    0U,	// TLBP
    0U,	// TLBP_MM
    0U,	// TLBR
    0U,	// TLBR_MM
    0U,	// TLBWI
    0U,	// TLBWI_MM
    0U,	// TLBWR
    0U,	// TLBWR_MM
    38U,	// TLT
    0U,	// TLTI
    0U,	// TLTIU_MM
    0U,	// TLTI_MM
    38U,	// TLTU
    14U,	// TLTU_MM
    14U,	// TLT_MM
    38U,	// TNE
    0U,	// TNEI
    0U,	// TNEI_MM
    14U,	// TNE_MM
    0U,	// TRAP
    0U,	// TRUNC_L_D64
    0U,	// TRUNC_L_D_MMR6
    0U,	// TRUNC_L_S
    0U,	// TRUNC_L_S_MMR6
    0U,	// TRUNC_W_D32
    0U,	// TRUNC_W_D64
    0U,	// TRUNC_W_D_MMR6
    0U,	// TRUNC_W_MM
    0U,	// TRUNC_W_S
    0U,	// TRUNC_W_S_MM
    0U,	// TRUNC_W_S_MMR6
    0U,	// TTLTIU
    0U,	// UDIV
    0U,	// UDIV_MM
    0U,	// UDIV_MM_Pseudo
    0U,	// UDivMacro
    0U,	// Ulh
    0U,	// Ulhu
    0U,	// Ulw
    0U,	// V3MULU
    0U,	// VMM0
    0U,	// VMULU
    24U,	// VSHF_B
    24U,	// VSHF_D
    24U,	// VSHF_H
    24U,	// VSHF_W
    0U,	// WAIT
    0U,	// WAIT_MM
    0U,	// WAIT_MMR6
    0U,	// WRDSP
    0U,	// WRDSP_MM
    0U,	// WRPGPR_MMR6
    0U,	// WSBH
    0U,	// WSBH_MM
    0U,	// WSBH_MMR6
    0U,	// XOR
    0U,	// XOR16_MM
    0U,	// XOR16_MMR6
    0U,	// XOR64
    4U,	// XORI_B
    6U,	// XORI_MMR6
    0U,	// XOR_MM
    0U,	// XOR_MMR6
    0U,	// XOR_V
    0U,	// XOR_V_D_PSEUDO
    0U,	// XOR_V_H_PSEUDO
    0U,	// XOR_V_W_PSEUDO
    6U,	// XORi
    6U,	// XORi64
    6U,	// XORi_MM
    0U,	// XorRxRxRy16
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MI->getOpcode()] << 0;
  Bits |= (uint64_t)OpInfo1[MI->getOpcode()] << 32;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 14) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, PATCHABLE_FUNCTION_EN...
    return;
    break;
  case 1:
    // ABSMacro, ABSQ_S_PH, ABSQ_S_PH_MM, ABSQ_S_QB, ABSQ_S_QB_MMR2, ABSQ_S_W...
    printOperand(MI, 0, O);
    break;
  case 2:
    // ADDIUS5_MM, CTC1, CTC1_MM, DAHI, DAHI_MM64R6, DATI, DATI_MM64R6, DMTC0...
    printOperand(MI, 1, O);
    O << ", ";
    break;
  case 3:
    // AND16_MM, AND16_MMR6, LSA_MMR6, MTHC1_D32, MTHC1_D32_MMR6, MTHC1_D64, ...
    printOperand(MI, 2, O);
    O << ", ";
    break;
  case 4:
    // BREAK, BREAK_MM, BREAK_MMR6, SDBBP_MM, SYSCALL_MM, WAIT_MM, WAIT_MMR6
    printUImm<10>(MI, 0, O);
    break;
  case 5:
    // BREAK16_MM, BREAK16_MMR6, SDBBP16_MM, SDBBP16_MMR6
    printUImm<4>(MI, 0, O);
    return;
    break;
  case 6:
    // CACHE, CACHEE, CACHEE_MM, CACHEE_MMR6, CACHE_MM, CACHE_MMR6, CACHE_R6,...
    printUImm<5>(MI, 2, O);
    O << ", ";
    break;
  case 7:
    // FCMP_D32, FCMP_D32_MM, FCMP_D64, FCMP_S32, FCMP_S32_MM
    printFCCOperand(MI, 2, O);
    break;
  case 8:
    // Jal16, JalB16
    printUImm<26>(MI, 0, O);
    break;
  case 9:
    // LWM16_MM, LWM16_MMR6, LWM32_MM, LWM_MM, MOVEP_MM, SWM16_MM, SWM16_MMR6...
    printRegisterList(MI, 0, O);
    O << ", ";
    break;
  case 10:
    // LWP_MM, LWP_MMR6, SWP_MM, SWP_MMR6
    printRegisterPair(MI, 0, O);
    O << ", ";
    printMemOperand(MI, 2, O);
    return;
    break;
  case 11:
    // SDBBP, SDBBP_MMR6, SDBBP_R6, SYSCALL
    printUImm<20>(MI, 0, O);
    return;
    break;
  case 12:
    // SYNC, SYNC_MM, SYNC_MMR6
    printUImm<5>(MI, 0, O);
    return;
    break;
  case 13:
    // SYNCI, SYNCI_MMR6
    printMemOperand(MI, 0, O);
    return;
    break;
  case 14:
    // SelBeqZ, SelBneZ, SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZ...
    printOperand(MI, 3, O);
    break;
  }


  // Fragment 1 encoded into 5 bits for 18 unique commands.
  switch ((Bits >> 18) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSMacro, ABSQ_S_PH, ABSQ_S_PH_MM, ABSQ_S_QB, ABSQ_S_QB_MMR2, ABSQ_S_W...
    O << ", ";
    break;
  case 1:
    // ADDIUS5_MM, DAHI, DAHI_MM64R6, DATI, DATI_MM64R6, MOVEP_MM, MultRxRyRz...
    printOperand(MI, 2, O);
    break;
  case 2:
    // ADDIUSP_MM, AddiuSpImmX16, B16_MM, BAL, BALC, BALC_MMR6, BC, BC16_MMR6...
    return;
    break;
  case 3:
    // AND16_MM, AND16_MMR6, LSA_MMR6, OR16_MM, OR16_MMR6, PREFX_MM, XOR16_MM...
    printOperand(MI, 1, O);
    break;
  case 4:
    // AddiuRxPcImmX16
    O << ", $pc, ";
    printOperand(MI, 1, O);
    return;
    break;
  case 5:
    // AddiuSpImm16, Bimm16
    O << " # 16 bit inst";
    return;
    break;
  case 6:
    // Bteqz16, Btnez16
    O << "  # 16 bit inst";
    return;
    break;
  case 7:
    // CACHE, CACHEE, CACHEE_MM, CACHEE_MMR6, CACHE_MM, CACHE_MMR6, CACHE_R6,...
    printMemOperand(MI, 0, O);
    return;
    break;
  case 8:
    // CTC1, CTC1_MM, DMTC0, DMTC0_MM64R6, DMTC1, DMTC1_MM64R6, DMTC2, DMTC2_...
    printOperand(MI, 0, O);
    break;
  case 9:
    // FCMP_D32, FCMP_D32_MM, FCMP_D64
    O << ".d\t";
    printOperand(MI, 0, O);
    O << ", ";
    printOperand(MI, 1, O);
    return;
    break;
  case 10:
    // FCMP_S32, FCMP_S32_MM
    O << ".s\t";
    printOperand(MI, 0, O);
    O << ", ";
    printOperand(MI, 1, O);
    return;
    break;
  case 11:
    // INSERT_B, INSERT_D, INSERT_H, INSERT_W, INSVE_B, INSVE_D, INSVE_H, INS...
    O << '[';
    break;
  case 12:
    // Jal16
    O << "\n\tnop";
    return;
    break;
  case 13:
    // JalB16
    O << "\t# branch\n\tnop";
    return;
    break;
  case 14:
    // LWM16_MM, LWM16_MMR6, LWM32_MM, LWM_MM, SWM16_MM, SWM16_MMR6, SWM32_MM...
    printMemOperand(MI, 1, O);
    return;
    break;
  case 15:
    // LwConstant32
    O << ", 1f\n\tb\t2f\n\t.align\t2\n1: \t.word\t";
    printOperand(MI, 1, O);
    O << "\n2:";
    return;
    break;
  case 16:
    // SC, SC64, SC64_R6, SCD, SCD_R6, SCE, SCE_MM, SC_MM, SC_R6
    printMemOperand(MI, 2, O);
    return;
    break;
  case 17:
    // SelBeqZ, SelBneZ
    O << ", .+4\n\t\n\tmove ";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 23 unique commands.
  switch ((Bits >> 23) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSMacro, ABSQ_S_PH, ABSQ_S_PH_MM, ABSQ_S_QB, ABSQ_S_QB_MMR2, ABSQ_S_W...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ADDIUS5_MM, AND16_MM, AND16_MMR6, CTC1, CTC1_MM, DAHI, DAHI_MM64R6, DA...
    return;
    break;
  case 2:
    // AddiuRxRxImm16, AddiuRxRxImmX16, AndRxRxRy16, BINSLI_B, BINSLI_D, BINS...
    printOperand(MI, 2, O);
    break;
  case 3:
    // AddiuRxRyOffMemX16, LEA_ADDiu, LEA_ADDiu64, LEA_ADDiu_MM
    printMemOperandEA(MI, 1, O);
    return;
    break;
  case 4:
    // BBIT0, BBIT032, BBIT1, BBIT132
    printUImm<5>(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 5:
    // BREAK, BREAK_MM, BREAK_MMR6, RDDSP, REPL_PH, REPL_PH_MM, WRDSP
    printUImm<10>(MI, 1, O);
    return;
    break;
  case 6:
    // DMFC2_OCTEON, DMTC2_OCTEON, LUI_MMR6, LUi, LUi64, LUi_MM
    printUImm<16>(MI, 1, O);
    return;
    break;
  case 7:
    // DMTC0, DMTC0_MM64R6, DMTC2, LSA_MMR6, MOVEP_MM, MTC0, MTC0_MMR6, MTC2,...
    O << ", ";
    break;
  case 8:
    // INSERT_B
    printUImm<4>(MI, 3, O);
    O << "], ";
    printOperand(MI, 2, O);
    return;
    break;
  case 9:
    // INSERT_D
    printUImm<1>(MI, 3, O);
    O << "], ";
    printOperand(MI, 2, O);
    return;
    break;
  case 10:
    // INSERT_H
    printUImm<3>(MI, 3, O);
    O << "], ";
    printOperand(MI, 2, O);
    return;
    break;
  case 11:
    // INSERT_W
    printUImm<2>(MI, 3, O);
    O << "], ";
    printOperand(MI, 2, O);
    return;
    break;
  case 12:
    // INSVE_B
    printUImm<4>(MI, 2, O);
    O << "], ";
    printOperand(MI, 3, O);
    O << '[';
    printUImm<0>(MI, 4, O);
    O << ']';
    return;
    break;
  case 13:
    // INSVE_D
    printUImm<1>(MI, 2, O);
    O << "], ";
    printOperand(MI, 3, O);
    O << '[';
    printUImm<0>(MI, 4, O);
    O << ']';
    return;
    break;
  case 14:
    // INSVE_H
    printUImm<3>(MI, 2, O);
    O << "], ";
    printOperand(MI, 3, O);
    O << '[';
    printUImm<0>(MI, 4, O);
    O << ']';
    return;
    break;
  case 15:
    // INSVE_W
    printUImm<2>(MI, 2, O);
    O << "], ";
    printOperand(MI, 3, O);
    O << '[';
    printUImm<0>(MI, 4, O);
    O << ']';
    return;
    break;
  case 16:
    // LB, LB64, LBE, LBE_MM, LBE_MMR6, LBU16_MM, LBUE_MMR6, LBU_MMR6, LB_MM,...
    printMemOperand(MI, 1, O);
    return;
    break;
  case 17:
    // MultRxRyRz16, MultuRxRyRz16
    O << "\n\tmflo\t";
    printOperand(MI, 0, O);
    return;
    break;
  case 18:
    // PREFX_MM
    O << '(';
    printOperand(MI, 0, O);
    O << ')';
    return;
    break;
  case 19:
    // RDDSP_MM, WRDSP_MM
    printUImm<7>(MI, 1, O);
    return;
    break;
  case 20:
    // REPL_QB, REPL_QB_MM
    printUImm<8>(MI, 1, O);
    return;
    break;
  case 21:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    printOperand(MI, 4, O);
    break;
  case 22:
    // SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImmX16, SltuCCRxRy16, SltuRxRyRz...
    O << "\n\tmove\t";
    printOperand(MI, 0, O);
    O << ", $t8";
    return;
    break;
  }


  // Fragment 3 encoded into 5 bits for 17 unique commands.
  switch ((Bits >> 28) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSMacro, ABSQ_S_PH, ABSQ_S_PH_MM, ABSQ_S_QB, ABSQ_S_QB_MMR2, ABSQ_S_W...
    return;
    break;
  case 1:
    // ADD, ADDIUR2_MM, ADDIU_MMR6, ADDQH_PH, ADDQH_PH_MMR2, ADDQH_R_PH, ADDQ...
    O << ", ";
    break;
  case 2:
    // AddiuRxRxImm16, LwRxPcTcp16
    O << "\t# 16 bit inst";
    return;
    break;
  case 3:
    // BeqzRxImm16, BnezRxImm16
    O << "  # 16 bit inst";
    return;
    break;
  case 4:
    // BteqzT8CmpX16, BteqzT8CmpiX16, BteqzT8SltX16, BteqzT8SltiX16, BteqzT8S...
    O << "\n\tbteqz\t";
    printOperand(MI, 2, O);
    return;
    break;
  case 5:
    // BtnezT8CmpX16, BtnezT8CmpiX16, BtnezT8SltX16, BtnezT8SltiX16, BtnezT8S...
    O << "\n\tbtnez\t";
    printOperand(MI, 2, O);
    return;
    break;
  case 6:
    // COPY_S_B, COPY_S_D, COPY_S_H, COPY_S_W, COPY_U_B, COPY_U_H, COPY_U_W, ...
    O << '[';
    break;
  case 7:
    // CmpiRxImm16, LiRxImm16, SltiRxImm16, SltiuRxImm16
    O << " \t# 16 bit inst";
    return;
    break;
  case 8:
    // DMTC0, DMTC0_MM64R6, DMTC2, MTC0, MTC0_MMR6, MTC2, MTHC0_MMR6
    printUImm<3>(MI, 2, O);
    return;
    break;
  case 9:
    // DSLL64_32
    O << ", 32";
    return;
    break;
  case 10:
    // GotPrologue16
    O << "\n\taddiu\t";
    printOperand(MI, 1, O);
    O << ", $pc, ";
    printOperand(MI, 3, O);
    O << "\n ";
    return;
    break;
  case 11:
    // LBUX, LBUX_MM, LDXC1, LDXC164, LHX, LHX_MM, LUXC1, LUXC164, LUXC1_MM, ...
    O << '(';
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 12:
    // LSA_MMR6
    printOperand(MI, 0, O);
    O << ", ";
    printUImm<2, 1>(MI, 3, O);
    return;
    break;
  case 13:
    // MOVEP_MM
    printOperand(MI, 3, O);
    return;
    break;
  case 14:
    // SLL64_32, SLL64_64
    O << ", 0";
    return;
    break;
  case 15:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    O << "\n\tbteqz\t.+4\n\tmove ";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 16:
    // SelTBtneZCmp, SelTBtneZCmpi, SelTBtneZSlt, SelTBtneZSlti, SelTBtneZSlt...
    O << "\n\tbtnez\t.+4\n\tmove ";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 4 encoded into 5 bits for 20 unique commands.
  switch ((Bits >> 33) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD, ADDIUR2_MM, ADDIU_MMR6, ADDQH_PH, ADDQH_PH_MMR2, ADDQH_R_PH, ADDQ...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ADDVI_B, ADDVI_D, ADDVI_H, ADDVI_W, APPEND, APPEND_MMR2, BCLRI_W, BNEG...
    printUImm<5>(MI, 2, O);
    break;
  case 2:
    // ANDI_B, NORI_B, ORI_B, SHF_B, SHF_H, SHF_W, XORI_B
    printUImm<8>(MI, 2, O);
    return;
    break;
  case 3:
    // ANDI_MMR6, ANDi, ANDi64, ANDi_MM, ORI_MMR6, ORi, ORi64, ORi_MM, XORI_M...
    printUImm<16>(MI, 2, O);
    return;
    break;
  case 4:
    // BALIGN, BALIGN_MMR2, COPY_S_W, COPY_U_W, SPLATI_W
    printUImm<2>(MI, 2, O);
    break;
  case 5:
    // BCLRI_B, BNEGI_B, BSETI_B, COPY_S_H, COPY_U_H, DMFC0, DMFC0_MM64R6, DM...
    printUImm<3>(MI, 2, O);
    break;
  case 6:
    // BCLRI_D, BNEGI_D, BSETI_D, DINS, DROTR, DROTR_MM64R6, DSLL, DSLL_MM64R...
    printUImm<6>(MI, 2, O);
    break;
  case 7:
    // BCLRI_H, BNEGI_H, BSETI_H, COPY_S_B, COPY_U_B, SAT_S_H, SAT_U_H, SHLL_...
    printUImm<4>(MI, 2, O);
    break;
  case 8:
    // BINSLI_B, BINSRI_B, SLDI_H
    printUImm<3>(MI, 3, O);
    break;
  case 9:
    // BINSLI_D, BINSRI_D
    printUImm<6>(MI, 3, O);
    return;
    break;
  case 10:
    // BINSLI_H, BINSRI_H, SLDI_B
    printUImm<4>(MI, 3, O);
    break;
  case 11:
    // BINSLI_W, BINSRI_W
    printUImm<5>(MI, 3, O);
    return;
    break;
  case 12:
    // BINSL_B, BINSL_D, BINSL_H, BINSL_W, BINSR_B, BINSR_D, BINSR_H, BINSR_W...
    printOperand(MI, 3, O);
    break;
  case 13:
    // BMNZI_B, BMZI_B, BSELI_B
    printUImm<8>(MI, 3, O);
    return;
    break;
  case 14:
    // COPY_S_D, SPLATI_D
    printUImm<1>(MI, 2, O);
    O << ']';
    return;
    break;
  case 15:
    // DEXTU, DEXTU_MM64R6, DINSU, DINSU_MM64R6
    printUImm<5, 32>(MI, 2, O);
    O << ", ";
    break;
  case 16:
    // FADD_D_MMR6, FADD_S_MMR6, FDIV_D_MMR6, FDIV_S_MMR6, FMUL_D_MMR6, FMUL_...
    printOperand(MI, 1, O);
    return;
    break;
  case 17:
    // SLDI_D
    printUImm<1>(MI, 3, O);
    O << ']';
    return;
    break;
  case 18:
    // SLDI_W
    printUImm<2>(MI, 3, O);
    O << ']';
    return;
    break;
  case 19:
    // TEQ, TGE, TGEU, TLT, TLTU, TNE
    printUImm<10>(MI, 2, O);
    return;
    break;
  }


  // Fragment 5 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 38) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD, ADDIUR2_MM, ADDIU_MMR6, ADDQH_PH, ADDQH_PH_MMR2, ADDQH_R_PH, ADDQ...
    return;
    break;
  case 1:
    // ALIGN, ALIGN_MMR6, CINS, CINS32, DALIGN, DALIGN_MM64R6, DEXT, DEXTM, D...
    O << ", ";
    break;
  case 2:
    // COPY_S_B, COPY_S_H, COPY_S_W, COPY_U_B, COPY_U_H, COPY_U_W, SLDI_B, SL...
    O << ']';
    return;
    break;
  case 3:
    // DEXTU, DEXTU_MM64R6
    printUImm<5, 1>(MI, 3, O);
    return;
    break;
  case 4:
    // DINSU, DINSU_MM64R6
    printUImm<6>(MI, 3, O);
    return;
    break;
  }


  // Fragment 6 encoded into 4 bits for 9 unique commands.
  switch ((Bits >> 41) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ALIGN, ALIGN_MMR6
    printUImm<2>(MI, 3, O);
    return;
    break;
  case 1:
    // CINS, CINS32, EXTS, EXTS32
    printUImm<5>(MI, 3, O);
    return;
    break;
  case 2:
    // DALIGN, DALIGN_MM64R6
    printUImm<3>(MI, 3, O);
    return;
    break;
  case 3:
    // DEXT, DEXT_MM64R6, EXT, EXT_MM, EXT_MMR6
    printUImm<5, 1>(MI, 3, O);
    return;
    break;
  case 4:
    // DEXTM, DEXTM_MM64R6
    printUImm<5, 33>(MI, 3, O);
    return;
    break;
  case 5:
    // DINS, DINSM, DINS_MM64R6, INS, INS_MM, INS_MMR6
    printUImm<6>(MI, 3, O);
    return;
    break;
  case 6:
    // DINSM_MM64R6
    printUImm<6, 2>(MI, 3, O);
    return;
    break;
  case 7:
    // DLSA, DLSA_R6, LSA, LSA_R6
    printUImm<2, 1>(MI, 3, O);
    return;
    break;
  case 8:
    // MADD_D32, MADD_D32_MM, MADD_D64, MADD_S, MADD_S_MM, MSUB_D32, MSUB_D32...
    printOperand(MI, 3, O);
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *MipsInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 418 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'f', '1', '0', 0,
  /* 4 */ 'w', '1', '0', 0,
  /* 8 */ 'f', '2', '0', 0,
  /* 12 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '0', 0,
  /* 25 */ 'w', '2', '0', 0,
  /* 29 */ 'f', '3', '0', 0,
  /* 33 */ 'w', '3', '0', 0,
  /* 37 */ 'a', 'c', '0', 0,
  /* 41 */ 'f', 'c', 'c', '0', 0,
  /* 46 */ 'f', '0', 0,
  /* 49 */ 'm', 'p', 'l', '0', 0,
  /* 54 */ 'p', '0', 0,
  /* 57 */ 'w', '0', 0,
  /* 60 */ 'f', '1', '1', 0,
  /* 64 */ 'w', '1', '1', 0,
  /* 68 */ 'f', '2', '1', 0,
  /* 72 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '1', 0,
  /* 85 */ 'w', '2', '1', 0,
  /* 89 */ 'f', '3', '1', 0,
  /* 93 */ 'w', '3', '1', 0,
  /* 97 */ 'a', 'c', '1', 0,
  /* 101 */ 'f', 'c', 'c', '1', 0,
  /* 106 */ 'f', '1', 0,
  /* 109 */ 'm', 'p', 'l', '1', 0,
  /* 114 */ 'p', '1', 0,
  /* 117 */ 'w', '1', 0,
  /* 120 */ 'f', '1', '2', 0,
  /* 124 */ 'w', '1', '2', 0,
  /* 128 */ 'f', '2', '2', 0,
  /* 132 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '2', 0,
  /* 145 */ 'w', '2', '2', 0,
  /* 149 */ 'a', 'c', '2', 0,
  /* 153 */ 'f', 'c', 'c', '2', 0,
  /* 158 */ 'f', '2', 0,
  /* 161 */ 'm', 'p', 'l', '2', 0,
  /* 166 */ 'p', '2', 0,
  /* 169 */ 'w', '2', 0,
  /* 172 */ 'f', '1', '3', 0,
  /* 176 */ 'w', '1', '3', 0,
  /* 180 */ 'f', '2', '3', 0,
  /* 184 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '3', 0,
  /* 197 */ 'w', '2', '3', 0,
  /* 201 */ 'a', 'c', '3', 0,
  /* 205 */ 'f', 'c', 'c', '3', 0,
  /* 210 */ 'f', '3', 0,
  /* 213 */ 'w', '3', 0,
  /* 216 */ 'f', '1', '4', 0,
  /* 220 */ 'w', '1', '4', 0,
  /* 224 */ 'f', '2', '4', 0,
  /* 228 */ 'w', '2', '4', 0,
  /* 232 */ 'f', 'c', 'c', '4', 0,
  /* 237 */ 'f', '4', 0,
  /* 240 */ 'w', '4', 0,
  /* 243 */ 'f', '1', '5', 0,
  /* 247 */ 'w', '1', '5', 0,
  /* 251 */ 'f', '2', '5', 0,
  /* 255 */ 'w', '2', '5', 0,
  /* 259 */ 'f', 'c', 'c', '5', 0,
  /* 264 */ 'f', '5', 0,
  /* 267 */ 'w', '5', 0,
  /* 270 */ 'f', '1', '6', 0,
  /* 274 */ 'w', '1', '6', 0,
  /* 278 */ 'f', '2', '6', 0,
  /* 282 */ 'w', '2', '6', 0,
  /* 286 */ 'f', 'c', 'c', '6', 0,
  /* 291 */ 'f', '6', 0,
  /* 294 */ 'w', '6', 0,
  /* 297 */ 'f', '1', '7', 0,
  /* 301 */ 'w', '1', '7', 0,
  /* 305 */ 'f', '2', '7', 0,
  /* 309 */ 'w', '2', '7', 0,
  /* 313 */ 'f', 'c', 'c', '7', 0,
  /* 318 */ 'f', '7', 0,
  /* 321 */ 'w', '7', 0,
  /* 324 */ 'f', '1', '8', 0,
  /* 328 */ 'w', '1', '8', 0,
  /* 332 */ 'f', '2', '8', 0,
  /* 336 */ 'w', '2', '8', 0,
  /* 340 */ 'f', '8', 0,
  /* 343 */ 'w', '8', 0,
  /* 346 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '1', '6', '_', '1', '9', 0,
  /* 362 */ 'f', '1', '9', 0,
  /* 366 */ 'w', '1', '9', 0,
  /* 370 */ 'f', '2', '9', 0,
  /* 374 */ 'w', '2', '9', 0,
  /* 378 */ 'f', '9', 0,
  /* 381 */ 'w', '9', 0,
  /* 384 */ 'D', 'S', 'P', 'E', 'F', 'I', 0,
  /* 391 */ 'r', 'a', 0,
  /* 394 */ 'h', 'w', 'r', '_', 'c', 'c', 0,
  /* 401 */ 'p', 'c', 0,
  /* 404 */ 'D', 'S', 'P', 'C', 'C', 'o', 'n', 'd', 0,
  /* 413 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', 0,
  /* 424 */ 'h', 'i', 0,
  /* 427 */ 'h', 'w', 'r', '_', 'c', 'p', 'u', 'n', 'u', 'm', 0,
  /* 438 */ 'l', 'o', 0,
  /* 441 */ 'z', 'e', 'r', 'o', 0,
  /* 446 */ 'h', 'w', 'r', '_', 's', 'y', 'n', 'c', 'i', '_', 's', 't', 'e', 'p', 0,
  /* 461 */ 'f', 'p', 0,
  /* 464 */ 'g', 'p', 0,
  /* 467 */ 's', 'p', 0,
  /* 470 */ 'h', 'w', 'r', '_', 'c', 'c', 'r', 'e', 's', 0,
  /* 480 */ 'D', 'S', 'P', 'P', 'o', 's', 0,
  /* 487 */ 'D', 'S', 'P', 'S', 'C', 'o', 'u', 'n', 't', 0,
  /* 497 */ 'D', 'S', 'P', 'C', 'a', 'r', 'r', 'y', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    62, 404, 497, 384, 413, 480, 487, 461, 464, 122, 62, 2, 272, 218, 
    245, 174, 299, 401, 391, 467, 441, 218, 245, 272, 299, 37, 97, 149, 
    201, 62, 2, 62, 122, 174, 218, 245, 272, 299, 326, 360, 2, 62, 
    122, 174, 218, 245, 272, 299, 326, 360, 2, 62, 122, 174, 218, 245, 
    272, 299, 326, 360, 1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 
    9, 69, 129, 181, 225, 252, 279, 306, 333, 371, 30, 90, 1, 61, 
    121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 225, 252, 
    279, 306, 333, 371, 30, 90, 1, 61, 121, 173, 217, 244, 271, 298, 
    325, 359, 9, 69, 129, 181, 225, 252, 279, 306, 333, 371, 30, 90, 
    46, 158, 237, 291, 340, 0, 120, 216, 270, 324, 8, 128, 224, 278, 
    332, 29, 12, 72, 132, 184, 46, 106, 158, 210, 237, 264, 291, 318, 
    340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 324, 362, 8, 68, 
    128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 41, 101, 153, 205, 
    232, 259, 286, 313, 2, 62, 122, 174, 218, 245, 272, 299, 326, 360, 
    1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 
    225, 252, 279, 306, 333, 371, 30, 90, 461, 46, 106, 158, 210, 237, 
    264, 291, 318, 340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 324, 
    362, 8, 68, 128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 464, 
    37, 97, 149, 201, 427, 446, 394, 470, 218, 245, 272, 299, 326, 360, 
    1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 
    225, 252, 279, 306, 333, 371, 30, 90, 279, 306, 37, 97, 149, 201, 
    49, 109, 161, 54, 114, 166, 391, 271, 298, 325, 359, 9, 69, 129, 
    181, 467, 326, 360, 1, 61, 121, 173, 217, 244, 225, 252, 122, 174, 
    57, 117, 169, 213, 240, 267, 294, 321, 343, 381, 4, 64, 124, 176, 
    220, 247, 274, 301, 328, 366, 25, 85, 145, 197, 228, 255, 282, 309, 
    336, 374, 33, 93, 441, 218, 245, 272, 299, 37, 46, 106, 158, 210, 
    237, 264, 291, 318, 340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 
    324, 362, 8, 68, 128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 
    346, 424, 279, 306, 438, 271, 298, 325, 359, 9, 69, 129, 181, 326, 
    360, 1, 61, 121, 173, 217, 244, 225, 252, 122, 174, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool MipsInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case Mips::ADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (ADDu GPR32Opnd:$dst, GPR32Opnd:$src, ZERO)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::BC1F:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1F FCC0, brtarget:$offset)
      AsmString = "bc1f $\x02";
      break;
    }
    return false;
  case Mips::BC1FL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1FL FCC0, brtarget:$offset)
      AsmString = "bc1fl $\x02";
      break;
    }
    return false;
  case Mips::BC1T:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1T FCC0, brtarget:$offset)
      AsmString = "bc1t $\x02";
      break;
    }
    return false;
  case Mips::BC1TL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1TL FCC0, brtarget:$offset)
      AsmString = "bc1tl $\x02";
      break;
    }
    return false;
  case Mips::BREAK:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK 0, 0)
      AsmString = "break";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK uimm10:$imm, 0)
      AsmString = "break $\xFF\x01\x01";
      break;
    }
    return false;
  case Mips::DADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (DADDu GPR64Opnd:$dst, GPR64Opnd:$src, ZERO_64)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::DI:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DI ZERO)
      AsmString = "di";
      break;
    }
    return false;
  case Mips::DI_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DI_MM ZERO)
      AsmString = "di";
      break;
    }
    return false;
  case Mips::DI_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DI_MMR6 ZERO)
      AsmString = "di";
      break;
    }
    return false;
  case Mips::DSUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DSUB GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rs)
      AsmString = "dneg $\x01, $\x03";
      break;
    }
    return false;
  case Mips::DSUBU_MM64R6:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DSUBU_MM64R6 GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rs)
      AsmString = "dnegu $\x01, $\x03";
      break;
    }
    return false;
  case Mips::DSUB_MM64R6:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DSUB_MM64R6 GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rs)
      AsmString = "dneg $\x01, $\x03";
      break;
    }
    return false;
  case Mips::DSUBu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DSUBu GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rs)
      AsmString = "dnegu $\x01, $\x03";
      break;
    }
    return false;
  case Mips::EI:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::EI_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI_MM ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::EI_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI_MMR6 ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::JALR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR ZERO, GPR32Opnd:$rs)
      AsmString = "jr $\x02";
      break;
    }
    return false;
  case Mips::JALR64:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO_64 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR64 ZERO_64, GPR64Opnd:$rs)
      AsmString = "jr $\x02";
      break;
    }
    return false;
  case Mips::JALRC_HB_MMR6:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALRC_HB_MMR6 RA, GPR32Opnd:$rs)
      AsmString = "jalrc.hb $\x02";
      break;
    }
    return false;
  case Mips::JALRC_MMR6:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALRC_MMR6 RA, GPR32Opnd:$rs)
      AsmString = "jalrc $\x02";
      break;
    }
    return false;
  case Mips::JALR_HB:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR_HB RA, GPR32Opnd:$rs)
      AsmString = "jalr.hb $\x02";
      break;
    }
    return false;
  case Mips::JIALC:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (JIALC GPR32Opnd:$rs, 0)
      AsmString = "jalrc $\x01";
      break;
    }
    return false;
  case Mips::JIALC64:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (JIALC64 GPR64Opnd:$rs, 0)
      AsmString = "jalrc $\x01";
      break;
    }
    return false;
  case Mips::JIC:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (JIC GPR32Opnd:$rs, 0)
      AsmString = "jrc $\x01";
      break;
    }
    return false;
  case Mips::JIC64:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (JIC64 GPR64Opnd:$rs, 0)
      AsmString = "jrc $\x01";
      break;
    }
    return false;
  case Mips::MOVE16_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO) {
      // (MOVE16_MM ZERO, ZERO)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::OR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (OR GPR32Opnd:$dst, GPR32Opnd:$src, ZERO)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::OR64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (OR64 GPR64Opnd:$dst, GPR64Opnd:$src, ZERO_64)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::RDHWR_MMR6:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::HWRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RDHWR_MMR6 GPR32Opnd:$rt, HWRegsOpnd:$rs, 0)
      AsmString = "rdhwr $\x01, $\x02";
      break;
    }
    return false;
  case Mips::SDBBP:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SDBBP_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP_MMR6 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SDBBP_R6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP_R6 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SLL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SLL_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL_MM ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SLL_MMR6:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL_MMR6 ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUB GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    return false;
  case Mips::SUBu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBu GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "negu $\x01, $\x03";
      break;
    }
    return false;
  case Mips::SYNC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYNC 0)
      AsmString = "sync";
      break;
    }
    return false;
  case Mips::SYNC_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYNC_MMR6 0)
      AsmString = "sync";
      break;
    }
    return false;
  case Mips::SYSCALL:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYSCALL 0)
      AsmString = "syscall";
      break;
    }
    return false;
  case Mips::SYSCALL_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYSCALL_MM 0)
      AsmString = "syscall";
      break;
    }
    return false;
  case Mips::TEQ:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TEQ GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "teq $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TEQ_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TEQ_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "teq $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGE:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGE GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tge $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGEU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGEU GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tgeu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGEU_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGEU_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tgeu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGE_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGE_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tge $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLT:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLT GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tlt $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLTU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLTU GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tltu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLTU_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLTU_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tltu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLT_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLT_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tlt $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TNE:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TNE GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tne $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TNE_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TNE_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tne $\x01, $\x02";
      break;
    }
    return false;
  case Mips::WAIT_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (WAIT_MM 0)
      AsmString = "wait";
      break;
    }
    return false;
  case Mips::WRDSP:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31) {
      // (WRDSP GPR32Opnd:$rt, 31)
      AsmString = "wrdsp $\x01";
      break;
    }
    return false;
  case Mips::WRDSP_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31) {
      // (WRDSP_MM GPR32Opnd:$rt, 31)
      AsmString = "wrdsp $\x01";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t')      OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void MipsInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printUImm<10>(MI, OpIdx, OS);
    break;
  }
}

#endif // PRINT_ALIAS_INSTR
